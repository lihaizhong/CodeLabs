{"version":3,"file":"index.js","sources":["../../../node_modules/.pnpm/fflate@0.8.2/node_modules/fflate/esm/browser.js","../../fuck-protobuf/dist/index.js","../src/env.ts","../src/polyfill/bridge.ts","../src/benchmark/index.ts","../src/polyfill/fsm.ts","../src/polyfill/download.ts","../src/parser/video-entity.ts","../src/parser/index.ts","../src/polyfill/ratio.ts","../src/polyfill/canvas.ts","../src/polyfill/decode.ts","../src/polyfill/loadImage.ts","../src/polyfill/noop.ts","../src/polyfill/system.ts","../src/polyfill/time.ts","../src/player/render.ts","../src/player/brush.ts","../src/player/animator.ts","../src/player/index.ts","../src/poster/index.ts"],"sourcesContent":["// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","const readUint = (buf, pos) => (buf[pos] |\n    (buf[pos + 1] << 8) |\n    (buf[pos + 2] << 16) |\n    (buf[pos + 3] << 24)) >>>\n    0;\nvar float = {\n    readFloatLE(buf, pos) {\n        const uint = readUint(buf, pos);\n        const sign = (uint >> 31) * 2 + 1;\n        const exponent = (uint >>> 23) & 255;\n        const mantissa = uint & 8388607;\n        return exponent === 255\n            ? mantissa\n                ? NaN\n                : sign * Infinity\n            : exponent === 0 // denormal\n                ? sign * 1.401298464324817e-45 * mantissa\n                : sign * 2 ** (exponent - 150) * (mantissa + 8388608);\n    },\n};\n\n/* eslint-disable no-mixed-operators */\n/**\n * A minimal UTF8 implementation for number arrays.\n * @memberof util\n * @namespace\n */\nvar utf8 = {\n    /**\n     * Reads UTF8 bytes as a string.\n     * @param {Uint8Array} buffer Source buffer\n     * @param {number} start Source start\n     * @param {number} end Source end\n     * @returns {string} String read\n     */\n    read(buffer, start, end) {\n        if (end - start < 1) {\n            return '';\n        }\n        const fromCharCode = (i) => String.fromCharCode(i);\n        let str = '';\n        for (let i = start; i < end;) {\n            const t = buffer[i++];\n            if (t <= 0x7F) {\n                str += fromCharCode(t);\n            }\n            else if (t >= 0xC0 && t < 0xE0) {\n                str += fromCharCode((t & 0x1F) << 6 | buffer[i++] & 0x3F);\n            }\n            else if (t >= 0xE0 && t < 0xF0) {\n                str += fromCharCode((t & 0xF) << 12 | (buffer[i++] & 0x3F) << 6 | buffer[i++] & 0x3F);\n            }\n            else if (t >= 0xF0) {\n                const t2 = ((t & 7) << 18 | (buffer[i++] & 0x3F) << 12 | (buffer[i++] & 0x3F) << 6 | buffer[i++] & 0x3F) - 0x10000;\n                str += fromCharCode(0xD800 + (t2 >> 10));\n                str += fromCharCode(0xDC00 + (t2 & 0x3FF));\n            }\n        }\n        return str;\n    },\n};\n\n// import { LongBits } from \"../dts\";\nclass Reader {\n    /**\n     * Creates a new reader using the specified buffer.\n     * @function\n     * @param {Reader|Uint8Array|Buffer} buffer Buffer to read from\n     * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n     * @throws {Error} If `buffer` is not a valid buffer\n     */\n    static create(buffer) {\n        if (buffer instanceof Reader) {\n            return buffer;\n        }\n        if (buffer instanceof Uint8Array) {\n            return new Reader(buffer);\n        }\n        throw Error(\"illegal buffer\");\n    }\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    buf;\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    pos;\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    len;\n    /**\n     * Constructs a new reader instance using the specified buffer.\n     * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n     * @constructor\n     * @param {Uint8Array} buffer Buffer to read from\n     */\n    constructor(buffer) {\n        this.buf = buffer;\n        this.pos = 0;\n        this.len = buffer.length;\n    }\n    slice(buf, begin, end) {\n        return buf.subarray(begin, end);\n    }\n    indexOutOfRange(reader, writeLength) {\n        return RangeError(\"index out of range: \" +\n            reader.pos +\n            \" + \" +\n            (writeLength || 1) +\n            \" > \" +\n            reader.len);\n    }\n    // private readLongVarint() {\n    //   // tends to deopt with local vars for octet etc.\n    //   const bits = new LongBits(0, 0);\n    //   let i = 0;\n    //   if (this.len - this.pos > 4) {\n    //     // fast route (lo)\n    //     for (let i = 0; i < 4; ++i) {\n    //       // 1st..4th\n    //       bits.lo = (bits.lo | ((this.buf[this.pos] & 127) << (i * 7))) >>> 0;\n    //       if (this.buf[this.pos++] < 128) {\n    //         return bits;\n    //       }\n    //     }\n    //     // 5th\n    //     bits.lo = (bits.lo | ((this.buf[this.pos] & 127) << 28)) >>> 0;\n    //     bits.hi = (bits.hi | ((this.buf[this.pos] & 127) >> 4)) >>> 0;\n    //     if (this.buf[this.pos++] < 128) {\n    //       return bits;\n    //     }\n    //     i = 0;\n    //   } else {\n    //     for (; i < 3; ++i) {\n    //       /* istanbul ignore if */\n    //       if (this.pos >= this.len) {\n    //         throw this.indexOutOfRange(this);\n    //       }\n    //       // 1st..3th\n    //       bits.lo = (bits.lo | ((this.buf[this.pos] & 127) << (i * 7))) >>> 0;\n    //       if (this.buf[this.pos++] < 128) {\n    //         return bits;\n    //       }\n    //     }\n    //     // 4th\n    //     bits.lo = (bits.lo | ((this.buf[this.pos++] & 127) << (i * 7))) >>> 0;\n    //     return bits;\n    //   }\n    //   if (this.len - this.pos > 4) {\n    //     // fast route (hi)\n    //     for (; i < 5; ++i) {\n    //       // 6th..10th\n    //       bits.hi = (bits.hi | ((this.buf[this.pos] & 127) << (i * 7 + 3))) >>> 0;\n    //       if (this.buf[this.pos++] < 128) {\n    //         return bits;\n    //       }\n    //     }\n    //   } else {\n    //     for (; i < 5; ++i) {\n    //       /* istanbul ignore if */\n    //       if (this.pos >= this.len) {\n    //         throw this.indexOutOfRange(this);\n    //       }\n    //       // 6th..10th\n    //       bits.hi = (bits.hi | ((this.buf[this.pos] & 127) << (i * 7 + 3))) >>> 0;\n    //       if (this.buf[this.pos++] < 128) {\n    //         return bits;\n    //       }\n    //     }\n    //   }\n    //   /* istanbul ignore next */\n    //   throw Error(\"invalid varint encoding\");\n    // }\n    // private readFixed32_end(buf: Uint8Array, end: number) {\n    //   // note that this uses `end`, not `pos`\n    //   return (\n    //     (buf[end - 4] |\n    //       (buf[end - 3] << 8) |\n    //       (buf[end - 2] << 16) |\n    //       (buf[end - 1] << 24)) >>>\n    //     0\n    //   );\n    // }\n    // private readFixed64(/* this: Reader */) {\n    //   /* istanbul ignore if */\n    //   if (this.pos + 8 > this.len) throw this.indexOutOfRange(this, 8);\n    //   return new LongBits(\n    //     this.readFixed32_end(this.buf, (this.pos += 4)),\n    //     this.readFixed32_end(this.buf, (this.pos += 4))\n    //   );\n    // }\n    /**\n     * Reads a varint as an unsigned 32 bit value.\n     * @function\n     * @returns {number} Value read\n     */\n    uint32() {\n        let value = 4294967295;\n        value = (this.buf[this.pos] & 127) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        value = (value | ((this.buf[this.pos] & 127) << 7)) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        value = (value | ((this.buf[this.pos] & 127) << 14)) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        value = (value | ((this.buf[this.pos] & 127) << 21)) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        value = (value | ((this.buf[this.pos] & 15) << 28)) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw this.indexOutOfRange(this, 10);\n        }\n        return value;\n    }\n    /**\n     * Reads a varint as a signed 32 bit value.\n     * @returns {number} Value read\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Reads a zig-zag encoded varint as a signed 32 bit value.\n     * @returns {number} Value read\n     */\n    // sint32() {\n    //   const value = this.uint32();\n    //   return ((value >>> 1) ^ -(value & 1)) | 0;\n    // }\n    /**\n     * Reads a varint as an unsigned 64 bit value.\n     * @name Reader#uint64\n     * @function\n     * @returns {Long} Value read\n     */\n    // uint64() {\n    //   return this.readLongVarint().toNumber(true);\n    // }\n    /**\n     * Reads a varint as a signed 64 bit value.\n     * @name Reader#int64\n     * @function\n     * @returns {Long} Value read\n     */\n    // int64() {\n    //   return this.readLongVarint().toNumber(false);\n    // }\n    /**\n     * Reads a zig-zag encoded varint as a signed 64 bit value.\n     * @name Reader#sint64\n     * @function\n     * @returns {Long} Value read\n     */\n    // sint64() {\n    //   return this.readLongVarint().zzDecode().toNumber(false);\n    // }\n    /**\n     * Reads a varint as a boolean.\n     * @returns {boolean} Value read\n     */\n    // bool() {\n    //   return this.uint32() != 0;\n    // }\n    /**\n     * Reads fixed 32 bits as an unsigned 32 bit integer.\n     * @returns {number} Value read\n     */\n    // fixed32() {\n    //   if (this.pos + 4 > this.len) {\n    //     throw this.indexOutOfRange(this, 4);\n    //   }\n    //   return this.readFixed32_end(this.buf, (this.pos += 4));\n    // }\n    /**\n     * Reads fixed 32 bits as a signed 32 bit integer.\n     * @returns {number} Value read\n     */\n    // sfixed32() {\n    //   if (this.pos + 4 > this.len) {\n    //     throw this.indexOutOfRange(this, 4);\n    //   }\n    //   return this.readFixed32_end(this.buf, (this.pos += 4)) | 0;\n    // }\n    /**\n     * Reads fixed 64 bits.\n     * @name Reader#fixed64\n     * @function\n     * @returns {Long} Value read\n     */\n    // fixed64() {\n    //   return this.readFixed64().toNumber(true);\n    // }\n    /**\n     * Reads zig-zag encoded fixed 64 bits.\n     * @name Reader#sfixed64\n     * @function\n     * @returns {Long} Value read\n     */\n    // sfixed64() {\n    //   return this.readFixed64().zzDecode().toNumber(false);\n    // }\n    /**\n     * Reads a float (32 bit) as a number.\n     * @function\n     * @returns {number} Value read\n     */\n    float() {\n        if (this.pos + 4 > this.len) {\n            throw this.indexOutOfRange(this, 4);\n        }\n        const value = float.readFloatLE(this.buf, this.pos);\n        this.pos += 4;\n        return value;\n    }\n    /**\n     * Reads a double (64 bit float) as a number.\n     * @function\n     * @returns {number} Value read\n     */\n    // double() {\n    //   if (this.pos + 8 > this.len) {\n    //     throw this.indexOutOfRange(this, 4);\n    //   }\n    //   const value = float.readDoubleLE(this.buf, this.pos);\n    //   this.pos += 8;\n    //   return value;\n    // }\n    /**\n     * Reads a sequence of bytes preceeded by its length as a varint.\n     * @returns {Uint8Array} Value read\n     */\n    bytes() {\n        const length = this.uint32();\n        const start = this.pos;\n        const end = this.pos + length;\n        if (end > this.len) {\n            throw this.indexOutOfRange(this, length);\n        }\n        this.pos += length;\n        if (start == end) {\n            return new Uint8Array(0);\n        }\n        return this.slice(this.buf, start, end);\n    }\n    /**\n     * Reads a string preceeded by its byte length as a varint.\n     * @returns {string} Value read\n     */\n    string() {\n        const bytes = this.bytes();\n        return utf8.read(bytes, 0, bytes.length);\n    }\n    /**\n     * Skips the specified number of bytes if specified, otherwise skips a varint.\n     * @param {number} [length] Length if known, otherwise a varint is assumed\n     * @returns {Reader} `this`\n     */\n    skip(length) {\n        if (typeof length == \"number\") {\n            /* istanbul ignore if */\n            if (this.pos + length > this.len) {\n                throw this.indexOutOfRange(this, length);\n            }\n            this.pos += length;\n        }\n        else {\n            do {\n                /* istanbul ignore if */\n                if (this.pos >= this.len) {\n                    throw this.indexOutOfRange(this);\n                }\n            } while (this.buf[this.pos++] & 128);\n        }\n        return this;\n    }\n    /**\n     * Skips the next element of the specified wire type.\n     * @param {number} wireType Wire type received\n     * @returns {Reader} `this`\n     */\n    skipType(wireType) {\n        switch (wireType) {\n            case 0:\n                this.skip();\n                break;\n            case 1:\n                this.skip(8);\n                break;\n            case 2:\n                this.skip(this.uint32());\n                break;\n            case 3:\n                while ((wireType = this.uint32() & 7) != 4) {\n                    this.skipType(wireType);\n                }\n                break;\n            case 5:\n                this.skip(4);\n                break;\n            /* istanbul ignore next */\n            default:\n                throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n        }\n        return this;\n    }\n}\n\n// export class LayoutWriter {\n//   /**\n//    * Encodes the specified Layout message. Does not implicitly {@link com.opensource.svga.Layout.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.Layout\n//    * @static\n//    * @param {com.opensource.svga.ILayout} message Layout message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: Layout, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.x != null && Object.hasOwn(message, \"x\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.x);\n//     }\n//     if (message.y != null && Object.hasOwn(message, \"y\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.y);\n//     }\n//     if (message.width != null && Object.hasOwn(message, \"width\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.width);\n//     }\n//     if (message.height != null && Object.hasOwn(message, \"height\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.height);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified Layout message, length delimited. Does not implicitly {@link com.opensource.svga.Layout.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.Layout\n//    * @static\n//    * @param {com.opensource.svga.ILayout} message Layout message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: Layout, writer: Writer): Writer {\n//     return Layout.encode(message, writer).ldelim();\n//   }\n// }\nclass Layout {\n    /**\n     * Decodes a Layout message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.Layout} Layout\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new Layout();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.x = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.y = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.width = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.height = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a Layout message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.Layout} Layout\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): Layout {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a Layout message.\n     * @function verify\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     if (typeof message.x != \"number\") {\n    //       return \"x: number expected\";\n    //     }\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     if (typeof message.y != \"number\") {\n    //       return \"y: number expected\";\n    //     }\n    //   }\n    //   if (message.width != null && message.hasOwnProperty(\"width\")) {\n    //     if (typeof message.width != \"number\") {\n    //       return \"width: number expected\";\n    //     }\n    //   }\n    //   if (message.height != null && message.hasOwnProperty(\"height\")) {\n    //     if (typeof message.height != \"number\") {\n    //       return \"height: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a Layout message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.Layout} Layout\n     */\n    // static fromObject(object: Record<string, any>): Layout {\n    //   if (object instanceof Layout) {\n    //     return object;\n    //   }\n    //   const message = new Layout();\n    //   if (object.x != null) {\n    //     message.x = +object.x;\n    //   }\n    //   if (object.y != null) {\n    //     message.y = +object.y;\n    //   }\n    //   if (object.width != null) {\n    //     message.width = +object.width;\n    //   }\n    //   if (object.height != null) {\n    //     message.height = +object.height;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a Layout message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {com.opensource.svga.Layout} message Layout\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: Layout,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.x = 0;\n    //     object.y = 0;\n    //     object.width = 0;\n    //     object.height = 0;\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     object.x =\n    //       options.json && !isFinite(message.x) ? \"\" + message.x : message.x;\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     object.y =\n    //       options.json && !isFinite(message.y) ? \"\" + message.y : message.y;\n    //   }\n    //   if (message.width != null && message.hasOwnProperty(\"width\")) {\n    //     object.width =\n    //       options.json && !isFinite(message.width)\n    //         ? \"\" + message.width\n    //         : message.width;\n    //   }\n    //   if (message.height != null && message.hasOwnProperty(\"height\")) {\n    //     object.height =\n    //       options.json && !isFinite(message.height)\n    //         ? \"\" + message.height\n    //         : message.height;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for Layout\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.Layout\";\n    // }\n    /**\n     * Layout x.\n     * @member {number} x\n     * @memberof com.opensource.svga.Layout\n     * @instance\n     */\n    x = 0;\n    /**\n     * Layout y.\n     * @member {number} y\n     * @memberof com.opensource.svga.Layout\n     * @instance\n     */\n    y = 0;\n    /**\n     * Layout width.\n     * @member {number} width\n     * @memberof com.opensource.svga.Layout\n     * @instance\n     */\n    width = 0;\n    /**\n     * Layout height.\n     * @member {number} height\n     * @memberof com.opensource.svga.Layout\n     * @instance\n     */\n    height = 0;\n    /**\n     * Constructs a new Layout.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a Layout.\n     * @implements ILayout\n     * @constructor\n     * @param {com.opensource.svga.ILayout=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.x != null) {\n                this.x = properties.x;\n            }\n            if (properties.y != null) {\n                this.y = properties.y;\n            }\n            if (properties.width != null) {\n                this.width = properties.width;\n            }\n            if (properties.height != null) {\n                this.height = properties.height;\n            }\n        }\n    }\n}\n\n// export class TransformWriter {\n//   /**\n//    * Encodes the specified Transform message. Does not implicitly {@link com.opensource.svga.Transform.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.Transform\n//    * @static\n//    * @param {com.opensource.svga.ITransform} message Transform message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: Transform, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.a != null && Object.hasOwn(message, \"a\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.a);\n//     }\n//     if (message.b != null && Object.hasOwn(message, \"b\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.b);\n//     }\n//     if (message.c != null && Object.hasOwn(message, \"c\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.c);\n//     }\n//     if (message.d != null && Object.hasOwn(message, \"d\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.d);\n//     }\n//     if (message.tx != null && Object.hasOwn(message, \"tx\")) {\n//       writer.uint32(/* id 5, wireType 5 =*/ 45).float(message.tx);\n//     }\n//     if (message.ty != null && Object.hasOwn(message, \"ty\")) {\n//       writer.uint32(/* id 6, wireType 5 =*/ 53).float(message.ty);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified Transform message, length delimited. Does not implicitly {@link com.opensource.svga.Transform.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.Transform\n//    * @static\n//    * @param {com.opensource.svga.ITransform} message Transform message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: Transform, writer: Writer): Writer {\n//     return Transform.encode(message, writer).ldelim();\n//   }\n// }\nclass Transform {\n    /**\n     * Decodes a Transform message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.Transform} Transform\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        let end = length == undefined ? reader.len : reader.pos + length;\n        let message = new Transform();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.a = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.b = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.c = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.d = reader.float();\n                    break;\n                }\n                case 5: {\n                    message.tx = reader.float();\n                    break;\n                }\n                case 6: {\n                    message.ty = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a Transform message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.Transform} Transform\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): Transform {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a Transform message.\n     * @function verify\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>) {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.a != null && message.hasOwnProperty(\"a\")) {\n    //     if (typeof message.a != \"number\") {\n    //       return \"a: number expected\";\n    //     }\n    //   }\n    //   if (message.b != null && message.hasOwnProperty(\"b\")) {\n    //     if (typeof message.b != \"number\") {\n    //       return \"b: number expected\";\n    //     }\n    //   }\n    //   if (message.c != null && message.hasOwnProperty(\"c\")) {\n    //     if (typeof message.c != \"number\") {\n    //       return \"c: number expected\";\n    //     }\n    //   }\n    //   if (message.d != null && message.hasOwnProperty(\"d\")) {\n    //     if (typeof message.d != \"number\") {\n    //       return \"d: number expected\";\n    //     }\n    //   }\n    //   if (message.tx != null && message.hasOwnProperty(\"tx\")) {\n    //     if (typeof message.tx != \"number\") {\n    //       return \"tx: number expected\";\n    //     }\n    //   }\n    //   if (message.ty != null && message.hasOwnProperty(\"ty\")) {\n    //     if (typeof message.ty != \"number\") {\n    //       return \"ty: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a Transform message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.Transform} Transform\n     */\n    // static fromObject(object: Record<string, any>): Transform {\n    //   if (object instanceof Transform) {\n    //     return object;\n    //   }\n    //   let message = new Transform();\n    //   if (object.a != null) {\n    //     message.a = +object.a;\n    //   }\n    //   if (object.b != null) {\n    //     message.b = +object.b;\n    //   }\n    //   if (object.c != null) {\n    //     message.c = +object.c;\n    //   }\n    //   if (object.d != null) {\n    //     message.d = +object.d;\n    //   }\n    //   if (object.tx != null) {\n    //     message.tx = +object.tx;\n    //   }\n    //   if (object.ty != null) {\n    //     message.ty = +object.ty;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a Transform message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {com.opensource.svga.Transform} message Transform\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: Transform,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   let object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.a = 0;\n    //     object.b = 0;\n    //     object.c = 0;\n    //     object.d = 0;\n    //     object.tx = 0;\n    //     object.ty = 0;\n    //   }\n    //   if (message.a != null && message.hasOwnProperty(\"a\")) {\n    //     object.a =\n    //       options.json && !isFinite(message.a) ? \"\" + message.a : message.a;\n    //   }\n    //   if (message.b != null && message.hasOwnProperty(\"b\")) {\n    //     object.b =\n    //       options.json && !isFinite(message.b) ? \"\" + message.b : message.b;\n    //   }\n    //   if (message.c != null && message.hasOwnProperty(\"c\")) {\n    //     object.c =\n    //       options.json && !isFinite(message.c) ? \"\" + message.c : message.c;\n    //   }\n    //   if (message.d != null && message.hasOwnProperty(\"d\")) {\n    //     object.d =\n    //       options.json && !isFinite(message.d) ? \"\" + message.d : message.d;\n    //   }\n    //   if (message.tx != null && message.hasOwnProperty(\"tx\")) {\n    //     object.tx =\n    //       options.json && !isFinite(message.tx) ? \"\" + message.tx : message.tx;\n    //   }\n    //   if (message.ty != null && message.hasOwnProperty(\"ty\")) {\n    //     object.ty =\n    //       options.json && !isFinite(message.ty) ? \"\" + message.ty : message.ty;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for Transform\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.Transform\";\n    // }\n    /**\n     * Transform a.\n     * @member {number} a\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    a = 0;\n    /**\n     * Transform b.\n     * @member {number} b\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    b = 0;\n    /**\n     * Transform c.\n     * @member {number} c\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    c = 0;\n    /**\n     * Transform d.\n     * @member {number} d\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    d = 0;\n    /**\n     * Transform tx.\n     * @member {number} tx\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    tx = 0;\n    /**\n     * Transform ty.\n     * @member {number} ty\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    ty = 0;\n    /**\n     * Constructs a new Transform.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a Transform.\n     * @implements ITransform\n     * @constructor\n     * @param {com.opensource.svga.ITransform=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.a != null) {\n                this.a = properties.a;\n            }\n            if (properties.b != null) {\n                this.b = properties.b;\n            }\n            if (properties.c != null) {\n                this.c = properties.c;\n            }\n            if (properties.d != null) {\n                this.d = properties.d;\n            }\n            if (properties.tx != null) {\n                this.tx = properties.tx;\n            }\n            if (properties.ty != null) {\n                this.ty = properties.ty;\n            }\n        }\n    }\n}\n\n// export class ShapeArgsWriter {\n//   /**\n//    * Encodes the specified ShapeArgs message. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeArgs.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IShapeArgs} message ShapeArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: ShapeArgs, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.d != null && Object.hasOwn(message, \"d\")) {\n//       writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.d);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified ShapeArgs message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeArgs.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IShapeArgs} message ShapeArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: ShapeArgs, writer: Writer): Writer {\n//     return ShapeArgs.encode(message, writer).ldelim();\n//   }\n// }\nclass ShapeArgs {\n    /**\n     * Decodes a ShapeArgs message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.ShapeArgs} ShapeArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new ShapeArgs();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.d = reader.string();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a ShapeArgs message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.ShapeArgs} ShapeArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): ShapeArgs {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a ShapeArgs message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.d != null && message.hasOwnProperty(\"d\")) {\n    //     if (!isString(message.d)) {\n    //       return \"d: string expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a ShapeArgs message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.ShapeArgs} ShapeArgs\n     */\n    // static fromObject(object: Record<string, any>): ShapeArgs {\n    //   if (object instanceof ShapeEntity.ShapeArgs) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity.ShapeArgs();\n    //   if (object.d != null) {\n    //     message.d = \"\" + object.d;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a ShapeArgs message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.ShapeArgs} message ShapeArgs\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: ShapeArgs,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.d = \"\";\n    //   }\n    //   if (message.d != null && message.hasOwnProperty(\"d\")) {\n    //     object.d = message.d;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for ShapeArgs\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.ShapeArgs\";\n    // }\n    d = \"\";\n    /**\n     * Constructs a new ShapeArgs.\n     * @memberof com.opensource.svga.ShapeEntity\n     * @classdesc Represents a ShapeArgs.\n     * @implements IShapeArgs\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.IShapeArgs=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.d != null) {\n                this.d = properties.d;\n            }\n        }\n    }\n}\n\n// export class RectArgsWriter {\n//   /**\n//    * Encodes the specified RectArgs message. Does not implicitly {@link com.opensource.svga.ShapeEntity.RectArgs.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.RectArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IRectArgs} message RectArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: RectArgs, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.x != null && Object.hasOwn(message, \"x\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.x);\n//     }\n//     if (message.y != null && Object.hasOwn(message, \"y\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.y);\n//     }\n//     if (message.width != null && Object.hasOwn(message, \"width\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.width);\n//     }\n//     if (message.height != null && Object.hasOwn(message, \"height\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.height);\n//     }\n//     if (\n//       message.cornerRadius != null &&\n//       Object.hasOwn(message, \"cornerRadius\")\n//     ) {\n//       writer.uint32(/* id 5, wireType 5 =*/ 45).float(message.cornerRadius);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified RectArgs message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.RectArgs.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.RectArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IRectArgs} message RectArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: RectArgs, writer: Writer): Writer {\n//     return RectArgs.encode(message, writer).ldelim();\n//   }\n// }\nclass RectArgs {\n    /**\n     * Decodes a RectArgs message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.RectArgs} RectArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new RectArgs();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.x = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.y = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.width = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.height = reader.float();\n                    break;\n                }\n                case 5: {\n                    message.cornerRadius = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a RectArgs message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.RectArgs} RectArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): RectArgs {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a RectArgs message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     if (typeof message.x != \"number\") {\n    //       return \"x: number expected\";\n    //     }\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     if (typeof message.y != \"number\") {\n    //       return \"y: number expected\";\n    //     }\n    //   }\n    //   if (message.width != null && message.hasOwnProperty(\"width\")) {\n    //     if (typeof message.width != \"number\") {\n    //       return \"width: number expected\";\n    //     }\n    //   }\n    //   if (message.height != null && message.hasOwnProperty(\"height\")) {\n    //     if (typeof message.height != \"number\") {\n    //       return \"height: number expected\";\n    //     }\n    //   }\n    //   if (\n    //     message.cornerRadius != null &&\n    //     message.hasOwnProperty(\"cornerRadius\")\n    //   ) {\n    //     if (typeof message.cornerRadius != \"number\") {\n    //       return \"cornerRadius: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a RectArgs message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.RectArgs} RectArgs\n     */\n    // static fromObject(object: Record<string, any>): RectArgs {\n    //   if (object instanceof ShapeEntity.RectArgs) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity.RectArgs();\n    //   if (object.x != null) {\n    //     message.x = +object.x;\n    //   }\n    //   if (object.y != null) {\n    //     message.y = +object.y;\n    //   }\n    //   if (object.width != null) {\n    //     message.width = +object.width;\n    //   }\n    //   if (object.height != null) {\n    //     message.height = +object.height;\n    //   }\n    //   if (object.cornerRadius != null) {\n    //     message.cornerRadius = +object.cornerRadius;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a RectArgs message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.RectArgs} message RectArgs\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: RectArgs,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.x = 0;\n    //     object.y = 0;\n    //     object.width = 0;\n    //     object.height = 0;\n    //     object.cornerRadius = 0;\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     object.x =\n    //       options.json && !isFinite(message.x) ? \"\" + message.x : message.x;\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     object.y =\n    //       options.json && !isFinite(message.y) ? \"\" + message.y : message.y;\n    //   }\n    //   if (message.width != null && message.hasOwnProperty(\"width\")) {\n    //     object.width =\n    //       options.json && !isFinite(message.width)\n    //         ? \"\" + message.width\n    //         : message.width;\n    //   }\n    //   if (message.height != null && message.hasOwnProperty(\"height\")) {\n    //     object.height =\n    //       options.json && !isFinite(message.height)\n    //         ? \"\" + message.height\n    //         : message.height;\n    //   }\n    //   if (\n    //     message.cornerRadius != null &&\n    //     message.hasOwnProperty(\"cornerRadius\")\n    //   ) {\n    //     object.cornerRadius =\n    //       options.json && !isFinite(message.cornerRadius)\n    //         ? \"\" + message.cornerRadius\n    //         : message.cornerRadius;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for RectArgs\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.RectArgs\";\n    // }\n    /**\n     * RectArgs x.\n     * @member {number} x\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    x = 0;\n    /**\n     * RectArgs y.\n     * @member {number} y\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    y = 0;\n    /**\n     * RectArgs width.\n     * @member {number} width\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    width = 0;\n    /**\n     * RectArgs height.\n     * @member {number} height\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    height = 0;\n    /**\n     * RectArgs cornerRadius.\n     * @member {number} cornerRadius\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    cornerRadius = 0;\n    /**\n     * Constructs a new RectArgs.\n     * @memberof com.opensource.svga.ShapeEntity\n     * @classdesc Represents a RectArgs.\n     * @implements IRectArgs\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.IRectArgs=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.x != null) {\n                this.x = properties.x;\n            }\n            if (properties.y != null) {\n                this.y = properties.y;\n            }\n            if (properties.width != null) {\n                this.width = properties.width;\n            }\n            if (properties.height != null) {\n                this.height = properties.height;\n            }\n            if (properties.cornerRadius != null) {\n                this.cornerRadius = properties.cornerRadius;\n            }\n        }\n    }\n}\n\n// export class EllipseArgsWriter {\n//   /**\n//    * Encodes the specified EllipseArgs message. Does not implicitly {@link com.opensource.svga.ShapeEntity.EllipseArgs.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IEllipseArgs} message EllipseArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: EllipseArgs, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.x != null && Object.hasOwn(message, \"x\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.x);\n//     }\n//     if (message.y != null && Object.hasOwn(message, \"y\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.y);\n//     }\n//     if (message.radiusX != null && Object.hasOwn(message, \"radiusX\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.radiusX);\n//     }\n//     if (message.radiusY != null && Object.hasOwn(message, \"radiusY\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.radiusY);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified EllipseArgs message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.EllipseArgs.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IEllipseArgs} message EllipseArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: EllipseArgs, writer: Writer): Writer {\n//     return EllipseArgs.encode(message, writer).ldelim();\n//   }\n// }\nclass EllipseArgs {\n    /**\n     * Decodes an EllipseArgs message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.EllipseArgs} EllipseArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new EllipseArgs();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.x = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.y = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.radiusX = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.radiusY = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes an EllipseArgs message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.EllipseArgs} EllipseArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): EllipseArgs {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies an EllipseArgs message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     if (typeof message.x != \"number\") {\n    //       return \"x: number expected\";\n    //     }\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     if (typeof message.y != \"number\") {\n    //       return \"y: number expected\";\n    //     }\n    //   }\n    //   if (message.radiusX != null && message.hasOwnProperty(\"radiusX\")) {\n    //     if (typeof message.radiusX != \"number\") {\n    //       return \"radiusX: number expected\";\n    //     }\n    //   }\n    //   if (message.radiusY != null && message.hasOwnProperty(\"radiusY\")) {\n    //     if (typeof message.radiusY != \"number\") {\n    //       return \"radiusY: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates an EllipseArgs message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.EllipseArgs} EllipseArgs\n     */\n    // static fromObject(object: Record<string, any>): EllipseArgs {\n    //   if (object instanceof ShapeEntity.EllipseArgs) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity.EllipseArgs();\n    //   if (object.x != null) {\n    //     message.x = +object.x;\n    //   }\n    //   if (object.y != null) {\n    //     message.y = +object.y;\n    //   }\n    //   if (object.radiusX != null) {\n    //     message.radiusX = +object.radiusX;\n    //   }\n    //   if (object.radiusY != null) {\n    //     message.radiusY = +object.radiusY;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from an EllipseArgs message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.EllipseArgs} message EllipseArgs\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: EllipseArgs,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.x = 0;\n    //     object.y = 0;\n    //     object.radiusX = 0;\n    //     object.radiusY = 0;\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     object.x =\n    //       options.json && !isFinite(message.x) ? \"\" + message.x : message.x;\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     object.y =\n    //       options.json && !isFinite(message.y) ? \"\" + message.y : message.y;\n    //   }\n    //   if (message.radiusX != null && message.hasOwnProperty(\"radiusX\")) {\n    //     object.radiusX =\n    //       options.json && !isFinite(message.radiusX)\n    //         ? \"\" + message.radiusX\n    //         : message.radiusX;\n    //   }\n    //   if (message.radiusY != null && message.hasOwnProperty(\"radiusY\")) {\n    //     object.radiusY =\n    //       options.json && !isFinite(message.radiusY)\n    //         ? \"\" + message.radiusY\n    //         : message.radiusY;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for EllipseArgs\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.EllipseArgs\";\n    // }\n    /**\n     * EllipseArgs x.\n     * @member {number} x\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @instance\n     */\n    x = 0;\n    /**\n     * EllipseArgs y.\n     * @member {number} y\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @instance\n     */\n    y = 0;\n    /**\n     * EllipseArgs radiusX.\n     * @member {number} radiusX\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @instance\n     */\n    radiusX = 0;\n    /**\n     * EllipseArgs radiusY.\n     * @member {number} radiusY\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @instance\n     */\n    radiusY = 0;\n    /**\n     * Constructs a new EllipseArgs.\n     * @memberof com.opensource.svga.ShapeEntity\n     * @classdesc Represents an EllipseArgs.\n     * @implements IEllipseArgs\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.IEllipseArgs=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.x != null) {\n                this.x = properties.x;\n            }\n            if (properties.y != null) {\n                this.y = properties.y;\n            }\n            if (properties.radiusX != null) {\n                this.radiusX = properties.radiusX;\n            }\n            if (properties.radiusY != null) {\n                this.radiusY = properties.radiusY;\n            }\n        }\n    }\n}\n\n// export class RGBAColorWriter {\n//   /**\n//    * Encodes the specified RGBAColor message. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor} message RGBAColor message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: RGBAColor, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.r != null && Object.hasOwn(message, \"r\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.r);\n//     }\n//     if (message.g != null && Object.hasOwn(message, \"g\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.g);\n//     }\n//     if (message.b != null && Object.hasOwn(message, \"b\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.b);\n//     }\n//     if (message.a != null && Object.hasOwn(message, \"a\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.a);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified RGBAColor message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor} message RGBAColor message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: RGBAColor, writer: Writer): Writer {\n//     return RGBAColor.encode(message, writer).ldelim();\n//   }\n// }\nclass RGBAColor {\n    /**\n     * Decodes a RGBAColor message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} RGBAColor\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new RGBAColor();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.r = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.g = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.b = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.a = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a RGBAColor message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} RGBAColor\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): RGBAColor {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a RGBAColor message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.r != null && message.hasOwnProperty(\"r\")) {\n    //     if (typeof message.r != \"number\") {\n    //       return \"r: number expected\";\n    //     }\n    //   }\n    //   if (message.g != null && message.hasOwnProperty(\"g\")) {\n    //     if (typeof message.g != \"number\") {\n    //       return \"g: number expected\";\n    //     }\n    //   }\n    //   if (message.b != null && message.hasOwnProperty(\"b\")) {\n    //     if (typeof message.b != \"number\") {\n    //       return \"b: number expected\";\n    //     }\n    //   }\n    //   if (message.a != null && message.hasOwnProperty(\"a\")) {\n    //     if (typeof message.a != \"number\") {\n    //       return \"a: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a RGBAColor message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} RGBAColor\n     */\n    // static fromObject(object: Record<string, any>): RGBAColor {\n    //   if (object instanceof RGBAColor) {\n    //     return object;\n    //   }\n    //   const message = new RGBAColor();\n    //   if (object.r != null) {\n    //     message.r = +object.r;\n    //   }\n    //   if (object.g != null) {\n    //     message.g = +object.g;\n    //   }\n    //   if (object.b != null) {\n    //     message.b = +object.b;\n    //   }\n    //   if (object.a != null) {\n    //     message.a = +object.a;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a RGBAColor message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} message RGBAColor\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: RGBAColor,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.r = 0;\n    //     object.g = 0;\n    //     object.b = 0;\n    //     object.a = 0;\n    //   }\n    //   if (message.r != null && message.hasOwnProperty(\"r\")) {\n    //     object.r =\n    //       options.json && !isFinite(message.r) ? \"\" + message.r : message.r;\n    //   }\n    //   if (message.g != null && message.hasOwnProperty(\"g\")) {\n    //     object.g =\n    //       options.json && !isFinite(message.g) ? \"\" + message.g : message.g;\n    //   }\n    //   if (message.b != null && message.hasOwnProperty(\"b\")) {\n    //     object.b =\n    //       options.json && !isFinite(message.b) ? \"\" + message.b : message.b;\n    //   }\n    //   if (message.a != null && message.hasOwnProperty(\"a\")) {\n    //     object.a =\n    //       options.json && !isFinite(message.a) ? \"\" + message.a : message.a;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for RGBAColor\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return (\n    //     typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\"\n    //   );\n    // }\n    /**\n     * RGBAColor r.\n     * @member {number} r\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @instance\n     */\n    r = 0;\n    /**\n     * RGBAColor g.\n     * @member {number} g\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @instance\n     */\n    g = 0;\n    /**\n     * RGBAColor b.\n     * @member {number} b\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @instance\n     */\n    b = 0;\n    /**\n     * RGBAColor a.\n     * @member {number} a\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @instance\n     */\n    a = 0;\n    /**\n     * Constructs a new RGBAColor.\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @classdesc Represents a RGBAColor.\n     * @implements IRGBAColor\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.r != null) {\n                this.r = properties.r;\n            }\n            if (properties.g != null) {\n                this.g = properties.g;\n            }\n            if (properties.b != null) {\n                this.b = properties.b;\n            }\n            if (properties.a != null) {\n                this.a = properties.a;\n            }\n        }\n    }\n}\n\n// export class ShapeStyleWriter {\n//   /**\n//    * Encodes the specified ShapeStyle message. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeStyle.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IShapeStyle} message ShapeStyle message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: ShapeStyle, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.fill != null && Object.hasOwn(message, \"fill\")) {\n//       RGBAColor.encode(\n//         message.fill,\n//         writer.uint32(/* id 1, wireType 2 =*/ 10).fork()\n//       ).ldelim();\n//     }\n//     if (message.stroke != null && Object.hasOwn(message, \"stroke\")) {\n//       RGBAColor.encode(\n//         message.stroke,\n//         writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n//       ).ldelim();\n//     }\n//     if (message.strokeWidth != null && Object.hasOwn(message, \"strokeWidth\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.strokeWidth);\n//     }\n//     if (message.lineCap != null && Object.hasOwn(message, \"lineCap\")) {\n//       writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineCap);\n//     }\n//     if (message.lineJoin != null && Object.hasOwn(message, \"lineJoin\")) {\n//       writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.lineJoin);\n//     }\n//     if (message.miterLimit != null && Object.hasOwn(message, \"miterLimit\")) {\n//       writer.uint32(/* id 6, wireType 5 =*/ 53).float(message.miterLimit);\n//     }\n//     if (message.lineDashI != null && Object.hasOwn(message, \"lineDashI\")) {\n//       writer.uint32(/* id 7, wireType 5 =*/ 61).float(message.lineDashI);\n//     }\n//     if (message.lineDashII != null && Object.hasOwn(message, \"lineDashII\")) {\n//       writer.uint32(/* id 8, wireType 5 =*/ 69).float(message.lineDashII);\n//     }\n//     if (message.lineDashIII != null && Object.hasOwn(message, \"lineDashIII\")) {\n//       writer.uint32(/* id 9, wireType 5 =*/ 77).float(message.lineDashIII);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified ShapeStyle message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeStyle.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IShapeStyle} message ShapeStyle message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: ShapeStyle, writer: Writer): Writer {\n//     return ShapeStyle.encode(message, writer).ldelim();\n//   }\n// }\nclass ShapeStyle {\n    /**\n     * Decodes a ShapeStyle message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle} ShapeStyle\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new ShapeStyle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.fill = RGBAColor.decode(reader, reader.uint32());\n                    break;\n                }\n                case 2: {\n                    message.stroke = RGBAColor.decode(reader, reader.uint32());\n                    break;\n                }\n                case 3: {\n                    message.strokeWidth = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.lineCap = reader.int32();\n                    break;\n                }\n                case 5: {\n                    message.lineJoin = reader.int32();\n                    break;\n                }\n                case 6: {\n                    message.miterLimit = reader.float();\n                    break;\n                }\n                case 7: {\n                    message.lineDashI = reader.float();\n                    break;\n                }\n                case 8: {\n                    message.lineDashII = reader.float();\n                    break;\n                }\n                case 9: {\n                    message.lineDashIII = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a ShapeStyle message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle} ShapeStyle\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): ShapeStyle {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a ShapeStyle message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.fill != null && message.hasOwnProperty(\"fill\")) {\n    //     const error = RGBAColor.verify(message.fill);\n    //     if (error) {\n    //       return \"fill.\" + error;\n    //     }\n    //   }\n    //   if (message.stroke != null && message.hasOwnProperty(\"stroke\")) {\n    //     const error = RGBAColor.verify(message.stroke);\n    //     if (error) {\n    //       return \"stroke.\" + error;\n    //     }\n    //   }\n    //   if (message.strokeWidth != null && message.hasOwnProperty(\"strokeWidth\")) {\n    //     if (typeof message.strokeWidth != \"number\") {\n    //       return \"strokeWidth: number expected\";\n    //     }\n    //   }\n    //   if (message.lineCap != null && message.hasOwnProperty(\"lineCap\"))\n    //     switch (message.lineCap) {\n    //       default:\n    //         return \"lineCap: enum value expected\";\n    //       case 0:\n    //       case 1:\n    //       case 2:\n    //         break;\n    //     }\n    //   if (message.lineJoin != null && message.hasOwnProperty(\"lineJoin\"))\n    //     switch (message.lineJoin) {\n    //       default:\n    //         return \"lineJoin: enum value expected\";\n    //       case 0:\n    //       case 1:\n    //       case 2:\n    //         break;\n    //     }\n    //   if (message.miterLimit != null && message.hasOwnProperty(\"miterLimit\")) {\n    //     if (typeof message.miterLimit != \"number\") {\n    //       return \"miterLimit: number expected\";\n    //     }\n    //   }\n    //   if (message.lineDashI != null && message.hasOwnProperty(\"lineDashI\")) {\n    //     if (typeof message.lineDashI != \"number\") {\n    //       return \"lineDashI: number expected\";\n    //     }\n    //   }\n    //   if (message.lineDashII != null && message.hasOwnProperty(\"lineDashII\")) {\n    //     if (typeof message.lineDashII != \"number\") {\n    //       return \"lineDashII: number expected\";\n    //     }\n    //   }\n    //   if (message.lineDashIII != null && message.hasOwnProperty(\"lineDashIII\")) {\n    //     if (typeof message.lineDashIII != \"number\") {\n    //       return \"lineDashIII: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a ShapeStyle message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle} ShapeStyle\n     */\n    // static fromObject(object: Record<string, any>): ShapeStyle {\n    //   if (object instanceof ShapeEntity.ShapeStyle) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity.ShapeStyle();\n    //   if (object.fill != null) {\n    //     if (typeof object.fill != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.ShapeStyle.fill: object expected\"\n    //       );\n    //     }\n    //     message.fill = RGBAColor.fromObject(object.fill);\n    //   }\n    //   if (object.stroke != null) {\n    //     if (typeof object.stroke != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.ShapeStyle.stroke: object expected\"\n    //       );\n    //     }\n    //     message.stroke = RGBAColor.fromObject(\n    //       object.stroke\n    //     );\n    //   }\n    //   if (object.strokeWidth != null) {\n    //     message.strokeWidth = Number(object.strokeWidth);\n    //   }\n    //   switch (object.lineCap) {\n    //     default:\n    //       if (typeof object.lineCap == \"number\") {\n    //         message.lineCap = object.lineCap;\n    //         break;\n    //       }\n    //       break;\n    //     case \"LineCap_BUTT\":\n    //     case 0:\n    //       message.lineCap = 0;\n    //       break;\n    //     case \"LineCap_ROUND\":\n    //     case 1:\n    //       message.lineCap = 1;\n    //       break;\n    //     case \"LineCap_SQUARE\":\n    //     case 2:\n    //       message.lineCap = 2;\n    //       break;\n    //   }\n    //   switch (object.lineJoin) {\n    //     default:\n    //       if (typeof object.lineJoin == \"number\") {\n    //         message.lineJoin = object.lineJoin;\n    //         break;\n    //       }\n    //       break;\n    //     case \"LineJoin_MITER\":\n    //     case 0:\n    //       message.lineJoin = 0;\n    //       break;\n    //     case \"LineJoin_ROUND\":\n    //     case 1:\n    //       message.lineJoin = 1;\n    //       break;\n    //     case \"LineJoin_BEVEL\":\n    //     case 2:\n    //       message.lineJoin = 2;\n    //       break;\n    //   }\n    //   if (object.miterLimit != null) {\n    //     message.miterLimit = +object.miterLimit;\n    //   }\n    //   if (object.lineDashI != null) {\n    //     message.lineDashI = +object.lineDashI;\n    //   }\n    //   if (object.lineDashII != null) {\n    //     message.lineDashII = +object.lineDashII;\n    //   }\n    //   if (object.lineDashIII != null) {\n    //     message.lineDashIII = +object.lineDashIII;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a ShapeStyle message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.ShapeStyle} message ShapeStyle\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: ShapeStyle,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.fill = null;\n    //     object.stroke = null;\n    //     object.strokeWidth = 0;\n    //     object.lineCap = options.enums == String ? \"LineCap_BUTT\" : 0;\n    //     object.lineJoin = options.enums == String ? \"LineJoin_MITER\" : 0;\n    //     object.miterLimit = 0;\n    //     object.lineDashI = 0;\n    //     object.lineDashII = 0;\n    //     object.lineDashIII = 0;\n    //   }\n    //   if (message.fill != null && message.hasOwnProperty(\"fill\")) {\n    //     object.fill = RGBAColor.toObject(\n    //       message.fill,\n    //       options\n    //     );\n    //   }\n    //   if (message.stroke != null && message.hasOwnProperty(\"stroke\")) {\n    //     object.stroke = RGBAColor.toObject(\n    //       message.stroke,\n    //       options\n    //     );\n    //   }\n    //   if (message.strokeWidth != null && message.hasOwnProperty(\"strokeWidth\")) {\n    //     object.strokeWidth =\n    //       options.json && !isFinite(message.strokeWidth)\n    //         ? \"\" + message.strokeWidth\n    //         : message.strokeWidth;\n    //   }\n    //   if (message.lineCap != null && message.hasOwnProperty(\"lineCap\")) {\n    //     object.lineCap =\n    //       options.enums == String\n    //         ? LineCap[message.lineCap] == undefined\n    //           ? message.lineCap\n    //           : LineCap[message.lineCap]\n    //         : message.lineCap;\n    //   }\n    //   if (message.lineJoin != null && message.hasOwnProperty(\"lineJoin\")) {\n    //     object.lineJoin =\n    //       options.enums == String\n    //         ? LineJoin[message.lineJoin] == undefined\n    //           ? message.lineJoin\n    //           : LineJoin[message.lineJoin]\n    //         : message.lineJoin;\n    //   }\n    //   if (message.miterLimit != null && message.hasOwnProperty(\"miterLimit\")) {\n    //     object.miterLimit =\n    //       options.json && !isFinite(message.miterLimit)\n    //         ? \"\" + message.miterLimit\n    //         : message.miterLimit;\n    //   }\n    //   if (message.lineDashI != null && message.hasOwnProperty(\"lineDashI\")) {\n    //     object.lineDashI =\n    //       options.json && !isFinite(message.lineDashI)\n    //         ? \"\" + message.lineDashI\n    //         : message.lineDashI;\n    //   }\n    //   if (message.lineDashII != null && message.hasOwnProperty(\"lineDashII\")) {\n    //     object.lineDashII =\n    //       options.json && !isFinite(message.lineDashII)\n    //         ? \"\" + message.lineDashII\n    //         : message.lineDashII;\n    //   }\n    //   if (message.lineDashIII != null && message.hasOwnProperty(\"lineDashIII\")) {\n    //     object.lineDashIII =\n    //       options.json && !isFinite(message.lineDashIII)\n    //         ? \"\" + message.lineDashIII\n    //         : message.lineDashIII;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for ShapeStyle\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.ShapeStyle\";\n    // }\n    /**\n     * ShapeStyle fill.\n     * @member {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor|null|undefined} fill\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    fill = null;\n    /**\n     * ShapeStyle stroke.\n     * @member {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor|null|undefined} stroke\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    stroke = null;\n    /**\n     * ShapeStyle strokeWidth.\n     * @member {number} strokeWidth\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    strokeWidth = 0;\n    /**\n     * ShapeStyle lineCap.\n     * @member {com.opensource.svga.ShapeEntity.ShapeStyle.LineCap} lineCap\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineCap = 0;\n    /**\n     * ShapeStyle lineJoin.\n     * @member {com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin} lineJoin\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineJoin = 0;\n    /**\n     * ShapeStyle miterLimit.\n     * @member {number} miterLimit\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    miterLimit = 0;\n    /**\n     * ShapeStyle lineDashI.\n     * @member {number} lineDashI\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineDashI = 0;\n    /**\n     * ShapeStyle lineDashII.\n     * @member {number} lineDashII\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineDashII = 0;\n    /**\n     * ShapeStyle lineDashIII.\n     * @member {number} lineDashIII\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineDashIII = 0;\n    /**\n     * Constructs a new ShapeStyle.\n     * @memberof com.opensource.svga.ShapeEntity\n     * @classdesc Represents a ShapeStyle.\n     * @implements IShapeStyle\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.IShapeStyle=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.fill != null) {\n                this.fill = properties.fill;\n            }\n            if (properties.lineCap != null) {\n                this.lineCap = properties.lineCap;\n            }\n            if (properties.lineDashI != null) {\n                this.lineDashI = properties.lineDashI;\n            }\n            if (properties.lineDashII != null) {\n                this.lineDashII = properties.lineDashII;\n            }\n            if (properties.lineDashIII != null) {\n                this.lineDashIII = properties.lineDashIII;\n            }\n            if (properties.lineJoin != null) {\n                this.lineJoin = properties.lineJoin;\n            }\n            if (properties.miterLimit != null) {\n                this.miterLimit = properties.miterLimit;\n            }\n            if (properties.stroke != null) {\n                this.stroke = properties.stroke;\n            }\n            if (properties.strokeWidth != null) {\n                this.strokeWidth = properties.strokeWidth;\n            }\n        }\n    }\n}\n\n// export class ShapeEntityWriter {\n//   /**\n//    * Encodes the specified ShapeEntity message. Does not implicitly {@link com.opensource.svga.ShapeEntity.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity\n//    * @static\n//    * @param {com.opensource.svga.IShapeEntity} message ShapeEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: ShapeEntity, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.type != null && Object.hasOwn(message, \"type\")) {\n//       writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type);\n//     }\n//     if (message.shape != null && Object.hasOwn(message, \"shape\")) {\n//       ShapeArgs.encode(\n//         message.shape,\n//         writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n//       ).ldelim();\n//     }\n//     if (message.rect != null && Object.hasOwn(message, \"rect\")) {\n//       RectArgs.encode(\n//         message.rect,\n//         writer.uint32(/* id 3, wireType 2 =*/ 26).fork()\n//       ).ldelim();\n//     }\n//     if (message.ellipse != null && Object.hasOwn(message, \"ellipse\")) {\n//       EllipseArgs.encode(\n//         message.ellipse,\n//         writer.uint32(/* id 4, wireType 2 =*/ 34).fork()\n//       ).ldelim();\n//     }\n//     if (message.styles != null && Object.hasOwn(message, \"styles\")) {\n//       ShapeStyle.encode(\n//         message.styles,\n//         writer.uint32(/* id 10, wireType 2 =*/ 82).fork()\n//       ).ldelim();\n//     }\n//     if (message.transform != null && Object.hasOwn(message, \"transform\")) {\n//       Transform.encode(\n//         message.transform,\n//         writer.uint32(/* id 11, wireType 2 =*/ 90).fork()\n//       ).ldelim();\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified ShapeEntity message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity\n//    * @static\n//    * @param {com.opensource.svga.IShapeEntity} message ShapeEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: ShapeEntity, writer: Writer): Writer {\n//     return ShapeEntity.encode(message, writer).ldelim();\n//   }\n// }\nclass ShapeEntity {\n    /**\n     * Decodes a ShapeEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity} ShapeEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new ShapeEntity();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.type = reader.int32();\n                    break;\n                }\n                case 2: {\n                    message.shape = ShapeArgs.decode(reader, reader.uint32());\n                    break;\n                }\n                case 3: {\n                    message.rect = RectArgs.decode(reader, reader.uint32());\n                    break;\n                }\n                case 4: {\n                    message.ellipse = EllipseArgs.decode(reader, reader.uint32());\n                    break;\n                }\n                case 10: {\n                    message.styles = ShapeStyle.decode(reader, reader.uint32());\n                    break;\n                }\n                case 11: {\n                    message.transform = Transform.decode(reader, reader.uint32());\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a ShapeEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity} ShapeEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): ShapeEntity {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a ShapeEntity message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   const properties: Record<string, any> = {};\n    //   if (message.type != null && message.hasOwnProperty(\"type\"))\n    //     switch (message.type) {\n    //       default:\n    //         return \"type: enum value expected\";\n    //       case 0:\n    //       case 1:\n    //       case 2:\n    //       case 3:\n    //         break;\n    //     }\n    //   if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n    //     properties.args = 1;\n    //     {\n    //       let error = ShapeEntity.ShapeArgs.verify(message.shape);\n    //       if (error) {\n    //         return \"shape.\" + error;\n    //       }\n    //     }\n    //   }\n    //   if (message.rect != null && message.hasOwnProperty(\"rect\")) {\n    //     if (properties.args == 1) {\n    //       return \"args: multiple values\";\n    //     }\n    //     properties.args = 1;\n    //     {\n    //       const error = ShapeEntity.RectArgs.verify(message.rect);\n    //       if (error) {\n    //         return \"rect.\" + error;\n    //       }\n    //     }\n    //   }\n    //   if (message.ellipse != null && message.hasOwnProperty(\"ellipse\")) {\n    //     if (properties.args == 1) {\n    //       return \"args: multiple values\";\n    //     }\n    //     properties.args = 1;\n    //     const error = ShapeEntity.EllipseArgs.verify(message.ellipse);\n    //     if (error) {\n    //       return \"ellipse.\" + error;\n    //     }\n    //   }\n    //   if (message.styles != null && message.hasOwnProperty(\"styles\")) {\n    //     const error = ShapeEntity.ShapeStyle.verify(message.styles);\n    //     if (error) {\n    //       return \"styles.\" + error;\n    //     }\n    //   }\n    //   if (message.transform != null && message.hasOwnProperty(\"transform\")) {\n    //     const error = Transform.verify(message.transform);\n    //     if (error) {\n    //       return \"transform.\" + error;\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a ShapeEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity} ShapeEntity\n     */\n    // static fromObject(object: Record<string, any>): ShapeEntity {\n    //   if (object instanceof ShapeEntity) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity();\n    //   switch (object.type) {\n    //     default:\n    //       if (typeof object.type == \"number\") {\n    //         message.type = object.type;\n    //         break;\n    //       }\n    //       break;\n    //     case \"SHAPE\":\n    //     case 0:\n    //       message.type = 0;\n    //       break;\n    //     case \"RECT\":\n    //     case 1:\n    //       message.type = 1;\n    //       break;\n    //     case \"ELLIPSE\":\n    //     case 2:\n    //       message.type = 2;\n    //       break;\n    //     case \"KEEP\":\n    //     case 3:\n    //       message.type = 3;\n    //       break;\n    //   }\n    //   if (object.shape != null) {\n    //     if (typeof object.shape != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.shape: object expected\"\n    //       );\n    //     }\n    //     message.shape = ShapeArgs.fromObject(object.shape);\n    //   }\n    //   if (object.rect != null) {\n    //     if (typeof object.rect != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.rect: object expected\"\n    //       );\n    //     }\n    //     message.rect = RectArgs.fromObject(object.rect);\n    //   }\n    //   if (object.ellipse != null) {\n    //     if (typeof object.ellipse != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.ellipse: object expected\"\n    //       );\n    //     }\n    //     message.ellipse = EllipseArgs.fromObject(object.ellipse);\n    //   }\n    //   if (object.styles != null) {\n    //     if (typeof object.styles != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.styles: object expected\"\n    //       );\n    //     }\n    //     message.styles = ShapeStyle.fromObject(object.styles);\n    //   }\n    //   if (object.transform != null) {\n    //     if (typeof object.transform != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.transform: object expected\"\n    //       );\n    //     }\n    //     message.transform = Transform.fromObject(object.transform);\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a ShapeEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {com.opensource.svga.ShapeEntity} message ShapeEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: ShapeEntity,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.type = options.enums == String ? \"SHAPE\" : 0;\n    //     object.styles = null;\n    //     object.transform = null;\n    //   }\n    //   if (message.type != null && message.hasOwnProperty(\"type\")) {\n    //     object.type =\n    //       options.enums == String\n    //         ? ShapeType[message.type] == undefined\n    //           ? message.type\n    //           : ShapeType[message.type]\n    //         : message.type;\n    //   }\n    //   if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n    //     object.shape = ShapeEntity.ShapeArgs.toObject(message.shape, options);\n    //     if (options.oneofs) {\n    //       object.args = \"shape\";\n    //     }\n    //   }\n    //   if (message.rect != null && message.hasOwnProperty(\"rect\")) {\n    //     object.rect = ShapeEntity.RectArgs.toObject(message.rect, options);\n    //     if (options.oneofs) {\n    //       object.args = \"rect\";\n    //     }\n    //   }\n    //   if (message.ellipse != null && message.hasOwnProperty(\"ellipse\")) {\n    //     object.ellipse = ShapeEntity.EllipseArgs.toObject(\n    //       message.ellipse,\n    //       options\n    //     );\n    //     if (options.oneofs) {\n    //       object.args = \"ellipse\";\n    //     }\n    //   }\n    //   if (message.styles != null && message.hasOwnProperty(\"styles\")) {\n    //     object.styles = ShapeEntity.ShapeStyle.toObject(message.styles, options);\n    //   }\n    //   if (message.transform != null && message.hasOwnProperty(\"transform\")) {\n    //     object.transform = Transform.toObject(message.transform, options);\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for ShapeEntity\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity\";\n    // }\n    /**\n     * ShapeEntity type.\n     * @member {com.opensource.svga.ShapeEntity.ShapeType} type\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    type = 0;\n    /**\n     * ShapeEntity shape.\n     * @member {com.opensource.svga.ShapeEntity.IShapeArgs|null|undefined} shape\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    shape = null;\n    /**\n     * ShapeEntity rect.\n     * @member {com.opensource.svga.ShapeEntity.IRectArgs|null|undefined} rect\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    rect = null;\n    /**\n     * ShapeEntity ellipse.\n     * @member {com.opensource.svga.ShapeEntity.IEllipseArgs|null|undefined} ellipse\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    ellipse = null;\n    /**\n     * ShapeEntity styles.\n     * @member {com.opensource.svga.ShapeEntity.IShapeStyle|null|undefined} styles\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    styles = null;\n    /**\n     * ShapeEntity transform.\n     * @member {com.opensource.svga.ITransform|null|undefined} transform\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    transform = null;\n    $oneOfFields = [\n        \"shape\",\n        \"rect\",\n        \"ellipse\",\n    ];\n    $fieldMap = {};\n    get args() {\n        const keys = Object.keys(this);\n        for (let i = keys.length - 1; i > -1; --i) {\n            const key = keys[i];\n            const value = this[key];\n            if (this.$fieldMap[key] == 1 && value != null) {\n                return key;\n            }\n        }\n        return \"\";\n    }\n    set args(name) {\n        for (var i = 0; i < this.$oneOfFields.length; ++i) {\n            const key = this.$oneOfFields[i];\n            if (key != name) {\n                delete this[key];\n            }\n        }\n    }\n    /**\n     * Constructs a new ShapeEntity.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a ShapeEntity.\n     * @implements IShapeEntity\n     * @constructor\n     * @param {com.opensource.svga.IShapeEntity=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.type != null) {\n                this.type = properties.type;\n            }\n            if (properties.ellipse != null) {\n                this.ellipse = properties.ellipse;\n            }\n            if (properties.rect != null) {\n                this.rect = properties.rect;\n            }\n            if (properties.shape != null) {\n                this.shape = properties.shape;\n            }\n            if (properties.styles != null) {\n                this.styles = properties.styles;\n            }\n            if (properties.transform != null) {\n                this.transform = properties.transform;\n            }\n        }\n        for (var i = 0; i < this.$oneOfFields.length; ++i) {\n            this.$fieldMap[this.$oneOfFields[i]] = 1;\n        }\n    }\n}\n\n// export class FrameEntityWriter {\n//   /**\n//    * Encodes the specified FrameEntity message. Does not implicitly {@link com.opensource.svga.FrameEntity.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.FrameEntity\n//    * @static\n//    * @param {com.opensource.svga.IFrameEntity} message FrameEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: FrameEntity, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.alpha != null && Object.hasOwn(message, \"alpha\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.alpha);\n//     }\n//     if (message.layout != null && Object.hasOwn(message, \"layout\")) {\n//       Layout.encode(\n//         message.layout,\n//         writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n//       ).ldelim();\n//     }\n//     if (message.transform != null && Object.hasOwn(message, \"transform\")) {\n//       Transform.encode(\n//         message.transform,\n//         writer.uint32(/* id 3, wireType 2 =*/ 26).fork()\n//       ).ldelim();\n//     }\n//     if (message.clipPath != null && Object.hasOwn(message, \"clipPath\")) {\n//       writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.clipPath);\n//     }\n//     if (message.shapes != null && message.shapes.length) {\n//       for (let i = 0; i < message.shapes.length; ++i) {\n//         ShapeEntity.encode(\n//           message.shapes[i],\n//           writer.uint32(/* id 5, wireType 2 =*/ 42).fork()\n//         ).ldelim();\n//       }\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified FrameEntity message, length delimited. Does not implicitly {@link com.opensource.svga.FrameEntity.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.FrameEntity\n//    * @static\n//    * @param {com.opensource.svga.IFrameEntity} message FrameEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: FrameEntity, writer: Writer): Writer {\n//     return FrameEntity.encode(message, writer).ldelim();\n//   }\n// }\nclass FrameEntity {\n    /**\n     * Decodes a FrameEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.FrameEntity} FrameEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new FrameEntity();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.alpha = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.layout = Layout.decode(reader, reader.uint32());\n                    break;\n                }\n                case 3: {\n                    message.transform = Transform.decode(reader, reader.uint32());\n                    break;\n                }\n                case 4: {\n                    message.clipPath = reader.string();\n                    break;\n                }\n                case 5: {\n                    if (!(message.shapes && message.shapes.length)) {\n                        message.shapes = [];\n                    }\n                    message.shapes.push(ShapeEntity.decode(reader, reader.uint32()));\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a FrameEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.FrameEntity} FrameEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): FrameEntity {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a FrameEntity message.\n     * @function verify\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.alpha != null && message.hasOwnProperty(\"alpha\")) {\n    //     if (typeof message.alpha != \"number\") {\n    //       return \"alpha: number expected\";\n    //     }\n    //   }\n    //   if (message.layout != null && message.hasOwnProperty(\"layout\")) {\n    //     const error = Layout.verify(message.layout);\n    //     if (error) {\n    //       return \"layout.\" + error;\n    //     }\n    //   }\n    //   if (message.transform != null && message.hasOwnProperty(\"transform\")) {\n    //     const error = Transform.verify(message.transform);\n    //     if (error) {\n    //       return \"transform.\" + error;\n    //     }\n    //   }\n    //   if (message.clipPath != null && message.hasOwnProperty(\"clipPath\")) {\n    //     if (!isString(message.clipPath)) {\n    //       return \"clipPath: string expected\";\n    //     }\n    //   }\n    //   if (message.shapes != null && message.hasOwnProperty(\"shapes\")) {\n    //     if (!Array.isArray(message.shapes)) {\n    //       return \"shapes: array expected\";\n    //     }\n    //     for (let i = 0; i < message.shapes.length; ++i) {\n    //       const error = ShapeEntity.verify(message.shapes[i]);\n    //       if (error) {\n    //         return \"shapes.\" + error;\n    //       }\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a FrameEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.FrameEntity} FrameEntity\n     */\n    // static fromObject(object: Record<string, any>): FrameEntity {\n    //   if (object instanceof FrameEntity) {\n    //     return object;\n    //   }\n    //   const message = new FrameEntity();\n    //   if (object.alpha != null) {\n    //     message.alpha = +object.alpha;\n    //   }\n    //   if (object.layout != null) {\n    //     if (typeof object.layout != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.FrameEntity.layout: object expected\"\n    //       );\n    //     }\n    //     message.layout = Layout.fromObject(object.layout);\n    //   }\n    //   if (object.transform != null) {\n    //     if (typeof object.transform != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.FrameEntity.transform: object expected\"\n    //       );\n    //     }\n    //     message.transform = Transform.fromObject(object.transform);\n    //   }\n    //   if (object.clipPath != null) {\n    //     message.clipPath = String(object.clipPath);\n    //   }\n    //   if (object.shapes) {\n    //     if (!Array.isArray(object.shapes)) {\n    //       throw TypeError(\n    //         \".com.opensource.svga.FrameEntity.shapes: array expected\"\n    //       );\n    //     }\n    //     message.shapes = [];\n    //     for (let i = 0; i < object.shapes.length; ++i) {\n    //       if (typeof object.shapes[i] != \"object\") {\n    //         throw TypeError(\n    //           \".com.opensource.svga.FrameEntity.shapes: object expected\"\n    //         );\n    //       }\n    //       message.shapes[i] = ShapeEntity.fromObject(object.shapes[i]);\n    //     }\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a FrameEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {com.opensource.svga.FrameEntity} message FrameEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: FrameEntity,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.arrays || options.defaults) {\n    //     object.shapes = [];\n    //   }\n    //   if (options.defaults) {\n    //     object.alpha = 0;\n    //     object.layout = null;\n    //     object.transform = null;\n    //     object.clipPath = \"\";\n    //   }\n    //   if (message.alpha != null && message.hasOwnProperty(\"alpha\")) {\n    //     object.alpha =\n    //       options.json && !isFinite(message.alpha)\n    //         ? \"\" + message.alpha\n    //         : message.alpha;\n    //   }\n    //   if (message.layout != null && message.hasOwnProperty(\"layout\")) {\n    //     object.layout = Layout.toObject(message.layout, options);\n    //   }\n    //   if (message.transform != null && message.hasOwnProperty(\"transform\")) {\n    //     object.transform = Transform.toObject(message.transform, options);\n    //   }\n    //   if (message.clipPath != null && message.hasOwnProperty(\"clipPath\")) {\n    //     object.clipPath = message.clipPath;\n    //   }\n    //   if (message.shapes && message.shapes.length) {\n    //     object.shapes = [];\n    //     for (let j = 0; j < message.shapes.length; ++j) {\n    //       object.shapes[j] = ShapeEntity.toObject(message.shapes[j], options);\n    //     }\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for FrameEntity\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.FrameEntity\";\n    // }\n    /**\n     * FrameEntity shapes.\n     * @member {Array.<com.opensource.svga.IShapeEntity>} shapes\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    shapes = [];\n    /**\n     * FrameEntity alpha.\n     * @member {number} alpha\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    alpha = 0;\n    /**\n     * FrameEntity layout.\n     * @member {com.opensource.svga.ILayout|null|undefined} layout\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    layout = null;\n    /**\n     * FrameEntity transform.\n     * @member {com.opensource.svga.ITransform|null|undefined} transform\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    transform = null;\n    /**\n     * FrameEntity clipPath.\n     * @member {string} clipPath\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    clipPath = \"\";\n    /**\n     * Constructs a new FrameEntity.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a FrameEntity.\n     * @implements IFrameEntity\n     * @constructor\n     * @param {com.opensource.svga.IFrameEntity=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.alpha != null) {\n                this.alpha = properties.alpha;\n            }\n            if (properties.clipPath != null) {\n                this.clipPath = properties.clipPath;\n            }\n            if (properties.layout != null) {\n                this.layout = properties.layout;\n            }\n            if (properties.shapes != null) {\n                this.shapes = properties.shapes;\n            }\n            if (properties.transform != null) {\n                this.transform = properties.transform;\n            }\n        }\n    }\n}\n\n// export class SpriteEntityWriter {\n//   /**\n//    * Encodes the specified SpriteEntity message. Does not implicitly {@link com.opensource.svga.SpriteEntity.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.SpriteEntity\n//    * @static\n//    * @param {com.opensource.svga.ISpriteEntity} message SpriteEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: SpriteEntity, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.imageKey != null && Object.hasOwn(message, \"imageKey\")) {\n//       writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.imageKey);\n//     }\n//     if (message.frames != null && message.frames.length) {\n//       for (let i = 0; i < message.frames.length; ++i) {\n//         FrameEntity.encode(\n//           message.frames[i],\n//           writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n//         ).ldelim();\n//       }\n//     }\n//     if (message.matteKey != null && Object.hasOwn(message, \"matteKey\")) {\n//       writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.matteKey);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified SpriteEntity message, length delimited. Does not implicitly {@link com.opensource.svga.SpriteEntity.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.SpriteEntity\n//    * @static\n//    * @param {com.opensource.svga.ISpriteEntity} message SpriteEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: SpriteEntity, writer: Writer): Writer {\n//     return SpriteEntity.encode(message, writer).ldelim();\n//   }\n// }\nclass SpriteEntity {\n    /**\n     * Decodes a SpriteEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.SpriteEntity} SpriteEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new SpriteEntity();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.imageKey = reader.string();\n                    break;\n                }\n                case 2: {\n                    if (!(message.frames && message.frames.length)) {\n                        message.frames = [];\n                    }\n                    message.frames.push(FrameEntity.decode(reader, reader.uint32()));\n                    break;\n                }\n                case 3: {\n                    message.matteKey = reader.string();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a SpriteEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.SpriteEntity} SpriteEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): SpriteEntity {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a SpriteEntity message.\n     * @function verify\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.imageKey != null && message.hasOwnProperty(\"imageKey\")) {\n    //     if (!isString(message.imageKey)) {\n    //       return \"imageKey: string expected\";\n    //     }\n    //   }\n    //   if (message.frames != null && message.hasOwnProperty(\"frames\")) {\n    //     if (!Array.isArray(message.frames)) {\n    //       return \"frames: array expected\";\n    //     }\n    //     for (let i = 0; i < message.frames.length; ++i) {\n    //       const error = FrameEntity.verify(message.frames[i]);\n    //       if (error) {\n    //         return \"frames.\" + error;\n    //       }\n    //     }\n    //   }\n    //   if (message.matteKey != null && message.hasOwnProperty(\"matteKey\")) {\n    //     if (!isString(message.matteKey)) {\n    //       return \"matteKey: string expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a SpriteEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.SpriteEntity} SpriteEntity\n     */\n    // static fromObject(object: Record<string, any>): SpriteEntity {\n    //   if (object instanceof SpriteEntity) {\n    //     return object;\n    //   }\n    //   const message = new SpriteEntity();\n    //   if (object.imageKey != null) {\n    //     message.imageKey = \"\" + object.imageKey;\n    //   }\n    //   if (object.frames) {\n    //     if (!Array.isArray(object.frames)) {\n    //       throw TypeError(\n    //         \".com.opensource.svga.SpriteEntity.frames: array expected\"\n    //       );\n    //     }\n    //     message.frames = [];\n    //     for (let i = 0; i < object.frames.length; ++i) {\n    //       if (typeof object.frames[i] != \"object\") {\n    //         throw TypeError(\n    //           \".com.opensource.svga.SpriteEntity.frames: object expected\"\n    //         );\n    //       }\n    //       message.frames[i] = FrameEntity.fromObject(object.frames[i]);\n    //     }\n    //   }\n    //   if (object.matteKey != null) {\n    //     message.matteKey = \"\" + object.matteKey;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a SpriteEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {com.opensource.svga.SpriteEntity} message SpriteEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: SpriteEntity,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.arrays || options.defaults) {\n    //     object.frames = [];\n    //   }\n    //   if (options.defaults) {\n    //     object.imageKey = \"\";\n    //     object.matteKey = \"\";\n    //   }\n    //   if (message.imageKey != null && message.hasOwnProperty(\"imageKey\")) {\n    //     object.imageKey = message.imageKey;\n    //   }\n    //   if (message.frames && message.frames.length) {\n    //     object.frames = [];\n    //     for (let j = 0; j < message.frames.length; ++j) {\n    //       object.frames[j] = FrameEntity.toObject(message.frames[j], options);\n    //     }\n    //   }\n    //   if (message.matteKey != null && message.hasOwnProperty(\"matteKey\")) {\n    //     object.matteKey = message.matteKey;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for SpriteEntity\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.SpriteEntity\";\n    // }\n    /**\n     * SpriteEntity frames.\n     * @member {Array.<com.opensource.svga.IFrameEntity>} frames\n     * @memberof com.opensource.svga.SpriteEntity\n     * @instance\n     */\n    frames = [];\n    /**\n     * SpriteEntity imageKey.\n     * @member {string} imageKey\n     * @memberof com.opensource.svga.SpriteEntity\n     * @instance\n     */\n    imageKey = \"\";\n    /**\n     * SpriteEntity matteKey.\n     * @member {string} matteKey\n     * @memberof com.opensource.svga.SpriteEntity\n     * @instance\n     */\n    matteKey = \"\";\n    /**\n     * Constructs a new SpriteEntity.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a SpriteEntity.\n     * @implements ISpriteEntity\n     * @constructor\n     * @param {com.opensource.svga.ISpriteEntity=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.frames != null) {\n                this.frames = properties.frames;\n            }\n            if (properties.imageKey != null) {\n                this.imageKey = properties.imageKey;\n            }\n            if (properties.matteKey != null) {\n                this.matteKey = properties.matteKey;\n            }\n        }\n    }\n}\n\n// export class MovieParamsWriter {\n//   /**\n//    * Encodes the specified MovieParams message. Does not implicitly {@link com.opensource.svga.MovieParams.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.MovieParams\n//    * @static\n//    * @param {com.opensource.svga.IMovieParams} message MovieParams message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: MovieParams, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (\n//       message.viewBoxWidth != null &&\n//       Object.hasOwn(message, \"viewBoxWidth\")\n//     ) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.viewBoxWidth);\n//     }\n//     if (\n//       message.viewBoxHeight != null &&\n//       Object.hasOwn(message, \"viewBoxHeight\")\n//     ) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.viewBoxHeight);\n//     }\n//     if (message.fps != null && Object.hasOwn(message, \"fps\")) {\n//       writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.fps);\n//     }\n//     if (message.frames != null && Object.hasOwn(message, \"frames\")) {\n//       writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.frames);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified MovieParams message, length delimited. Does not implicitly {@link com.opensource.svga.MovieParams.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.MovieParams\n//    * @static\n//    * @param {com.opensource.svga.IMovieParams} message MovieParams message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: MovieParams, writer: Writer): Writer {\n//     return MovieParams.encode(message, writer).ldelim();\n//   }\n// }\nclass MovieParams {\n    /**\n     * Decodes a MovieParams message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.MovieParams} MovieParams\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        let end = length == undefined ? reader.len : reader.pos + length;\n        let message = new MovieParams();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.viewBoxWidth = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.viewBoxHeight = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.fps = reader.int32();\n                    break;\n                }\n                case 4: {\n                    message.frames = reader.int32();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a MovieParams message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.MovieParams} MovieParams\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): MovieParams {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a MovieParams message.\n     * @function verify\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (\n    //     message.viewBoxWidth != null &&\n    //     message.hasOwnProperty(\"viewBoxWidth\")\n    //   ) {\n    //     if (typeof message.viewBoxWidth != \"number\") {\n    //       return \"viewBoxWidth: number expected\";\n    //     }\n    //   }\n    //   if (\n    //     message.viewBoxHeight != null &&\n    //     message.hasOwnProperty(\"viewBoxHeight\")\n    //   ) {\n    //     if (typeof message.viewBoxHeight != \"number\") {\n    //       return \"viewBoxHeight: number expected\";\n    //     }\n    //   }\n    //   if (message.fps != null && message.hasOwnProperty(\"fps\")) {\n    //     if (!isInteger(message.fps)) {\n    //       return \"fps: integer expected\";\n    //     }\n    //   }\n    //   if (message.frames != null && message.hasOwnProperty(\"frames\")) {\n    //     if (!isInteger(message.frames)) {\n    //       return \"frames: integer expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a MovieParams message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.MovieParams} MovieParams\n     */\n    // static fromObject(object: Record<string, any>): MovieParams {\n    //   if (object instanceof MovieParams) {\n    //     return object;\n    //   }\n    //   const message = new MovieParams();\n    //   if (object.viewBoxWidth != null) {\n    //     message.viewBoxWidth = +object.viewBoxWidth;\n    //   }\n    //   if (object.viewBoxHeight != null) {\n    //     message.viewBoxHeight = +object.viewBoxHeight;\n    //   }\n    //   if (object.fps != null) {\n    //     message.fps = object.fps | 0;\n    //   }\n    //   if (object.frames != null) {\n    //     message.frames = object.frames | 0;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a MovieParams message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {com.opensource.svga.MovieParams} message MovieParams\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: MovieParams,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.viewBoxWidth = 0;\n    //     object.viewBoxHeight = 0;\n    //     object.fps = 0;\n    //     object.frames = 0;\n    //   }\n    //   if (\n    //     message.viewBoxWidth != null &&\n    //     message.hasOwnProperty(\"viewBoxWidth\")\n    //   ) {\n    //     object.viewBoxWidth =\n    //       options.json && !isFinite(message.viewBoxWidth)\n    //         ? \"\" + message.viewBoxWidth\n    //         : message.viewBoxWidth;\n    //   }\n    //   if (\n    //     message.viewBoxHeight != null &&\n    //     message.hasOwnProperty(\"viewBoxHeight\")\n    //   ) {\n    //     object.viewBoxHeight =\n    //       options.json && !isFinite(message.viewBoxHeight)\n    //         ? \"\" + message.viewBoxHeight\n    //         : message.viewBoxHeight;\n    //   }\n    //   if (message.fps != null && message.hasOwnProperty(\"fps\")) {\n    //     object.fps = message.fps;\n    //   }\n    //   if (message.frames != null && message.hasOwnProperty(\"frames\")) {\n    //     object.frames = message.frames;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for MovieParams\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.MovieParams\";\n    // }\n    /**\n     * MovieParams viewBoxWidth.\n     * @member {number} viewBoxWidth\n     * @memberof com.opensource.svga.MovieParams\n     * @instance\n     */\n    viewBoxWidth = 0;\n    /**\n     * MovieParams viewBoxHeight.\n     * @member {number} viewBoxHeight\n     * @memberof com.opensource.svga.MovieParams\n     * @instance\n     */\n    viewBoxHeight = 0;\n    /**\n     * MovieParams fps.\n     * @member {number} fps\n     * @memberof com.opensource.svga.MovieParams\n     * @instance\n     */\n    fps = 0;\n    /**\n     * MovieParams frames.\n     * @member {number} frames\n     * @memberof com.opensource.svga.MovieParams\n     * @instance\n     */\n    frames = 0;\n    /**\n     * Constructs a new MovieParams.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a MovieParams.\n     * @implements IMovieParams\n     * @constructor\n     * @param {com.opensource.svga.IMovieParams=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.viewBoxWidth != null) {\n                this.viewBoxWidth = properties.viewBoxWidth;\n            }\n            if (properties.viewBoxHeight != null) {\n                this.viewBoxHeight = properties.viewBoxHeight;\n            }\n            if (properties.fps != null) {\n                this.fps = properties.fps;\n            }\n            if (properties.frames != null) {\n                this.frames = properties.frames;\n            }\n        }\n    }\n}\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nconst emptyObject = Object.freeze({});\n\n// import base64 from \"@protobufjs/base64\";\nclass MovieEntity {\n    /**\n     * Decodes a MovieEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.MovieEntity} MovieEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new MovieEntity();\n        let key;\n        let value;\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.version = reader.string();\n                    break;\n                }\n                case 2: {\n                    message.params = MovieParams.decode(reader, reader.uint32());\n                    break;\n                }\n                case 3: {\n                    if (message.images == emptyObject) {\n                        message.images = {};\n                    }\n                    const end2 = reader.uint32() + reader.pos;\n                    key = \"\";\n                    value = [];\n                    while (reader.pos < end2) {\n                        let tag2 = reader.uint32();\n                        switch (tag2 >>> 3) {\n                            case 1:\n                                key = reader.string();\n                                break;\n                            case 2:\n                                value = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag2 & 7);\n                                break;\n                        }\n                    }\n                    message.images[key] = value;\n                    break;\n                }\n                case 4: {\n                    if (!(message.sprites && message.sprites.length)) {\n                        message.sprites = [];\n                    }\n                    message.sprites.push(SpriteEntity.decode(reader, reader.uint32()));\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a MovieEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.MovieEntity} MovieEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): MovieEntity {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a MovieEntity message.\n     * @function verify\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.version != null && message.hasOwnProperty(\"version\")) {\n    //     if (!isString(message.version)) {\n    //       return \"version: string expected\";\n    //     }\n    //   }\n    //   if (message.params != null && message.hasOwnProperty(\"params\")) {\n    //     const error = MovieParams.verify(message.params);\n    //     if (error) {\n    //       return \"params.\" + error;\n    //     }\n    //   }\n    //   if (message.images != null && message.hasOwnProperty(\"images\")) {\n    //     if (!isObject(message.images)) {\n    //       return \"images: object expected\";\n    //     }\n    //     const keys = Object.keys(message.images);\n    //     for (let i = 0; i < keys.length; ++i) {\n    //       const key = keys[i];\n    //       if (\n    //         !(\n    //           (message.images[key] &&\n    //             typeof message.images[key].length == \"number\") ||\n    //           isString(message.images[key])\n    //         )\n    //       ) {\n    //         return \"images: buffer{k:string} expected\";\n    //       }\n    //     }\n    //   }\n    //   if (message.sprites != null && message.hasOwnProperty(\"sprites\")) {\n    //     if (!Array.isArray(message.sprites)) {\n    //       return \"sprites: array expected\";\n    //     }\n    //     for (let i = 0; i < message.sprites.length; ++i) {\n    //       const error = SpriteEntity.verify(message.sprites[i]);\n    //       if (error) {\n    //         return \"sprites.\" + error;\n    //       }\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a MovieEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.MovieEntity} MovieEntity\n     */\n    // static fromObject(object: Record<string, any>): MovieEntity {\n    //   if (object instanceof MovieEntity) {\n    //     return object;\n    //   }\n    //   const message = new MovieEntity();\n    //   if (object.version != null) {\n    //     message.version = \"\" + object.version;\n    //   }\n    //   if (object.params != null) {\n    //     if (typeof object.params != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.MovieEntity.params: object expected\"\n    //       );\n    //     }\n    //     message.params = MovieParams.fromObject(object.params);\n    //   }\n    //   if (object.images) {\n    //     if (typeof object.images != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.MovieEntity.images: object expected\"\n    //       );\n    //     }\n    //     message.images = {};\n    //     const keys = Object.keys(object.images);\n    //     for (let i = 0; i < keys.length; ++i) {\n    //       const key = keys[i];\n    //       if (typeof object.images[key] == \"string\") {\n    //         base64.decode(\n    //           object.images[key],\n    //           (message.images[key] = new Uint8Array(\n    //             base64.length(object.images[key])\n    //           )),\n    //           0\n    //         );\n    //       } else if (object.images[key].length >= 0) {\n    //         message.images[key] = object.images[key];\n    //       }\n    //     }\n    //   }\n    //   if (object.sprites) {\n    //     if (!Array.isArray(object.sprites)) {\n    //       throw TypeError(\n    //         \".com.opensource.svga.MovieEntity.sprites: array expected\"\n    //       );\n    //     }\n    //     message.sprites = [];\n    //     for (let i = 0; i < object.sprites.length; ++i) {\n    //       if (typeof object.sprites[i] != \"object\") {\n    //         throw TypeError(\n    //           \".com.opensource.svga.MovieEntity.sprites: object expected\"\n    //         );\n    //       }\n    //       message.sprites[i] = SpriteEntity.fromObject(object.sprites[i]);\n    //     }\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a MovieEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {com.opensource.svga.MovieEntity} message MovieEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: MovieEntity,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.arrays || options.defaults) {\n    //     object.sprites = [];\n    //   }\n    //   if (options.objects || options.defaults) {\n    //     object.images = {};\n    //   }\n    //   if (options.defaults) {\n    //     object.version = \"\";\n    //     object.params = null;\n    //   }\n    //   if (message.version != null && message.hasOwnProperty(\"version\")) {\n    //     object.version = message.version;\n    //   }\n    //   if (message.params != null && message.hasOwnProperty(\"params\")) {\n    //     object.params = MovieParams.toObject(message.params, options);\n    //   }\n    //   let keys2;\n    //   if (message.images && (keys2 = Object.keys(message.images)).length) {\n    //     object.images = {};\n    //     for (let j = 0; j < keys2.length; ++j) {\n    //       const key = keys2[j];\n    //       object.images[key] =\n    //         options.bytes == String\n    //           ? base64.encode(message.images[key], 0, message.images[key].length)\n    //           : options.bytes == Array\n    //           ? [...message.images[key]]\n    //           : message.images[key];\n    //     }\n    //   }\n    //   if (message.sprites && message.sprites.length) {\n    //     object.sprites = [];\n    //     for (let j = 0; j < message.sprites.length; ++j) {\n    //       object.sprites[j] = SpriteEntity.toObject(message.sprites[j], options);\n    //     }\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for MovieEntity\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string) {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.MovieEntity\";\n    // }\n    /**\n     * MovieEntity version.\n     * @member {string} version\n     * @memberof com.opensource.svga.MovieEntity\n     * @instance\n     */\n    version = \"\";\n    /**\n     * MovieEntity params.\n     * @member {com.opensource.svga.IMovieParams|null|undefined} params\n     * @memberof com.opensource.svga.MovieEntity\n     * @instance\n     */\n    params = null;\n    /**\n     * MovieEntity images.\n     * @member {Object.<string,Uint8Array>} images\n     * @memberof com.opensource.svga.MovieEntity\n     * @instance\n     */\n    images = emptyObject;\n    /**\n     * MovieEntity sprites.\n     * @member {Array.<com.opensource.svga.ISpriteEntity>} sprites\n     * @memberof com.opensource.svga.MovieEntity\n     * @instance\n     */\n    sprites = [];\n    /**\n     * Constructs a new MovieEntity.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a MovieEntity.\n     * @implements IMovieEntity\n     * @constructor\n     * @param {com.opensource.svga.IMovieEntity=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.version != null) {\n                this.version = properties.version;\n            }\n            if (properties.images != null) {\n                this.images = properties.images;\n            }\n            if (properties.params != null) {\n                this.params = properties.params;\n            }\n            if (properties.sprites != null) {\n                this.sprites = properties.sprites;\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------\n// qrBitBuffer\n// ---------------------------------------------------------------------\nclass BitBuffer {\n    buffer = [];\n    lengthInBits = 0;\n    getAt(i) {\n        const bufIndex = ~~(i / 8);\n        return ((this.buffer[bufIndex] >>> (7 - (i % 8))) & 1) == 1;\n    }\n    put(num, length) {\n        for (let i = 0; i < length; i++) {\n            this.putBit(((num >>> (length - i - 1)) & 1) == 1);\n        }\n    }\n    putBit(bit) {\n        const { lengthInBits: len, buffer } = this;\n        const bufIndex = ~~(len / 8);\n        if (buffer.length <= bufIndex) {\n            buffer.push(0);\n        }\n        if (bit) {\n            buffer[bufIndex] |= 0x80 >>> len % 8;\n        }\n        this.lengthInBits += 1;\n    }\n}\n\n// ---------------------------------------------------------------------\n// QRMode\n// ---------------------------------------------------------------------\nconst QRMode = {\n    MODE_NUMBER: 1 << 0,\n    MODE_ALPHA_NUM: 1 << 1,\n    MODE_8BIT_BYTE: 1 << 2,\n    MODE_KANJI: 1 << 3,\n};\n// ---------------------------------------------------------------------\n// QRErrorCorrectLevel\n// ---------------------------------------------------------------------\nconst QRErrorCorrectLevel = {\n    L: 1,\n    M: 0,\n    Q: 3,\n    H: 2,\n};\n// ---------------------------------------------------------------------\n// QRMaskPattern\n// ---------------------------------------------------------------------\nconst QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7,\n};\n\n// ---------------------------------------------------------------------\n// qr8BitByte\n// ---------------------------------------------------------------------\nclass BitByte {\n    bytes;\n    constructor(data) {\n        let parsedData = [];\n        // Added to support UTF-8 Characters\n        for (let i = 0; i < data.length; i++) {\n            const byteArray = [];\n            const code = data.charCodeAt(i);\n            if (code > 0x10000) {\n                byteArray[0] = 0xf0 | ((code & 0x1c0000) >>> 18);\n                byteArray[1] = 0x80 | ((code & 0x3f000) >>> 12);\n                byteArray[2] = 0x80 | ((code & 0xfc0) >>> 6);\n                byteArray[3] = 0x80 | (code & 0x3f);\n            }\n            else if (code > 0x800) {\n                byteArray[0] = 0xe0 | ((code & 0xf000) >>> 12);\n                byteArray[1] = 0x80 | ((code & 0xfc0) >>> 6);\n                byteArray[2] = 0x80 | (code & 0x3f);\n            }\n            else if (code > 0x80) {\n                byteArray[0] = 0xc0 | ((code & 0x7c0) >>> 6);\n                byteArray[1] = 0x80 | (code & 0x3f);\n            }\n            else {\n                byteArray[0] = code;\n            }\n            // Fix Unicode corruption bug\n            parsedData.push(byteArray);\n        }\n        this.bytes = parsedData.flat(1);\n        const { bytes } = this;\n        if (bytes.length != data.length) {\n            bytes.unshift(191);\n            bytes.unshift(187);\n            bytes.unshift(239);\n        }\n    }\n    get mode() {\n        return QRMode.MODE_8BIT_BYTE;\n    }\n    get length() {\n        return this.bytes.length;\n    }\n    write(buff) {\n        const { bytes } = this;\n        for (let i = 0; i < bytes.length; i++) {\n            buff.put(bytes[i], 8);\n        }\n    }\n}\n\n// ---------------------------------------------------------------------\n// QRRSBlock\n// ---------------------------------------------------------------------\nconst RS_BLOCK_TABLE = [\n    [1, 26, 19],\n    [1, 26, 16],\n    [1, 26, 13],\n    [1, 26, 9],\n    [1, 44, 34],\n    [1, 44, 28],\n    [1, 44, 22],\n    [1, 44, 16],\n    [1, 70, 55],\n    [1, 70, 44],\n    [2, 35, 17],\n    [2, 35, 13],\n    [1, 100, 80],\n    [2, 50, 32],\n    [2, 50, 24],\n    [4, 25, 9],\n    [1, 134, 108],\n    [2, 67, 43],\n    [2, 33, 15, 2, 34, 16],\n    [2, 33, 11, 2, 34, 12],\n    [2, 86, 68],\n    [4, 43, 27],\n    [4, 43, 19],\n    [4, 43, 15],\n    [2, 98, 78],\n    [4, 49, 31],\n    [2, 32, 14, 4, 33, 15],\n    [4, 39, 13, 1, 40, 14],\n    [2, 121, 97],\n    [2, 60, 38, 2, 61, 39],\n    [4, 40, 18, 2, 41, 19],\n    [4, 40, 14, 2, 41, 15],\n    [2, 146, 116],\n    [3, 58, 36, 2, 59, 37],\n    [4, 36, 16, 4, 37, 17],\n    [4, 36, 12, 4, 37, 13],\n    [2, 86, 68, 2, 87, 69],\n    [4, 69, 43, 1, 70, 44],\n    [6, 43, 19, 2, 44, 20],\n    [6, 43, 15, 2, 44, 16],\n    [4, 101, 81],\n    [1, 80, 50, 4, 81, 51],\n    [4, 50, 22, 4, 51, 23],\n    [3, 36, 12, 8, 37, 13],\n    [2, 116, 92, 2, 117, 93],\n    [6, 58, 36, 2, 59, 37],\n    [4, 46, 20, 6, 47, 21],\n    [7, 42, 14, 4, 43, 15],\n    [4, 133, 107],\n    [8, 59, 37, 1, 60, 38],\n    [8, 44, 20, 4, 45, 21],\n    [12, 33, 11, 4, 34, 12],\n    [3, 145, 115, 1, 146, 116],\n    [4, 64, 40, 5, 65, 41],\n    [11, 36, 16, 5, 37, 17],\n    [11, 36, 12, 5, 37, 13],\n    [5, 109, 87, 1, 110, 88],\n    [5, 65, 41, 5, 66, 42],\n    [5, 54, 24, 7, 55, 25],\n    [11, 36, 12],\n    [5, 122, 98, 1, 123, 99],\n    [7, 73, 45, 3, 74, 46],\n    [15, 43, 19, 2, 44, 20],\n    [3, 45, 15, 13, 46, 16],\n    [1, 135, 107, 5, 136, 108],\n    [10, 74, 46, 1, 75, 47],\n    [1, 50, 22, 15, 51, 23],\n    [2, 42, 14, 17, 43, 15],\n    [5, 150, 120, 1, 151, 121],\n    [9, 69, 43, 4, 70, 44],\n    [17, 50, 22, 1, 51, 23],\n    [2, 42, 14, 19, 43, 15],\n    [3, 141, 113, 4, 142, 114],\n    [3, 70, 44, 11, 71, 45],\n    [17, 47, 21, 4, 48, 22],\n    [9, 39, 13, 16, 40, 14],\n    [3, 135, 107, 5, 136, 108],\n    [3, 67, 41, 13, 68, 42],\n    [15, 54, 24, 5, 55, 25],\n    [15, 43, 15, 10, 44, 16],\n    [4, 144, 116, 4, 145, 117],\n    [17, 68, 42],\n    [17, 50, 22, 6, 51, 23],\n    [19, 46, 16, 6, 47, 17],\n    [2, 139, 111, 7, 140, 112],\n    [17, 74, 46],\n    [7, 54, 24, 16, 55, 25],\n    [34, 37, 13],\n    [4, 151, 121, 5, 152, 122],\n    [4, 75, 47, 14, 76, 48],\n    [11, 54, 24, 14, 55, 25],\n    [16, 45, 15, 14, 46, 16],\n    [6, 147, 117, 4, 148, 118],\n    [6, 73, 45, 14, 74, 46],\n    [11, 54, 24, 16, 55, 25],\n    [30, 46, 16, 2, 47, 17],\n    [8, 132, 106, 4, 133, 107],\n    [8, 75, 47, 13, 76, 48],\n    [7, 54, 24, 22, 55, 25],\n    [22, 45, 15, 13, 46, 16],\n    [10, 142, 114, 2, 143, 115],\n    [19, 74, 46, 4, 75, 47],\n    [28, 50, 22, 6, 51, 23],\n    [33, 46, 16, 4, 47, 17],\n    [8, 152, 122, 4, 153, 123],\n    [22, 73, 45, 3, 74, 46],\n    [8, 53, 23, 26, 54, 24],\n    [12, 45, 15, 28, 46, 16],\n    [3, 147, 117, 10, 148, 118],\n    [3, 73, 45, 23, 74, 46],\n    [4, 54, 24, 31, 55, 25],\n    [11, 45, 15, 31, 46, 16],\n    [7, 146, 116, 7, 147, 117],\n    [21, 73, 45, 7, 74, 46],\n    [1, 53, 23, 37, 54, 24],\n    [19, 45, 15, 26, 46, 16],\n    [5, 145, 115, 10, 146, 116],\n    [19, 75, 47, 10, 76, 48],\n    [15, 54, 24, 25, 55, 25],\n    [23, 45, 15, 25, 46, 16],\n    [13, 145, 115, 3, 146, 116],\n    [2, 74, 46, 29, 75, 47],\n    [42, 54, 24, 1, 55, 25],\n    [23, 45, 15, 28, 46, 16],\n    [17, 145, 115],\n    [10, 74, 46, 23, 75, 47],\n    [10, 54, 24, 35, 55, 25],\n    [19, 45, 15, 35, 46, 16],\n    [17, 145, 115, 1, 146, 116],\n    [14, 74, 46, 21, 75, 47],\n    [29, 54, 24, 19, 55, 25],\n    [11, 45, 15, 46, 46, 16],\n    [13, 145, 115, 6, 146, 116],\n    [14, 74, 46, 23, 75, 47],\n    [44, 54, 24, 7, 55, 25],\n    [59, 46, 16, 1, 47, 17],\n    [12, 151, 121, 7, 152, 122],\n    [12, 75, 47, 26, 76, 48],\n    [39, 54, 24, 14, 55, 25],\n    [22, 45, 15, 41, 46, 16],\n    [6, 151, 121, 14, 152, 122],\n    [6, 75, 47, 34, 76, 48],\n    [46, 54, 24, 10, 55, 25],\n    [2, 45, 15, 64, 46, 16],\n    [17, 152, 122, 4, 153, 123],\n    [29, 74, 46, 14, 75, 47],\n    [49, 54, 24, 10, 55, 25],\n    [24, 45, 15, 46, 46, 16],\n    [4, 152, 122, 18, 153, 123],\n    [13, 74, 46, 32, 75, 47],\n    [48, 54, 24, 14, 55, 25],\n    [42, 45, 15, 32, 46, 16],\n    [20, 147, 117, 4, 148, 118],\n    [40, 75, 47, 7, 76, 48],\n    [43, 54, 24, 22, 55, 25],\n    [10, 45, 15, 67, 46, 16],\n    [19, 148, 118, 6, 149, 119],\n    [18, 75, 47, 31, 76, 48],\n    [34, 54, 24, 34, 55, 25],\n    [20, 45, 15, 61, 46, 16],\n];\nclass RSBlock {\n    getRSBlockTable(typeNumber, errorCorrectLevel) {\n        const { L, M, Q, H } = QRErrorCorrectLevel;\n        const pos = (typeNumber - 1) * 4;\n        switch (errorCorrectLevel) {\n            case L:\n                return RS_BLOCK_TABLE[pos + 0];\n            case M:\n                return RS_BLOCK_TABLE[pos + 1];\n            case Q:\n                return RS_BLOCK_TABLE[pos + 2];\n            case H:\n                return RS_BLOCK_TABLE[pos + 3];\n            default:\n                throw new Error(`bad rs block @ typeNumber:${typeNumber}/errorCorrectLevel: ${errorCorrectLevel}`);\n        }\n    }\n    getRSBlocks(typeNumber, errorCorrectLevel) {\n        const rsBlock = this.getRSBlockTable(typeNumber, errorCorrectLevel);\n        const length = rsBlock.length / 3;\n        const list = [];\n        for (let i = 0; i < length; i++) {\n            const count = rsBlock[i * 3];\n            const totalCount = rsBlock[i * 3 + 1];\n            const dataCount = rsBlock[i * 3 + 2];\n            for (let j = 0; j < count; j++) {\n                list.push({ totalCount, dataCount });\n            }\n        }\n        return list;\n    }\n}\n\n// ---------------------------------------------------------------------\n// base64DecodeInputStream\n// ---------------------------------------------------------------------\nclass Base64DecodeInputStream {\n    data;\n    pos = 0;\n    buffer = 0;\n    buflen = 0;\n    constructor(data) {\n        this.data = data;\n    }\n    decode(c) {\n        if (c >= 0x41 && c <= 0x5a) {\n            return c - 0x41;\n        }\n        if (c >= 0x61 && c <= 0x7a) {\n            return c - 0x61 + 26;\n        }\n        if (c >= 0x30 && c <= 0x39) {\n            return c - 0x30 + 52;\n        }\n        if (c == 0x2b) {\n            return 62;\n        }\n        if (c == 0x2f) {\n            return 63;\n        }\n        throw new Error(`c: ${c}`);\n    }\n    read() {\n        while (this.buflen < 8) {\n            if (this.pos >= this.data.length) {\n                if (this.buflen == 0) {\n                    return -1;\n                }\n                throw new Error(`unexpected end of file./${this.buflen}`);\n            }\n            const c = this.data.charAt(this.pos);\n            this.pos++;\n            if (c == '=') {\n                this.buflen = 0;\n                return -1;\n            }\n            else if (c.match(/^\\s$/)) {\n                // ignore if whitespace.\n                continue;\n            }\n            this.buffer = (this.buffer << 6) | this.decode(c.charCodeAt(0));\n            this.buflen += 6;\n        }\n        this.buflen -= 8;\n        const n = (this.buffer >>> this.buflen) & 0xff;\n        return n;\n    }\n}\n\n// ---------------------------------------------------------------------\n// QRMath\n// ---------------------------------------------------------------------\nconst EXP_TABLE = new Array(256);\nconst LOG_TABLE = new Array(256);\n// initialize tables\nfor (let i = 0; i < 8; i++) {\n    EXP_TABLE[i] = 1 << i;\n}\nfor (let i = 8; i < 256; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\n}\nfor (let i = 0; i < 255; i++) {\n    LOG_TABLE[EXP_TABLE[i]] = i;\n}\nconst QRMath = {\n    glog(n) {\n        if (n < 1) {\n            throw new Error(`glog(${n})`);\n        }\n        return LOG_TABLE[n];\n    },\n    gexp(n) {\n        if (n < 0) {\n            n = 255 + (n % 255);\n        }\n        else if (n > 255) {\n            n %= 255;\n        }\n        return EXP_TABLE[n];\n    }\n};\n\n// ---------------------------------------------------------------------\n// Polynomial\n// ---------------------------------------------------------------------\nclass Polynomial {\n    num;\n    constructor(num, shift) {\n        const { length } = num;\n        if (typeof length == 'undefined') {\n            throw new Error(`${length}/${shift}`);\n        }\n        let offset = 0;\n        while (offset < length && num[offset] == 0) {\n            offset++;\n        }\n        const len = length - offset;\n        this.num = new Array(len + shift);\n        for (let i = 0; i < len; i++) {\n            this.num[i] = num[i + offset];\n        }\n    }\n    get length() {\n        return this.num.length;\n    }\n    getAt(i) {\n        return this.num[i];\n    }\n    multiply(e) {\n        const { glog, gexp } = QRMath;\n        const num = [];\n        for (let i = 0; i < this.length; i++) {\n            for (let j = 0; j < e.length; j++) {\n                num[i + j] ^= gexp(glog(this.getAt(i)) + glog(e.getAt(j)));\n            }\n        }\n        return new Polynomial(num, 0);\n    }\n    mod(e) {\n        if (this.length - e.length < 0) {\n            return this;\n        }\n        const { glog, gexp } = QRMath;\n        const ratio = glog(this.getAt(0)) - glog(e.getAt(0));\n        const num = [];\n        for (var i = 0; i < this.length; i++) {\n            const n = this.getAt(i);\n            num[i] = i < e.length ? n ^ gexp(glog(e.getAt(i)) + ratio) : n;\n        }\n        // recursive call\n        return new Polynomial(num, 0).mod(e);\n    }\n}\n\nconst PATTERN_POSITION_TABLE = [\n    [],\n    [6, 18],\n    [6, 22],\n    [6, 26],\n    [6, 30],\n    [6, 34],\n    [6, 22, 38],\n    [6, 24, 42],\n    [6, 26, 46],\n    [6, 28, 50],\n    [6, 30, 54],\n    [6, 32, 58],\n    [6, 34, 62],\n    [6, 26, 46, 66],\n    [6, 26, 48, 70],\n    [6, 26, 50, 74],\n    [6, 30, 54, 78],\n    [6, 30, 56, 82],\n    [6, 30, 58, 86],\n    [6, 34, 62, 90],\n    [6, 28, 50, 72, 94],\n    [6, 26, 50, 74, 98],\n    [6, 30, 54, 78, 102],\n    [6, 28, 54, 80, 106],\n    [6, 32, 58, 84, 110],\n    [6, 30, 58, 86, 114],\n    [6, 34, 62, 90, 118],\n    [6, 26, 50, 74, 98, 122],\n    [6, 30, 54, 78, 102, 126],\n    [6, 26, 52, 78, 104, 130],\n    [6, 30, 56, 82, 108, 134],\n    [6, 34, 60, 86, 112, 138],\n    [6, 30, 58, 86, 114, 142],\n    [6, 34, 62, 90, 118, 146],\n    [6, 30, 54, 78, 102, 126, 150],\n    [6, 24, 50, 76, 102, 128, 154],\n    [6, 28, 54, 80, 106, 132, 158],\n    [6, 32, 58, 84, 110, 136, 162],\n    [6, 26, 54, 82, 110, 138, 166],\n    [6, 30, 58, 86, 114, 142, 170],\n];\nconst G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\nconst G18 = (1 << 12) |\n    (1 << 11) |\n    (1 << 10) |\n    (1 << 9) |\n    (1 << 8) |\n    (1 << 5) |\n    (1 << 2) |\n    (1 << 0);\nconst G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\nconst genBCHDigit = (data) => data == 0 ? 0 : Math.log2(data);\nconst BCH_G15 = genBCHDigit(G15);\nconst BCH_G18 = genBCHDigit(G18);\n// ---------------------------------------------------------------------\n// QRUtil\n// ---------------------------------------------------------------------\nconst Util = {\n    getBCHTypeInfo(data) {\n        let d = data << 10;\n        while (genBCHDigit(d) - BCH_G15 >= 0) {\n            d ^= G15 << (genBCHDigit(d) - BCH_G15);\n        }\n        return ((data << 10) | d) ^ G15_MASK;\n    },\n    getBCHTypeNumber(data) {\n        let d = data << 12;\n        while (genBCHDigit(d) - BCH_G18 >= 0) {\n            d ^= G18 << (genBCHDigit(d) - BCH_G18);\n        }\n        return (data << 12) | d;\n    },\n    getPatternPosition(typeNumber) {\n        return PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n    getMaskFunction(maskPattern) {\n        const { PATTERN000, PATTERN001, PATTERN010, PATTERN011, PATTERN100, PATTERN101, PATTERN110, PATTERN111, } = QRMaskPattern;\n        switch (maskPattern) {\n            case PATTERN000:\n                return (i, j) => (i + j) % 2 == 0;\n            case PATTERN001:\n                return (i) => i % 2 == 0;\n            case PATTERN010:\n                return (_i, j) => j % 3 == 0;\n            case PATTERN011:\n                return (i, j) => (i + j) % 3 == 0;\n            case PATTERN100:\n                return (i, j) => (~~(i / 2) + ~~(j / 3)) % 2 == 0;\n            case PATTERN101:\n                return (i, j) => ((i * j) % 2) + ((i * j) % 3) == 0;\n            case PATTERN110:\n                return (i, j) => (((i * j) % 2) + ((i * j) % 3)) % 2 == 0;\n            case PATTERN111:\n                return (i, j) => (((i * j) % 3) + ((i + j) % 2)) % 2 == 0;\n            default:\n                throw new Error(`bad maskPattern: ${maskPattern}`);\n        }\n    },\n    getErrorCorrectPolynomial(errorCorrectLength) {\n        let a = new Polynomial([1], 0);\n        for (let i = 0; i < errorCorrectLength; i++) {\n            a = a.multiply(new Polynomial([1, QRMath.gexp(i)], 0));\n        }\n        return a;\n    },\n    getLengthInBits(mode, type) {\n        const { MODE_NUMBER, MODE_ALPHA_NUM, MODE_8BIT_BYTE, MODE_KANJI } = QRMode;\n        if (type < 1 || type > 40) {\n            throw new Error(`type: ${type}`);\n        }\n        if (type >= 1 && type < 10) {\n            // 1 - 9\n            switch (mode) {\n                case MODE_NUMBER:\n                    return 10;\n                case MODE_ALPHA_NUM:\n                    return 9;\n                case MODE_8BIT_BYTE:\n                    return 8;\n                case MODE_KANJI:\n                    return 8;\n            }\n        }\n        if (type < 27) {\n            // 10 - 26\n            switch (mode) {\n                case MODE_NUMBER:\n                    return 12;\n                case MODE_ALPHA_NUM:\n                    return 11;\n                case MODE_8BIT_BYTE:\n                    return 16;\n                case MODE_KANJI:\n                    return 10;\n            }\n        }\n        if (type <= 40) {\n            // 27 - 40\n            switch (mode) {\n                case MODE_NUMBER:\n                    return 14;\n                case MODE_ALPHA_NUM:\n                    return 13;\n                case MODE_8BIT_BYTE:\n                    return 16;\n                case MODE_KANJI:\n                    return 12;\n            }\n        }\n        throw new Error(`mode: ${mode}`);\n    },\n    getLostPoint(qr) {\n        const moduleCount = qr.getModuleCount();\n        let lostPoint = 0;\n        // LEVEL1\n        for (let row = 0; row < moduleCount; row++) {\n            for (let col = 0; col < moduleCount; col++) {\n                const dark = qr.isDark(row, col);\n                let sameCount = 0;\n                for (let r = -1; r <= 1; r++) {\n                    const nRow = row + r;\n                    if (nRow < 0 || moduleCount <= nRow)\n                        continue;\n                    for (let c = -1; c <= 1; c++) {\n                        const nCol = col + c;\n                        if (nCol < 0 || moduleCount <= nCol)\n                            continue;\n                        if (r == 0 && c == 0)\n                            continue;\n                        if (dark == qr.isDark(nRow, nCol)) {\n                            sameCount++;\n                        }\n                    }\n                }\n                if (sameCount > 5) {\n                    lostPoint += sameCount + 3 - 5;\n                }\n            }\n        }\n        // LEVEL2\n        for (let row = 0; row < moduleCount - 1; row++) {\n            for (let col = 0; col < moduleCount - 1; col++) {\n                let count = 0;\n                if (qr.isDark(row, col))\n                    count++;\n                if (qr.isDark(row + 1, col))\n                    count++;\n                if (qr.isDark(row, col + 1))\n                    count++;\n                if (qr.isDark(row + 1, col + 1))\n                    count++;\n                if (count == 0 || count == 4) {\n                    lostPoint += 3;\n                }\n            }\n        }\n        // LEVEL3\n        for (let row = 0; row < moduleCount; row++) {\n            for (let col = 0; col < moduleCount - 6; col++) {\n                if (qr.isDark(row, col) &&\n                    !qr.isDark(row, col + 1) &&\n                    qr.isDark(row, col + 2) &&\n                    qr.isDark(row, col + 3) &&\n                    qr.isDark(row, col + 4) &&\n                    !qr.isDark(row, col + 5) &&\n                    qr.isDark(row, col + 6)) {\n                    lostPoint += 40;\n                }\n            }\n        }\n        for (let col = 0; col < moduleCount; col++) {\n            for (let row = 0; row < moduleCount - 6; row++) {\n                if (qr.isDark(row, col) &&\n                    !qr.isDark(row + 1, col) &&\n                    qr.isDark(row + 2, col) &&\n                    qr.isDark(row + 3, col) &&\n                    qr.isDark(row + 4, col) &&\n                    !qr.isDark(row + 5, col) &&\n                    qr.isDark(row + 6, col)) {\n                    lostPoint += 40;\n                }\n            }\n        }\n        // LEVEL4\n        let darkCount = 0;\n        for (let col = 0; col < moduleCount; col++) {\n            for (let row = 0; row < moduleCount; row++) {\n                if (qr.isDark(row, col)) {\n                    darkCount++;\n                }\n            }\n        }\n        const ratio = Math.abs((100 * darkCount) / Math.pow(moduleCount, 2) - 50) / 5;\n        return lostPoint + ratio * 10;\n    },\n};\n\n// ---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2025 LiHZSky\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n// http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//\n// ---------------------------------------------------------------------\nconst PAD0 = 0xec;\nconst PAD1 = 0x11;\n/**\n * QRCode实现\n * https://www.cnblogs.com/leestar54/p/15782929.html\n * @param typeNumber 1 to 40\n * @param errorCorrectLevel 'L','M','Q','H'\n */\nclass QRCode {\n    typeNumber;\n    // ---------------------------------------------------------------------\n    // QRCode.stringToBytes\n    // ---------------------------------------------------------------------\n    static stringToBytes(s) {\n        const bytes = [];\n        for (let i = 0; i < s.length; i++) {\n            bytes.push(s.charCodeAt(i) & 0xff);\n        }\n        return bytes;\n    }\n    // ---------------------------------------------------------------------\n    // qrcode.createStringToBytes\n    // ---------------------------------------------------------------------\n    /**\n     * @param unicodeData base64 string of byte array.\n     * [16bit Unicode],[16bit Bytes], ...\n     * @param numChars\n     */\n    static createStringToBytes(unicodeData, numChars) {\n        // create conversion map.\n        const unicodeMap = (() => {\n            const bin = new Base64DecodeInputStream(unicodeData);\n            const read = () => {\n                const b = bin.read();\n                if (b == -1)\n                    throw new Error(\"character defect!\");\n                return b;\n            };\n            const unicodeMap = {};\n            let count = 0;\n            while (true) {\n                const b0 = bin.read();\n                if (b0 == -1)\n                    break;\n                const b1 = read();\n                const b2 = read();\n                const b3 = read();\n                const k = String.fromCharCode((b0 << 8) | b1);\n                const v = (b2 << 8) | b3;\n                unicodeMap[k] = v;\n                count += 1;\n            }\n            if (count != numChars) {\n                throw new Error(`${count} != ${numChars}`);\n            }\n            return unicodeMap;\n        })();\n        const unknownChar = \"?\".charCodeAt(0);\n        return (s) => {\n            const bytes = [];\n            for (let i = 0; i < s.length; i++) {\n                const c = s.charCodeAt(i);\n                if (c < 128) {\n                    bytes.push(c);\n                }\n                else {\n                    const b = unicodeMap[s.charAt(i)];\n                    if (typeof b == \"number\") {\n                        if ((b & 0xff) == b) {\n                            // 1byte\n                            bytes.push(b);\n                        }\n                        else {\n                            // 2bytes\n                            bytes.push(b >>> 8);\n                            bytes.push(b & 0xff);\n                        }\n                    }\n                    else {\n                        bytes.push(unknownChar);\n                    }\n                }\n            }\n            return bytes;\n        };\n    }\n    errorCorrectLevel;\n    modules = [];\n    moduleCount = 0;\n    dataCache = null;\n    dataList = [];\n    constructor(typeNumber, errorCorrectLevel) {\n        this.typeNumber = typeNumber;\n        this.errorCorrectLevel = QRErrorCorrectLevel[errorCorrectLevel];\n    }\n    makeImpl(test, maskPattern) {\n        this.moduleCount = this.typeNumber * 4 + 17;\n        this.modules = ((moduleCount) => {\n            const modules = [];\n            // 预设一个 moduleCount * moduleCount 的空白矩阵\n            for (let row = 0; row < moduleCount; row++) {\n                modules[row] = [];\n                for (let col = 0; col < moduleCount; col++) {\n                    modules[row][col] = null;\n                }\n            }\n            return modules;\n        })(this.moduleCount);\n        const count = this.moduleCount - 7;\n        this.setupPositionProbePattern(0, 0);\n        this.setupPositionProbePattern(count, 0);\n        this.setupPositionProbePattern(0, count);\n        this.setupPositionAdjustPattern();\n        this.setupTimingPattern();\n        this.setupTypeInfo(test, maskPattern);\n        if (this.typeNumber >= 7) {\n            this.setupTypeNumber(test);\n        }\n        if (this.dataCache == null) {\n            this.dataCache = this.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n        }\n        this.mapData(this.dataCache, maskPattern);\n    }\n    setupPositionProbePattern(row, col) {\n        const { modules, moduleCount } = this;\n        for (let r = -1; r <= 7; r++) {\n            const nr = row + r;\n            if (nr <= -1 || moduleCount <= nr)\n                continue;\n            for (let c = -1; c <= 7; c++) {\n                const nc = col + c;\n                if (nc <= -1 || moduleCount <= nc)\n                    continue;\n                modules[nr][nc] =\n                    (r >= 0 && r <= 6 && (c == 0 || c == 6)) ||\n                        (c >= 0 && c <= 6 && (r == 0 || r == 6)) ||\n                        (r >= 2 && r <= 4 && c >= 2 && c <= 4);\n            }\n        }\n    }\n    setupPositionAdjustPattern() {\n        const { typeNumber, modules } = this;\n        const pos = Util.getPatternPosition(typeNumber);\n        const { length } = pos;\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < length; j++) {\n                const row = pos[i];\n                const col = pos[j];\n                if (modules[row][col] != null)\n                    continue;\n                for (let r = -2; r <= 2; r++) {\n                    for (let c = -2; c <= 2; c++) {\n                        modules[row + r][col + c] =\n                            r == -2 || r == 2 || c == -2 || c == 2 || (r == 0 && c == 0);\n                    }\n                }\n            }\n        }\n    }\n    setupTimingPattern() {\n        const { moduleCount, modules } = this;\n        const count = moduleCount - 8;\n        for (let r = 8; r < count; r++) {\n            if (modules[r][6] != null)\n                continue;\n            modules[r][6] = r % 2 == 0;\n        }\n        for (let c = 8; c < count; c++) {\n            if (modules[6][c] != null)\n                continue;\n            modules[6][c] = c % 2 == 0;\n        }\n    }\n    setupTypeInfo(test, maskPattern) {\n        const { errorCorrectLevel, modules, moduleCount } = this;\n        const data = (errorCorrectLevel << 3) | maskPattern;\n        const bits = Util.getBCHTypeInfo(data);\n        // vertical\n        for (let i = 0; i < 15; i++) {\n            const mod = !test && ((bits >> i) & 1) == 1;\n            if (i < 6) {\n                modules[i][8] = mod;\n            }\n            else if (i < 8) {\n                modules[i + 1][8] = mod;\n            }\n            else {\n                modules[moduleCount - 15 + i][8] = mod;\n            }\n        }\n        // horizontal\n        for (let i = 0; i < 15; i++) {\n            const mod = !test && ((bits >> i) & 1) == 1;\n            if (i < 8) {\n                modules[8][moduleCount - i - 1] = mod;\n            }\n            else if (i < 9) {\n                modules[8][15 - i] = mod;\n            }\n            else {\n                modules[8][15 - i - 1] = mod;\n            }\n        }\n        // fixed module\n        modules[moduleCount - 8][8] = !test;\n    }\n    getBestMaskPattern() {\n        let minLostPoint = 0;\n        let pattern = 0;\n        for (let i = 0; i < 8; i++) {\n            this.makeImpl(true, i);\n            const lostPoint = Util.getLostPoint(this);\n            if (i == 0 || minLostPoint > lostPoint) {\n                minLostPoint = lostPoint;\n                pattern = i;\n            }\n        }\n        return pattern;\n    }\n    setupTypeNumber(test) {\n        const { typeNumber, modules, moduleCount } = this;\n        const bits = Util.getBCHTypeNumber(typeNumber);\n        for (let i = 0; i < 18; i++) {\n            const mod = !test && ((bits >> i) & 1) == 1;\n            modules[~~(i / 3)][(i % 3) + moduleCount - 8 - 3] = mod;\n            modules[(i % 3) + moduleCount - 8 - 3][~~(i / 3)] = mod;\n        }\n    }\n    createData(typeNumber, errorCorrectLevel, dataList) {\n        const rsBlocks = new RSBlock().getRSBlocks(typeNumber, errorCorrectLevel);\n        const buffer = new BitBuffer();\n        for (let i = 0; i < dataList.length; i++) {\n            const data = dataList[i];\n            buffer.put(data.mode, 4);\n            buffer.put(data.length, Util.getLengthInBits(data.mode, typeNumber));\n            data.write(buffer);\n        }\n        // calc num max data.\n        let totalDataCount = 0;\n        for (let i = 0; i < rsBlocks.length; i++) {\n            totalDataCount += rsBlocks[i].dataCount;\n        }\n        const totalCount = totalDataCount * 8;\n        if (buffer.lengthInBits > totalCount) {\n            throw new Error(`code length overflow. (${buffer.lengthInBits} > ${totalCount})`);\n        }\n        // end code\n        if (buffer.lengthInBits + 4 <= totalCount) {\n            buffer.put(0, 4);\n        }\n        // padding\n        while (buffer.lengthInBits % 8 != 0) {\n            buffer.putBit(false);\n        }\n        // padding\n        while (true) {\n            if (buffer.lengthInBits >= totalCount) {\n                break;\n            }\n            buffer.put(PAD0, 8);\n            if (buffer.lengthInBits >= totalCount) {\n                break;\n            }\n            buffer.put(PAD1, 8);\n        }\n        return this.createBytes(buffer, rsBlocks);\n    }\n    mapData(data, maskPattern) {\n        const { modules, moduleCount } = this;\n        const maskFunc = Util.getMaskFunction(maskPattern);\n        let inc = -1;\n        let row = moduleCount - 1;\n        let bitIndex = 7;\n        let byteIndex = 0;\n        for (let col = row; col > 0; col -= 2) {\n            if (col == 6)\n                col -= 1;\n            while (true) {\n                for (let c = 0; c < 2; c++) {\n                    if (modules[row][col - c] == null) {\n                        let dark = false;\n                        if (byteIndex < data.length) {\n                            dark = ((data[byteIndex] >>> bitIndex) & 1) == 1;\n                        }\n                        if (maskFunc(row, col - c)) {\n                            dark = !dark;\n                        }\n                        modules[row][col - c] = dark;\n                        bitIndex--;\n                        if (bitIndex == -1) {\n                            byteIndex++;\n                            bitIndex = 7;\n                        }\n                    }\n                }\n                row += inc;\n                if (row < 0 || moduleCount <= row) {\n                    row -= inc;\n                    inc = -inc;\n                    break;\n                }\n            }\n        }\n    }\n    createBytes(bitBuffer, rsBlocks) {\n        const dcdata = [];\n        const ecdata = [];\n        let offset = 0;\n        let maxDcCount = 0;\n        let maxEcCount = 0;\n        for (let r = 0; r < rsBlocks.length; r++) {\n            const dcCount = rsBlocks[r].dataCount;\n            const ecCount = rsBlocks[r].totalCount - dcCount;\n            maxDcCount = Math.max(maxDcCount, dcCount);\n            maxEcCount = Math.max(maxEcCount, ecCount);\n            dcdata[r] = [];\n            for (let i = 0; i < dcCount; i++) {\n                dcdata[r][i] = 0xff & bitBuffer.buffer[i + offset];\n            }\n            offset += dcCount;\n            const rsPoly = Util.getErrorCorrectPolynomial(ecCount);\n            const rawPoly = new Polynomial(dcdata[r], rsPoly.length - 1);\n            const modPoly = rawPoly.mod(rsPoly);\n            ecdata[r] = new Array(rsPoly.length - 1);\n            for (let i = 0; i < ecdata[r].length; i++) {\n                const modIndex = i + modPoly.length - ecdata[r].length;\n                ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n            }\n        }\n        let totalCodeCount = 0;\n        for (let i = 0; i < rsBlocks.length; i++) {\n            totalCodeCount += rsBlocks[i].totalCount;\n        }\n        const data = new Array(totalCodeCount);\n        let index = 0;\n        for (let i = 0; i < maxDcCount; i++) {\n            for (let r = 0; r < rsBlocks.length; r++) {\n                if (i < dcdata[r].length) {\n                    data[index++] = dcdata[r][i];\n                }\n            }\n        }\n        for (let i = 0; i < maxEcCount; i++) {\n            for (let r = 0; r < rsBlocks.length; r++) {\n                if (i < ecdata[r].length) {\n                    data[index++] = ecdata[r][i];\n                }\n            }\n        }\n        return data;\n    }\n    isDark(row, col) {\n        const { moduleCount } = this;\n        if (row < 0 || moduleCount <= row || col < 0 || moduleCount <= col) {\n            throw new Error(`${row}, ${col}`);\n        }\n        return this.modules[row][col];\n    }\n    addData(data) {\n        this.dataList.push(new BitByte(data));\n        this.dataCache = null;\n    }\n    getModuleCount() {\n        return this.moduleCount;\n    }\n    make() {\n        this.makeImpl(false, this.getBestMaskPattern());\n    }\n}\n\nclass BitOutputStream {\n    out;\n    bit = 0;\n    bitlen = 0;\n    constructor(out) {\n        this.out = out;\n    }\n    write(data, length) {\n        if (data >>> length != 0) {\n            throw new Error('length over');\n        }\n        while (this.bitlen + length >= 8) {\n            this.out.writeByte(0xff & ((data << this.bitlen) | this.bit));\n            length -= 8 - this.bitlen;\n            data >>>= 8 - this.bitlen;\n            this.bit = this.bitlen = 0;\n        }\n        this.bit = (data << this.bitlen) | this.bit;\n        this.bitlen += length;\n    }\n    flush() {\n        if (this.bitlen > 0) {\n            this.out.writeByte(this.bit);\n        }\n    }\n}\n\n// ---------------------------------------------------------------------\n// byteArrayOutputStream\n// ---------------------------------------------------------------------\nclass ByteArrayOutputStream {\n    bytes = [];\n    writeByte(byte) {\n        this.bytes.push(byte & 0xff);\n    }\n    writeBytes(bytes, offset, length) {\n        const off = offset || 0;\n        const len = length || bytes.length;\n        for (let i = 0; i < len; i++) {\n            this.writeByte(bytes[i + off]);\n        }\n    }\n    writeShort(i) {\n        this.writeByte(i);\n        this.writeByte(i >>> 8);\n    }\n    writeString(s) {\n        for (let i = 0; i < s.length; i++) {\n            this.writeByte(s.charCodeAt(i));\n        }\n    }\n    toByteArray() {\n        return this.bytes;\n    }\n    toString() {\n        return `[${this.bytes.join(',')}]`;\n    }\n}\n\n// ---------------------------------------------------------------------\n// LZWTable\n// ---------------------------------------------------------------------\nclass LZWTable {\n    map = {};\n    mapSize = 0;\n    get size() {\n        return this.mapSize;\n    }\n    add(key) {\n        if (this.contains(key)) {\n            throw new Error(`dup key: ${key}`);\n        }\n        this.map[key] = this.mapSize;\n        this.mapSize++;\n    }\n    indexOf(key) {\n        return this.map[key] ?? -1;\n    }\n    contains(key) {\n        return this.map[key] != undefined;\n    }\n}\n\n// ---------------------------------------------------------------------\n// base64EncodeOutputStream\n// ---------------------------------------------------------------------\nclass Base64EncodeOutputStream {\n    buffer = 0;\n    buflen = 0;\n    length = 0;\n    base64 = '';\n    encode(n) {\n        if (n < 26) {\n            return 0x41 + n;\n        }\n        if (n < 52) {\n            return 0x61 + (n - 26);\n        }\n        if (n < 62) {\n            return 0x30 + (n - 52);\n        }\n        if (n == 62) {\n            return 0x2b;\n        }\n        if (n == 63) {\n            return 0x2f;\n        }\n        throw new Error(`n: ${n}`);\n    }\n    writeEncoded(b) {\n        this.base64 += String.fromCharCode(this.encode(b & 0x3f));\n    }\n    writeByte(n) {\n        this.buffer = (this.buffer << 8) | (n & 0xff);\n        this.buflen += 8;\n        this.length += 1;\n        while (this.buflen >= 6) {\n            this.buflen -= 6;\n            this.writeEncoded(this.buffer >>> this.buflen);\n        }\n    }\n    flush() {\n        const { buffer, buflen, length } = this;\n        if (buflen > 0) {\n            this.writeEncoded(buffer << (6 - buflen));\n            this.buffer = 0;\n            this.buflen = 0;\n        }\n        if (length % 3 != 0) {\n            // padding\n            const padlen = 3 - (length % 3);\n            for (let i = 0; i < padlen; i++) {\n                this.base64 += '=';\n            }\n        }\n    }\n    toString() {\n        return this.base64;\n    }\n}\n\n// ---------------------------------------------------------------------\n// gifImage (B/W)\n// ---------------------------------------------------------------------\nclass GifImage {\n    width;\n    height;\n    data = [];\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    getLZWRaster(lzwMinCodeSize) {\n        const { data } = this;\n        const clearCode = 1 << lzwMinCodeSize;\n        const endCode = clearCode + 1;\n        let bitLength = lzwMinCodeSize + 1;\n        // Setup LZWTable\n        const table = new LZWTable();\n        const fromCharCode = (i) => String.fromCharCode(i);\n        for (let i = 0; i < clearCode; i += 1) {\n            table.add(fromCharCode(i));\n        }\n        table.add(fromCharCode(clearCode));\n        table.add(fromCharCode(endCode));\n        const byteOut = new ByteArrayOutputStream();\n        const bitOut = new BitOutputStream(byteOut);\n        // clear code\n        bitOut.write(clearCode, bitLength);\n        let dataIndex = 0;\n        let s = fromCharCode(data[dataIndex++]);\n        while (dataIndex < data.length) {\n            const c = fromCharCode(data[dataIndex++]);\n            if (table.contains(s + c)) {\n                s += c;\n            }\n            else {\n                bitOut.write(table.indexOf(s), bitLength);\n                if (table.size < 0xfff) {\n                    if (table.size == 1 << bitLength) {\n                        bitLength++;\n                    }\n                    table.add(s + c);\n                }\n                s = c;\n            }\n        }\n        bitOut.write(table.indexOf(s), bitLength);\n        // end code\n        bitOut.write(endCode, bitLength);\n        bitOut.flush();\n        return byteOut.toByteArray();\n    }\n    setPixel(x, y, pixel) {\n        this.data[y * this.width + x] = pixel;\n    }\n    write(out, blackColor = \"#000000\", whiteColor = \"#ffffff\") {\n        const { width, height } = this;\n        // ---------------------------------\n        // GIF Signature\n        out.writeString(\"GIF87a\");\n        // ---------------------------------\n        // Screen Descriptor\n        out.writeShort(width);\n        out.writeShort(height);\n        out.writeByte(0x80); // 2bit\n        out.writeByte(0);\n        out.writeByte(0);\n        // ---------------------------------\n        // Global Color Map\n        const black = blackColor.split(\"\");\n        // black\n        out.writeByte(parseInt(`${black[1]}${black[2]}`, 16));\n        out.writeByte(parseInt(`${black[3]}${black[4]}`, 16));\n        out.writeByte(parseInt(`${black[5]}${black[6]}`, 16));\n        const white = whiteColor.split(\"\");\n        // white\n        out.writeByte(parseInt(`${white[1]}${white[2]}`, 16));\n        out.writeByte(parseInt(`${white[3]}${white[4]}`, 16));\n        out.writeByte(parseInt(`${white[5]}${white[6]}`, 16));\n        // ---------------------------------\n        // Image Descriptor\n        out.writeString(\",\");\n        out.writeShort(0);\n        out.writeShort(0);\n        out.writeShort(width);\n        out.writeShort(height);\n        out.writeByte(0);\n        // ---------------------------------\n        // Local Color Map\n        // ---------------------------------\n        // Raster Data\n        const lzwMinCodeSize = 2;\n        const raster = this.getLZWRaster(lzwMinCodeSize);\n        out.writeByte(lzwMinCodeSize);\n        let offset = 0;\n        while (raster.length - offset > 255) {\n            out.writeByte(255);\n            out.writeBytes(raster, offset, 255);\n            offset += 255;\n        }\n        const byte = raster.length - offset;\n        out.writeByte(byte);\n        out.writeBytes(raster, offset, byte);\n        out.writeByte(0);\n        // ---------------------------------\n        // GIF Terminator\n        out.writeString(\";\");\n    }\n}\nfunction createGifTag(width, height, getPixel, black, white) {\n    const gif = new GifImage(width, height);\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            gif.setPixel(x, y, getPixel(x, y));\n        }\n    }\n    const b = new ByteArrayOutputStream();\n    gif.write(b, black, white);\n    const base64 = new Base64EncodeOutputStream();\n    const bytes = b.toByteArray();\n    for (let i = 0; i < bytes.length; i++) {\n        base64.writeByte(bytes[i]);\n    }\n    base64.flush();\n    return `data:image/gif;base64,${base64}`;\n}\n\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0);\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n\nvar crc32 = {};\n\n/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n\nvar hasRequiredCrc32;\n\nfunction requireCrc32 () {\n\tif (hasRequiredCrc32) return crc32;\n\thasRequiredCrc32 = 1;\n\t(function (exports) {\n\t\t(function (factory) {\n\t\t\t/*jshint ignore:start */\n\t\t\t/*eslint-disable */\n\t\t\tif(typeof DO_NOT_EXPORT_CRC === 'undefined') {\n\t\t\t\t{\n\t\t\t\t\tfactory(exports);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfactory({});\n\t\t\t}\n\t\t\t/*eslint-enable */\n\t\t\t/*jshint ignore:end */\n\t\t}(function(CRC32) {\n\t\tCRC32.version = '1.2.2';\n\t\t/*global Int32Array */\n\t\tfunction signed_crc_table() {\n\t\t\tvar c = 0, table = new Array(256);\n\n\t\t\tfor(var n =0; n != 256; ++n){\n\t\t\t\tc = n;\n\t\t\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\t\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\t\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\t\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\t\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\t\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\t\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\t\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\t\t\ttable[n] = c;\n\t\t\t}\n\n\t\t\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n\t\t}\n\n\t\tvar T0 = signed_crc_table();\n\t\tfunction slice_by_16_tables(T) {\n\t\t\tvar c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;\n\n\t\t\tfor(n = 0; n != 256; ++n) table[n] = T[n];\n\t\t\tfor(n = 0; n != 256; ++n) {\n\t\t\t\tv = T[n];\n\t\t\t\tfor(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];\n\t\t\t}\n\t\t\tvar out = [];\n\t\t\tfor(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n\t\t\treturn out;\n\t\t}\n\t\tvar TT = slice_by_16_tables(T0);\n\t\tvar T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];\n\t\tvar T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];\n\t\tvar Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];\n\t\tfunction crc32_bstr(bstr, seed) {\n\t\t\tvar C = seed ^ -1;\n\t\t\tfor(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];\n\t\t\treturn ~C;\n\t\t}\n\n\t\tfunction crc32_buf(B, seed) {\n\t\t\tvar C = seed ^ -1, L = B.length - 15, i = 0;\n\t\t\tfor(; i < L;) C =\n\t\t\t\tTf[B[i++] ^ (C & 255)] ^\n\t\t\t\tTe[B[i++] ^ ((C >> 8) & 255)] ^\n\t\t\t\tTd[B[i++] ^ ((C >> 16) & 255)] ^\n\t\t\t\tTc[B[i++] ^ (C >>> 24)] ^\n\t\t\t\tTb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^\n\t\t\t\tT7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^\n\t\t\t\tT3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n\t\t\tL += 15;\n\t\t\twhile(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];\n\t\t\treturn ~C;\n\t\t}\n\n\t\tfunction crc32_str(str, seed) {\n\t\t\tvar C = seed ^ -1;\n\t\t\tfor(var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n\t\t\t\tc = str.charCodeAt(i++);\n\t\t\t\tif(c < 0x80) {\n\t\t\t\t\tC = (C>>>8) ^ T0[(C^c)&0xFF];\n\t\t\t\t} else if(c < 0x800) {\n\t\t\t\t\tC = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\t\t\tC = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];\n\t\t\t\t} else {\n\t\t\t\t\tC = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ~C;\n\t\t}\n\t\tCRC32.table = T0;\n\t\t// $FlowIgnore\n\t\tCRC32.bstr = crc32_bstr;\n\t\t// $FlowIgnore\n\t\tCRC32.buf = crc32_buf;\n\t\t// $FlowIgnore\n\t\tCRC32.str = crc32_str;\n\t\t})); \n\t} (crc32));\n\treturn crc32;\n}\n\nvar crc32Exports = requireCrc32();\n\n// import { CRC32 } from \"./CRC32\";\nclass PngImage {\n    width;\n    height;\n    data;\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n        this.data = new Uint32Array(width * height);\n    }\n    toInt8(num) {\n        const arr = new ArrayBuffer(1);\n        const view = new DataView(arr);\n        view.setUint8(0, num);\n        return arr;\n    }\n    toInt32(num) {\n        const arr = new ArrayBuffer(4);\n        const view = new DataView(arr);\n        view.setUint32(0, num, false);\n        return arr;\n    }\n    addChunk(dataLength, chunkTypeBuffer, dataBuffer = []) {\n        const chunkType = new Uint8Array(chunkTypeBuffer);\n        return new Uint8Array([\n            // Length\n            ...new Uint8Array(this.toInt32(dataLength)),\n            // ChunkType\n            ...chunkType,\n            // ChunkData\n            ...dataBuffer,\n            // CRC\n            ...new Uint8Array(this.toInt32(crc32Exports.buf([...chunkType, ...dataBuffer]))),\n        ]);\n    }\n    setPixel(x, y, pixel) {\n        this.data[y * this.width + x] = pixel;\n    }\n    write(out) {\n        const { width, height } = this;\n        // ---------------------------------\n        // PNG Signature\n        const SIGNATURE = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n        // ---------------------------------\n        // IHDR\n        const IHDR = this.addChunk(\n        // length\n        13, \n        // chunkType\n        [0x49, 0x48, 0x44, 0x52], new Uint8Array([\n            // width\n            ...new Uint8Array(this.toInt32(width)),\n            // height\n            ...new Uint8Array(this.toInt32(height)),\n            // bitDepth\n            ...new Uint8Array(this.toInt8(1)),\n            // colorType\n            ...new Uint8Array(this.toInt8(0)),\n            // compression\n            ...new Uint8Array(this.toInt8(0)),\n            // filter\n            ...new Uint8Array(this.toInt8(0)),\n            // interlace\n            ...new Uint8Array(this.toInt8(0)),\n        ]));\n        // out.writeBytes(IHDR);\n        // ---------------------------------\n        // IDAT\n        const data = zlibSync(new Uint8Array(this.data.buffer));\n        const IDAT = this.addChunk(data.length, [0x49, 0x44, 0x41, 0x54], data);\n        // out.writeBytes(IDAT);\n        // ---------------------------------\n        // IEND\n        const IEND = this.addChunk(0, [0x49, 0x45, 0x4e, 0x44]);\n        // out.writeBytes(IEND);\n        out.writeBytes(new Uint8Array([...SIGNATURE, ...IHDR, ...IDAT, ...IEND]));\n    }\n}\nfunction createPngTag(width, height, getPixel) {\n    const png = new PngImage(width, height);\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            png.setPixel(x, y, getPixel(x, y));\n        }\n    }\n    const b = new ByteArrayOutputStream();\n    png.write(b);\n    const base64 = new Base64EncodeOutputStream();\n    const bytes = b.toByteArray();\n    for (let i = 0; i < bytes.length; i++) {\n        base64.writeByte(bytes[i]);\n    }\n    base64.flush();\n    return `data:image/png;base64,${base64}`;\n}\n\n// ---------------------------------------------------------------------\n// returns qrcode function.\nfunction parseOptions(options = {}) {\n    const opts = { ...options };\n    const typeNumber = opts.typeNumber ?? 4;\n    const errorCorrectLevel = opts.errorCorrectLevel ?? \"M\";\n    const size = opts.size ?? 500;\n    const black = opts.black ?? \"#000000FF\";\n    const white = opts.white ?? \"#FFFFFFFF\";\n    return { typeNumber, errorCorrectLevel, size, black, white };\n}\nconst calcCellSizeAndMargin = (moduleCount, size) => {\n    const cellSize = ~~(size / moduleCount);\n    return {\n        margin: ~~((size - moduleCount * cellSize) / 2),\n        cellSize: cellSize || 2,\n    };\n};\nfunction createQRCodeToGIF(text, options) {\n    const { typeNumber, errorCorrectLevel, size, black, white } = parseOptions(options);\n    let qr;\n    try {\n        qr = new QRCode(typeNumber, errorCorrectLevel);\n        qr.addData(text);\n        qr.make();\n    }\n    catch (e) {\n        if (typeNumber >= 40) {\n            throw new Error(\"Text too long to encode\");\n        }\n        return arguments.callee(text, {\n            size,\n            errorCorrectLevel,\n            typeNumber: typeNumber + 1,\n            black,\n            white,\n        });\n    }\n    // calc cellsize and margin\n    const moduleCount = qr.getModuleCount();\n    const { margin: min, cellSize } = calcCellSizeAndMargin(moduleCount, size);\n    const max = moduleCount * cellSize + min;\n    return createGifTag(size, size, (x, y) => {\n        if (min <= x && x < max && min <= y && y < max) {\n            const c = ~~((x - min) / cellSize);\n            const r = ~~((y - min) / cellSize);\n            return qr.isDark(r, c) ? 0 : 1;\n        }\n        return 1;\n    }, black, white);\n}\nfunction createQRCodeToPNG(text, options) {\n    const { typeNumber, errorCorrectLevel, size, black, white } = parseOptions(options);\n    let qr;\n    try {\n        qr = new QRCode(typeNumber, errorCorrectLevel);\n        qr.addData(text);\n        qr.make();\n    }\n    catch (e) {\n        if (typeNumber >= 40) {\n            throw new Error(\"Text too long to encode\");\n        }\n        return arguments.callee(text, {\n            size,\n            errorCorrectLevel,\n            typeNumber: typeNumber + 1,\n            black,\n            white,\n        });\n    }\n    // calc cellsize and margin\n    const moduleCount = qr.getModuleCount();\n    const { margin: min, cellSize } = calcCellSizeAndMargin(moduleCount, size);\n    const max = moduleCount * cellSize + min;\n    const BLACK = +black.replace(\"#\", \"0x\");\n    const WHITE = +white.replace(\"#\", \"0x\");\n    return createPngTag(size, size, (x, y) => {\n        if (min <= x && x < max && min <= y && y < max) {\n            const c = ~~((x - min) / cellSize);\n            const r = ~~((y - min) / cellSize);\n            return qr.isDark(r, c) ? BLACK : WHITE;\n        }\n        return WHITE;\n    });\n}\nfunction createQRCodeToHTML(text, options) {\n    const { typeNumber, errorCorrectLevel, size, black, white } = parseOptions(options);\n    let qr;\n    try {\n        qr = new QRCode(typeNumber, errorCorrectLevel);\n        qr.addData(text);\n        qr.make();\n    }\n    catch (e) {\n        if (typeNumber >= 40) {\n            throw new Error(\"Text too long to encode\");\n        }\n        return arguments.callee(text, {\n            size,\n            errorCorrectLevel,\n            typeNumber: typeNumber + 1,\n            black,\n            white,\n        });\n    }\n    // calc cellsize and margin\n    const moduleCount = qr.getModuleCount();\n    const { margin, cellSize } = calcCellSizeAndMargin(moduleCount, size);\n    const commonStyle = \"border-width: 0px; border-style: none; border-collapse: collapse; padding: 0px;\";\n    let qrHtml = `<table style=\"${commonStyle} margin: ${margin}px;\"><tbody>`;\n    for (let r = 0; r < moduleCount; r++) {\n        qrHtml += \"<tr>\";\n        for (let c = 0; c < moduleCount; c++) {\n            qrHtml += `<td style=\"${commonStyle} margin: 0px; width: ${cellSize}px; height: ${cellSize}px; background-color: ${qr.isDark(r, c) ? \"#000000\" : \"#ffffff\"};\"/>`;\n        }\n        qrHtml += \"</tr>\";\n    }\n    return qrHtml + \"</tbody></table>\";\n}\n\nexport { GifImage, MovieEntity, PngImage, QRCode, createGifTag, createPngTag, createQRCodeToGIF, createQRCodeToHTML, createQRCodeToPNG };\n//# sourceMappingURL=index.js.map\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"names":["u8","u16","i32","fleb","fdeb","freb","_a","fl","revfl","rev","i","x","flt","fdt","et","td","tds"],"mappings":"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","x_google_ignoreList":[0]}
{"version":3,"file":"index.min.js","sources":["../src/platform.ts","../src/index.ts"],"sourcesContent":["import {\n  OctopusPlatform,\n  installPlugin,\n  type OctopusPlatformPlugins,\n  type OctopusPlatformPluginOptions,\n  pluginNow,\n} from \"octopus-platform\";\n\nexport type PlatformProperties = \"now\";\n\nclass EnhancedPlatform extends OctopusPlatform<PlatformProperties> {\n  now!: OctopusPlatformPlugins[\"now\"];\n\n  constructor() {\n    super([pluginNow], __VERSION__);\n\n    this.init();\n  }\n\n  installPlugin(plugin: OctopusPlatformPluginOptions<PlatformProperties>) {\n    installPlugin<PlatformProperties>(this, plugin);\n  }\n}\n\nexport const platform = new EnhancedPlatform();\n","import { platform } from \"./platform\";\n\nconst badge = [\n  \"%cBENCHMARK\",\n  \"padding: 2px 4px; background: #68B984; color: #FFFFFF; border-radius: 4px;\",\n];\n\nclass Stopwatch {\n  private readonly timeLabels: Map<string, number> = new Map();\n\n  private readonly markLabels: Map<string, number> = new Map();\n\n  start(label: string) {\n    this.timeLabels.set(label, platform.now());\n  }\n\n  stop(label: string) {\n    const nowTime = platform.now();\n    const { timeLabels } = this;\n\n    if (timeLabels.has(label)) {\n      console.log(`${label}: ${nowTime - timeLabels.get(label)!} ms`);\n      timeLabels.delete(label);\n    }\n  }\n\n  mark(label: string) {\n    const nowTime = platform.now();\n    const { markLabels } = this;\n\n    if (markLabels.has(label)) {\n      console.log(`${label}: ${nowTime - markLabels.get(label)!} ms`);\n    }\n\n    markLabels.set(label, nowTime);\n  }\n\n  reset(label: string) {\n    this.markLabels.delete(label);\n  }\n\n  clear() {\n    this.timeLabels.clear();\n    this.markLabels.clear();\n  }\n}\n\nexport interface Benchmark extends Stopwatch {\n  now: () => number;\n  time: <T extends any = any>(\n    label: string,\n    callback: () => Promise<T> | T\n  ) => Promise<T> | T;\n  line: (size: number) => void;\n  log: (...message: unknown[]) => void;\n}\n\nconst stopwatch = new Stopwatch();\nconst benchmark: Benchmark = Object.create(stopwatch);\n\nbenchmark.now = () => platform.now();\n\nbenchmark.time = async (label, callback) => {\n  stopwatch.start(label);\n  const result = await callback();\n  stopwatch.stop(label);\n\n  return result;\n};\n\nbenchmark.line = (size = 40) => {\n  console.log(\"-\".repeat(size));\n};\n\nbenchmark.log = (...message) => {\n  console.log(...badge, ...message);\n};\n\nexport { benchmark };\n"],"names":["platform","OctopusPlatform","now","constructor","super","pluginNow","this","init","installPlugin","plugin","badge","stopwatch","timeLabels","Map","markLabels","start","label","set","stop","nowTime","has","console","log","get","delete","mark","reset","clear","benchmark","Object","create","time","async","callback","result","line","size","repeat","message"],"mappings":"qFAwBO,MAAMA,EAAW,IAdxB,cAA+BC,EAC7BC,IAEA,WAAAC,GACEC,MAAM,CAACC,GAAY,SAEnBC,KAAKC,OAGP,aAAAC,CAAcC,GACZD,EAAkCF,KAAMG,KClBtCC,EAAQ,CACZ,cACA,8EAqDF,MAAMC,EAAY,IAlDlB,MACmBC,WAAkC,IAAIC,IAEtCC,WAAkC,IAAID,IAEvD,KAAAE,CAAMC,GACJV,KAAKM,WAAWK,IAAID,EAAOhB,EAASE,OAGtC,IAAAgB,CAAKF,GACH,MAAMG,EAAUnB,EAASE,OACnBU,WAAEA,GAAeN,KAEnBM,EAAWQ,IAAIJ,KACjBK,QAAQC,IAAI,GAAGN,MAAUG,EAAUP,EAAWW,IAAIP,SAClDJ,EAAWY,OAAOR,IAItB,IAAAS,CAAKT,GACH,MAAMG,EAAUnB,EAASE,OACnBY,WAAEA,GAAeR,KAEnBQ,EAAWM,IAAIJ,IACjBK,QAAQC,IAAI,GAAGN,MAAUG,EAAUL,EAAWS,IAAIP,SAGpDF,EAAWG,IAAID,EAAOG,GAGxB,KAAAO,CAAMV,GACJV,KAAKQ,WAAWU,OAAOR,GAGzB,KAAAW,GACErB,KAAKM,WAAWe,QAChBrB,KAAKQ,WAAWa,UAedC,EAAuBC,OAAOC,OAAOnB,GAE3CiB,EAAU1B,IAAM,IAAMF,EAASE,MAE/B0B,EAAUG,KAAOC,MAAOhB,EAAOiB,KAC7BtB,EAAUI,MAAMC,GAChB,MAAMkB,QAAeD,IAGrB,OAFAtB,EAAUO,KAAKF,GAERkB,CAAM,EAGfN,EAAUO,KAAO,CAACC,EAAO,MACvBf,QAAQC,IAAI,IAAIe,OAAOD,GAAM,EAG/BR,EAAUN,IAAM,IAAIgB,KAClBjB,QAAQC,OAAOZ,KAAU4B,EAAQ"}
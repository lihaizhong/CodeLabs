import{Platform as e,pluginNow as s,pluginSystem as t}from"octopus-platform";const a=new class extends e{now;system;constructor(){super([s,t],"0.0.1"),this.init()}installPlugin(e){const s=e.install.call(this);Object.defineProperty(this,e.name,{get:()=>s,enumerable:!0,configurable:!0})}},o=["%cBENCHMARK","padding: 2px 4px; background: #68B984; color: #FFFFFF; border-radius: 4px;"];const l=new class{isRealMachine=["ios","android","openharmony"].includes(a.system);timeLabels=new Map;markLabels=new Map;start(e){this.isRealMachine?this.timeLabels.set(e,a.now()):console.time(e)}stop(e){if(this.isRealMachine){const s=a.now();this.timeLabels.has(e)&&(console.log(`${e}: ${s-this.timeLabels.get(e)} ms`),this.timeLabels.delete(e))}else console.timeEnd(e)}mark(e){const s=a.now();this.markLabels.has(e)&&console.log(`${e}: ${s-this.markLabels.get(e)} ms`),this.markLabels.set(e,s)}reset(e){this.markLabels.delete(e)}clear(){this.timeLabels.clear(),this.markLabels.clear()}},i=Object.create(l);i.now=()=>a.now(),i.time=async(e,s)=>{l.start(e);const t=await s();return l.stop(e),t},i.line=(e=40)=>{console.log("-".repeat(e))},i.log=(...e)=>{console.log(...o,...e)};export{i as default};
//# sourceMappingURL=index.min.js.map

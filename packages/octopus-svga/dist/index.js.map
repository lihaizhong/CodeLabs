{"version":3,"file":"index.js","sources":["../../../node_modules/.pnpm/fflate@0.8.2/node_modules/fflate/esm/browser.js","../../octopus-platform/dist/index.js","../src/benchmark/index.ts","../src/platform/index.ts","../src/extensions/protobuf/io/float.ts","../src/extensions/protobuf/io/Reader.ts","../src/extensions/protobuf/serialization/Layout.ts","../src/extensions/protobuf/serialization/Transform.ts","../src/extensions/protobuf/serialization/ShapeArgs.ts","../src/extensions/protobuf/serialization/RectArgs.ts","../src/extensions/protobuf/serialization/EllipseArgs.ts","../src/extensions/protobuf/serialization/RGBAColor.ts","../src/extensions/protobuf/serialization/ShapeStyle.ts","../src/extensions/protobuf/serialization/ShapeEntity.ts","../src/extensions/protobuf/serialization/FrameEntity.ts","../src/extensions/protobuf/serialization/SpriteEntity.ts","../src/extensions/protobuf/serialization/MovieParams.ts","../src/extensions/protobuf/serialization/MovieEntity.ts","../src/parser/video-entity.ts","../src/parser/index.ts","../src/painter/point-pool.ts","../src/painter/render.ts","../src/painter/image-pool.ts","../src/painter/index.ts","../src/player/animator.ts","../src/player/config.ts","../src/player/index.ts","../src/extensions/png-encoder/crc.ts","../src/extensions/png-encoder/index.ts","../src/extensions/qrcode/bit-buffer.ts","../src/extensions/qrcode/constants.ts","../src/extensions/qrcode/bit-byte.ts","../src/extensions/qrcode/block.ts","../src/extensions/qrcode/math.ts","../src/extensions/qrcode/polynomial.ts","../src/extensions/qrcode/util.ts","../src/extensions/qrcode/index.ts","../src/helper/qrcode-helper.ts","../src/helper/png-helper.ts","../src/helper/video-manager.ts","../src/helper/video-editor.ts","../src/poster/index.ts"],"sourcesContent":["// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","const e=()=>{};const t=async(e,n=[],r=0)=>{try{return e()}catch(i){if(r>=n.length)throw i;return s=()=>t(e,n,++r),a=n[r],new Promise((e=>setTimeout((()=>e(s())),a)))}var s,a};function n(e,t,n){if(t<0||n>e.length)throw new RangeError(\"Index out of range\");if(n-t<1)return\"\";const r=[],s=new Array(1024),{fromCharCode:a}=String;let i=0;for(let o=t;o<n;){const t=e[o++];if(t<=127)s[i++]=t,(1024===i||o<n&&e[o]>127)&&(r.push(a(...s.slice(0,i))),i=0);else{let l;if(i>0&&(r.push(a(...s.slice(0,i))),i=0),t>=192&&t<224&&o<n)l=(31&t)<<6|63&e[o++];else if(t>=224&&t<240&&o+1<n)l=(15&t)<<12|(63&e[o++])<<6|63&e[o++];else{if(t>=240&&t<248&&o+2<n){l=((7&t)<<18|(63&e[o++])<<12|(63&e[o++])<<6|63&e[o++])-65536,r.push(a(55296+(l>>10),56320+(1023&l)));continue}for(l=65533;o<n&&128==(192&e[o]);)o++}r.push(a(l))}}return i>0&&r.push(a(...s.slice(0,i))),r.join(\"\")}class r{plugins=[];globalCanvas=null;platformVersion=\"0.0.1\";version=\"\";globals={env:\"unknown\",br:null,dpr:1};noop=e;retry=t;constructor(e,t){this.version=t||\"\",this.plugins=e,this.globals.env=this.autoEnv()}init(){this.globals.br=this.useBridge(),this.globals.dpr=this.usePixelRatio();const e=this.plugins.reduce(((e,t)=>(e[t.name]=t,e)),{}),t=this.plugins.map((e=>e.name));this.usePlugins(e,t,{})}autoEnv(){if(\"undefined\"!=typeof window)return\"h5\";if(\"undefined\"!=typeof tt)return\"tt\";if(\"undefined\"!=typeof my)return\"alipay\";if(\"undefined\"!=typeof wx)return\"weapp\";throw new Error(\"Unsupported app\")}useBridge(){switch(this.globals.env){case\"h5\":return globalThis;case\"alipay\":return my;case\"tt\":return tt;case\"weapp\":return wx}return{}}usePixelRatio(){const{env:e,br:t}=this.globals;return\"h5\"===e?devicePixelRatio:\"getWindowInfo\"in t?t.getWindowInfo().pixelRatio:\"getSystemInfoSync\"in t?t.getSystemInfoSync().pixelRatio:1}usePlugins(e,t,n){t.forEach((t=>{const r=e[t];if(!n[t]){if(void 0===r)throw new Error(`Plugin ${t} not found`);if(Array.isArray(r.dependencies)){for(const n of r.dependencies)if(\"function\"!=typeof e[n]?.install)throw new Error(`Plugin ${t} depends on plugin ${n}, but ${n} is not found`);this.usePlugins(e,r.dependencies,n)}this.installPlugin(r),n[r.name]=!0}}))}setGlobalCanvas(e){this.globalCanvas=e}getGlobalCanvas(){return this.globalCanvas}switch(e){this.globals.env=e,this.init()}}const s=e=>e;var a={name:\"getCanvas\",install(){const{retry:e}=this,{env:t,br:n,dpr:r}=this.globals,s=[50,100,100];function a(e,n,s){if(!e)throw new Error(\"canvas not found.\");const a=1365,i=e.getContext(\"2d\");let o=n*r,l=s*r;return\"weapp\"===t&&(o>a||l>a)&&(o>l?(l=l/o*a,o=a):(o=o/l*a,l=a)),e.width=o,e.height=l,{canvas:e,context:i}}if(\"h5\"===t){const t=e=>document.querySelector(e);return n=>e((()=>{const e=t(`canvas[canvas-id=${n.slice(1)}]`)||t(n);return a(e,e?.clientWidth,e?.clientHeight)}),s)}return(t,r)=>e((()=>new Promise(((e,s)=>{let i=n.createSelectorQuery();r&&(i=i.in(r)),i.select(t).fields({node:!0,size:!0},(t=>{const{node:n,width:r,height:i}=t||{};try{e(a(n,r,i))}catch(e){s(e)}})).exec()}))),s)}},i={name:\"decode\",install(){const{env:e,br:t}=this.globals,r=(e,t=\"image/png\")=>`data:${t};base64,${e}`,s={toBuffer(e){const{buffer:t,byteOffset:n,byteLength:r}=e;return t.slice(n,n+r)},bytesToString(e){let t=\"\";for(let n=0;n<e.length;n+=8192){const r=e.slice(n,n+8192);t+=String.fromCharCode.apply(null,Array.from(r))}return t}};if(\"h5\"===e){const e=new TextDecoder(\"utf-8\",{fatal:!0});s.toDataURL=e=>r(btoa(s.bytesToString(e))),s.utf8=(t,n,r)=>e.decode(t.subarray(n,r))}else s.toDataURL=e=>r(t.arrayBufferToBase64(s.toBuffer(e))),s.utf8=n;return s}},o={name:\"remote\",install(){const{env:e,br:t}=this.globals,n=e=>/^http(s)?:\\/\\//.test(e);if(\"h5\"===e)return{is:n,fetch:e=>fetch(e).then((e=>{if(e.ok)return e.arrayBuffer();throw new Error(`HTTP error, status=${e.status}, statusText=${e.statusText}`)}))};function r(e,n){return new Promise(((r,s)=>{t.request({url:e,dataType:\"arraybuffer\",responseType:\"arraybuffer\",enableCache:n,success:e=>r(e.data),fail:s})})).catch((t=>{const n=t.errMsg||t.errorMessage||t.message;if(n.includes(\"ERR_CACHE_WRITE_FAILURE\")||n.includes(\"ERR_CACHE_WRITE_FAILED\"))return r(e,!1);throw t}))}return{is:n,fetch:e=>r(e,!0)}}},l={name:\"local\",install(){const{env:e,br:t}=this.globals;if(\"h5\"===e)return null;const n=t.getFileSystemManager();return{write:(e,t)=>new Promise(((r,s)=>{n.writeFile({filePath:t,data:e,success:()=>r(t),fail:e=>s(e)})})),read:e=>new Promise(((t,r)=>{n.readFile({filePath:e,success:e=>t(e.data),fail:e=>r(e)})})),remove:e=>new Promise(((t,r)=>{n.unlink({filePath:e,success:()=>t(e),fail:e=>r(e)})}))}}},c={name:\"image\",dependencies:[\"local\",\"path\",\"decode\"],install(){const{local:e,path:t,decode:n,noop:r}=this,{env:s}=this.globals,a=new Set;function i(t,n){return new Promise(((s,i)=>{t.onload=()=>{s(t),a.has(n)&&e.remove(n).catch(r).then((()=>a.delete(n)))},t.onerror=()=>i(new Error(`SVGA LOADING FAILURE: ${t.src}`)),t.src=n}))}if(\"h5\"===s){const e=()=>new Image,t=e=>\"string\"==typeof e?e:n.toDataURL(e);return{isImage:e=>e instanceof Image,isImageBitmap:e=>e instanceof ImageBitmap,create:e,load:(r,s,a)=>r instanceof Uint8Array&&\"createImageBitmap\"in globalThis?createImageBitmap(new Blob([n.toBuffer(r)])):r instanceof ImageBitmap?Promise.resolve(r):i(e(),t(r))}}const o=()=>{const e=this.getGlobalCanvas();if(!e)throw new Error(\"Canvas not found, please use `platform.setCanvas` first!\");return e.createImage()};return{isImage:e=>!(!e||void 0===e.src||void 0===e.width||void 0===e.height),isImageBitmap:e=>!1,create:o,load:async(r,l,c)=>{const u=await(async(r,i,o)=>{if(\"string\"==typeof r)return r;if(\"tt\"===s||\"alipay\"===s)return n.toDataURL(r);try{const s=t.resolve(i,o);return await e.write(n.toBuffer(r),s),a.add(s),s}catch(e){return console.warn(`图片缓存失败：${e.message}`),n.toDataURL(r)}})(r,l,c);return i(o(),u)}}}},u={name:\"now\",install(){const{env:e,br:t}=this.globals,n=\"h5\"===e?performance:\"tt\"===e?t.performance:t.getPerformance();return\"function\"==typeof n?.now?n.now()-Date.now()>0?()=>n.now()/1e3:()=>n.now():()=>Date.now()}},f={name:\"getOfsCanvas\",install(){const{env:e}=this.globals;let t;return t=\"h5\"===e?e=>new OffscreenCanvas(e.width,e.height):\"alipay\"===e?e=>my.createOffscreenCanvas({width:e.width,height:e.height}):\"tt\"===e?e=>{const t=tt.createOffscreenCanvas();return t.width=e.width,t.height=e.height,t}:e=>wx.createOffscreenCanvas({...e,type:\"2d\"}),e=>{const n=t(e),r=n.getContext(\"2d\");return{canvas:n,context:r}}}},h={name:\"path\",install(){const{env:e,br:t}=this.globals,n=e=>e.substring(e.lastIndexOf(\"/\")+1);if(\"h5\"===e)return{USER_DATA_PATH:\"\",filename:n,resolve:(e,t)=>\"\"};const{USER_DATA_PATH:r}=\"tt\"===e?tt.getEnvInfoSync().common:t.env;return{USER_DATA_PATH:r,filename:n,resolve:(e,t)=>`${r}/${t?`${t}.`:\"\"}${e}`}}},g={name:\"rAF\",dependencies:[\"now\"],install(){const{env:e}=this.globals;if(\"h5\"===e){const e=\"requestAnimationFrame\"in globalThis?globalThis.requestAnimationFrame:e=>setTimeout(e,Math.max(0,16-Date.now()%16));return t=>e(t)}let t=null;return e=>{if(!t&&(t=this.getGlobalCanvas(),null===t))throw new Error(\"requestAnimationFrame is not ready, please call `platform.setGlobalCanvas` first\");return t.requestAnimationFrame?.(e)}}};export{r as Platform,s as definePlugin,e as noop,a as pluginCanvas,i as pluginDecode,o as pluginDownload,l as pluginFsm,c as pluginImage,u as pluginNow,f as pluginOfsCanvas,h as pluginPath,g as pluginRAF,t as retry,n as utf8};\n//# sourceMappingURL=index.js.map\n","const badge = \"【benchmark】\";\n// 检查环境\nconst env = (() => {\n    if (typeof window !== \"undefined\") {\n        return \"h5\";\n    }\n    if (typeof tt !== \"undefined\") {\n        return \"tt\";\n    }\n    if (typeof my !== \"undefined\") {\n        return \"alipay\";\n    }\n    if (typeof wx !== \"undefined\") {\n        return \"weapp\";\n    }\n    return \"unknown\";\n})();\n// 检查系统\nconst sys = (() => {\n    if (env === \"alipay\") {\n        return my.getDeviceBaseInfo().platform;\n    }\n    if (env === \"tt\") {\n        return tt.getDeviceInfoSync().platform;\n    }\n    if (env === \"weapp\") {\n        // @ts-ignore\n        return wx.getDeviceInfo().platform;\n    }\n    return \"unknown\";\n})().toLocaleLowerCase();\n// 检查时间工具\nconst now = (() => {\n    if (env === \"h5\") {\n        return () => performance.now() / 1000;\n    }\n    if (env === \"weapp\") {\n        // @ts-ignore\n        return () => wx.getPerformance().now() / 1000;\n    }\n    if (env === \"alipay\") {\n        return () => my.getPerformance().now() / 1000;\n    }\n    return () => Date.now();\n})();\nclass Stopwatch {\n    label = \"\";\n    startTime = 0;\n    isRealMachine = [\"ios\", \"android\", \"openharmony\"].includes(sys);\n    start(label) {\n        if (this.isRealMachine) {\n            this.label = label;\n            this.startTime = now();\n        }\n        else {\n            console.time(label);\n        }\n    }\n    stop(label) {\n        if (this.isRealMachine) {\n            console.log(`${this.label}: ${now() - this.startTime}`);\n        }\n        else {\n            console.timeEnd(label);\n        }\n    }\n}\nexport default {\n    label(label) {\n        console.log(badge, label);\n    },\n    async time(label, callback) {\n        const stopwatch = new Stopwatch();\n        stopwatch.start(label);\n        const result = await callback();\n        stopwatch.stop(label);\n        return result;\n    },\n    line(size = 40) {\n        console.log(\"-\".repeat(size));\n    },\n    log(...message) {\n        console.log(badge, ...message);\n    },\n};\n","import { Platform, pluginCanvas, pluginDecode, pluginDownload, pluginFsm, pluginImage, pluginNow, pluginOfsCanvas, pluginPath, pluginRAF, } from \"octopus-platform\";\nimport { version } from \"../../package.json\";\nimport benchmark from \"../benchmark\";\nclass EnhancedPlatform extends Platform {\n    now;\n    path;\n    remote;\n    local;\n    decode;\n    image;\n    rAF;\n    getCanvas;\n    getOfsCanvas;\n    constructor() {\n        super([\n            pluginCanvas,\n            pluginOfsCanvas,\n            pluginDecode,\n            pluginDownload,\n            pluginFsm,\n            pluginImage,\n            pluginNow,\n            pluginPath,\n            pluginRAF,\n        ], version);\n        this.init();\n    }\n    installPlugin(plugin) {\n        const value = plugin.install.call(this);\n        Object.defineProperty(this, plugin.name, {\n            get() {\n                return value;\n            },\n            enumerable: true,\n            configurable: true,\n        });\n    }\n}\nexport const platform = new EnhancedPlatform();\nbenchmark.log(\"PLATFORM VERSION\", platform.platformVersion, \"VERSION\", platform.version);\n","const view = new DataView(new ArrayBuffer(4));\nconst tempUint8Array = new Uint8Array(view.buffer);\nexport default {\n    readFloatLE(buf, pos) {\n        if (pos < 0 || pos + 4 > buf.length)\n            throw new RangeError(\"Index out of range\");\n        tempUint8Array.set(buf.subarray(pos, pos + 4));\n        return view.getFloat32(0, true);\n    },\n};\n","// import { utf8 } from \"./utf8\"\nimport { platform } from \"../../../platform\";\nimport float from \"./float\";\n// import { LongBits } from \"../dts\";\nexport default class Reader {\n    // 添加静态缓存，用于常用的空数组\n    static EMPTY_UINT8ARRAY = new Uint8Array(0);\n    /**\n     * Creates a new reader using the specified buffer.\n     * @function\n     * @param {Reader|Uint8Array|Buffer} buffer Buffer to read from\n     * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n     * @throws {Error} If `buffer` is not a valid buffer\n     */\n    static create(buffer) {\n        if (buffer instanceof Reader) {\n            return buffer;\n        }\n        if (buffer instanceof Uint8Array) {\n            return new Reader(buffer);\n        }\n        throw Error(\"illegal buffer\");\n    }\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    buf;\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    pos;\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    len;\n    /**\n     * Constructs a new reader instance using the specified buffer.\n     * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n     * @constructor\n     * @param {Uint8Array} buffer Buffer to read from\n     */\n    constructor(buffer) {\n        this.buf = buffer;\n        this.pos = 0;\n        this.len = buffer.length;\n    }\n    slice(buf, begin, end) {\n        return buf.subarray(begin, end);\n    }\n    indexOutOfRange(reader, writeLength) {\n        return new RangeError(\"index out of range: \" +\n            reader.pos +\n            \" + \" +\n            (writeLength || 1) +\n            \" > \" +\n            reader.len);\n    }\n    // private readLongVarint() {\n    //   // tends to deopt with local vars for octet etc.\n    //   const bits = new LongBits(0, 0);\n    //   let i = 0;\n    //   if (this.len - this.pos > 4) {\n    //     // fast route (lo)\n    //     for (let i = 0; i < 4; ++i) {\n    //       // 1st..4th\n    //       bits.lo = (bits.lo | ((this.buf[this.pos] & 127) << (i * 7))) >>> 0;\n    //       if (this.buf[this.pos++] < 128) {\n    //         return bits;\n    //       }\n    //     }\n    //     // 5th\n    //     bits.lo = (bits.lo | ((this.buf[this.pos] & 127) << 28)) >>> 0;\n    //     bits.hi = (bits.hi | ((this.buf[this.pos] & 127) >> 4)) >>> 0;\n    //     if (this.buf[this.pos++] < 128) {\n    //       return bits;\n    //     }\n    //     i = 0;\n    //   } else {\n    //     for (; i < 3; ++i) {\n    //       /* istanbul ignore if */\n    //       if (this.pos >= this.len) {\n    //         throw this.indexOutOfRange(this);\n    //       }\n    //       // 1st..3th\n    //       bits.lo = (bits.lo | ((this.buf[this.pos] & 127) << (i * 7))) >>> 0;\n    //       if (this.buf[this.pos++] < 128) {\n    //         return bits;\n    //       }\n    //     }\n    //     // 4th\n    //     bits.lo = (bits.lo | ((this.buf[this.pos++] & 127) << (i * 7))) >>> 0;\n    //     return bits;\n    //   }\n    //   if (this.len - this.pos > 4) {\n    //     // fast route (hi)\n    //     for (; i < 5; ++i) {\n    //       // 6th..10th\n    //       bits.hi = (bits.hi | ((this.buf[this.pos] & 127) << (i * 7 + 3))) >>> 0;\n    //       if (this.buf[this.pos++] < 128) {\n    //         return bits;\n    //       }\n    //     }\n    //   } else {\n    //     for (; i < 5; ++i) {\n    //       /* istanbul ignore if */\n    //       if (this.pos >= this.len) {\n    //         throw this.indexOutOfRange(this);\n    //       }\n    //       // 6th..10th\n    //       bits.hi = (bits.hi | ((this.buf[this.pos] & 127) << (i * 7 + 3))) >>> 0;\n    //       if (this.buf[this.pos++] < 128) {\n    //         return bits;\n    //       }\n    //     }\n    //   }\n    //   /* istanbul ignore next */\n    //   throw Error(\"invalid varint encoding\");\n    // }\n    // private readFixed32_end(buf: Uint8Array, end: number) {\n    //   // note that this uses `end`, not `pos`\n    //   return (\n    //     (buf[end - 4] |\n    //       (buf[end - 3] << 8) |\n    //       (buf[end - 2] << 16) |\n    //       (buf[end - 1] << 24)) >>>\n    //     0\n    //   );\n    // }\n    // private readFixed64(/* this: Reader */) {\n    //   /* istanbul ignore if */\n    //   if (this.pos + 8 > this.len) throw this.indexOutOfRange(this, 8);\n    //   return new LongBits(\n    //     this.readFixed32_end(this.buf, (this.pos += 4)),\n    //     this.readFixed32_end(this.buf, (this.pos += 4))\n    //   );\n    // }\n    /**\n     * Reads a varint as an unsigned 32 bit value.\n     * @function\n     * @returns {number} Value read\n     */\n    uint32() {\n        let value = 4294967295;\n        value = (this.buf[this.pos] & 127) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        value = (value | ((this.buf[this.pos] & 127) << 7)) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        value = (value | ((this.buf[this.pos] & 127) << 14)) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        value = (value | ((this.buf[this.pos] & 127) << 21)) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        value = (value | ((this.buf[this.pos] & 15) << 28)) >>> 0;\n        if (this.buf[this.pos++] < 128) {\n            return value;\n        }\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw this.indexOutOfRange(this, 10);\n        }\n        return value;\n    }\n    /**\n     * Reads a varint as a signed 32 bit value.\n     * @returns {number} Value read\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Reads a zig-zag encoded varint as a signed 32 bit value.\n     * @returns {number} Value read\n     */\n    // sint32() {\n    //   const value = this.uint32();\n    //   return ((value >>> 1) ^ -(value & 1)) | 0;\n    // }\n    /**\n     * Reads a varint as an unsigned 64 bit value.\n     * @name Reader#uint64\n     * @function\n     * @returns {Long} Value read\n     */\n    // uint64() {\n    //   return this.readLongVarint().toNumber(true);\n    // }\n    /**\n     * Reads a varint as a signed 64 bit value.\n     * @name Reader#int64\n     * @function\n     * @returns {Long} Value read\n     */\n    // int64() {\n    //   return this.readLongVarint().toNumber(false);\n    // }\n    /**\n     * Reads a zig-zag encoded varint as a signed 64 bit value.\n     * @name Reader#sint64\n     * @function\n     * @returns {Long} Value read\n     */\n    // sint64() {\n    //   return this.readLongVarint().zzDecode().toNumber(false);\n    // }\n    /**\n     * Reads a varint as a boolean.\n     * @returns {boolean} Value read\n     */\n    // bool() {\n    //   return this.uint32() != 0;\n    // }\n    /**\n     * Reads fixed 32 bits as an unsigned 32 bit integer.\n     * @returns {number} Value read\n     */\n    // fixed32() {\n    //   if (this.pos + 4 > this.len) {\n    //     throw this.indexOutOfRange(this, 4);\n    //   }\n    //   return this.readFixed32_end(this.buf, (this.pos += 4));\n    // }\n    /**\n     * Reads fixed 32 bits as a signed 32 bit integer.\n     * @returns {number} Value read\n     */\n    // sfixed32() {\n    //   if (this.pos + 4 > this.len) {\n    //     throw this.indexOutOfRange(this, 4);\n    //   }\n    //   return this.readFixed32_end(this.buf, (this.pos += 4)) | 0;\n    // }\n    /**\n     * Reads fixed 64 bits.\n     * @name Reader#fixed64\n     * @function\n     * @returns {Long} Value read\n     */\n    // fixed64() {\n    //   return this.readFixed64().toNumber(true);\n    // }\n    /**\n     * Reads zig-zag encoded fixed 64 bits.\n     * @name Reader#sfixed64\n     * @function\n     * @returns {Long} Value read\n     */\n    // sfixed64() {\n    //   return this.readFixed64().zzDecode().toNumber(false);\n    // }\n    /**\n     * Reads a float (32 bit) as a number.\n     * @function\n     * @returns {number} Value read\n     */\n    float() {\n        if (this.pos + 4 > this.len) {\n            throw this.indexOutOfRange(this, 4);\n        }\n        const value = float.readFloatLE(this.buf, this.pos);\n        this.pos += 4;\n        return value;\n    }\n    /**\n     * Reads a double (64 bit float) as a number.\n     * @function\n     * @returns {number} Value read\n     */\n    // double() {\n    //   if (this.pos + 8 > this.len) {\n    //     throw this.indexOutOfRange(this, 4);\n    //   }\n    //   const value = float.readDoubleLE(this.buf, this.pos);\n    //   this.pos += 8;\n    //   return value;\n    // }\n    /**\n     * Reads a sequence of bytes preceeded by its length as a varint.\n     * @returns {Uint8Array} Value read\n     */\n    bytes() {\n        const length = this.uint32();\n        const start = this.pos;\n        const end = start + length;\n        if (end > this.len) {\n            throw this.indexOutOfRange(this, length);\n        }\n        this.pos += length;\n        if (length === 0) {\n            return Reader.EMPTY_UINT8ARRAY;\n        }\n        return this.slice(this.buf, start, end);\n    }\n    /**\n     * Reads a string preceeded by its byte length as a varint.\n     * @returns {string} Value read\n     */\n    string() {\n        const bytes = this.bytes();\n        return platform.decode.utf8(bytes, 0, bytes.length);\n    }\n    /**\n     * Skips the specified number of bytes if specified, otherwise skips a varint.\n     * @param {number} [length] Length if known, otherwise a varint is assumed\n     * @returns {Reader} `this`\n     */\n    skip(length) {\n        if (typeof length == \"number\") {\n            /* istanbul ignore if */\n            if (this.pos + length > this.len) {\n                throw this.indexOutOfRange(this, length);\n            }\n            this.pos += length;\n        }\n        else {\n            // 优化变长整数跳过逻辑\n            const startPos = this.pos;\n            while (this.pos < this.len) {\n                if (this.buf[this.pos++] < 128) {\n                    return this;\n                }\n                // 防止无限循环，最多读取10个字节\n                if (this.pos - startPos >= 10) {\n                    throw Error(\"invalid varint encoding\");\n                }\n            }\n            throw this.indexOutOfRange(this);\n        }\n        return this;\n    }\n    /**\n     * Skips the next element of the specified wire type.\n     * @param {number} wireType Wire type received\n     * @returns {Reader} `this`\n     */\n    skipType(wireType) {\n        switch (wireType) {\n            case 0:\n                this.skip();\n                break;\n            case 1:\n                this.skip(8);\n                break;\n            case 2:\n                this.skip(this.uint32());\n                break;\n            case 3:\n                while ((wireType = this.uint32() & 7) != 4) {\n                    this.skipType(wireType);\n                }\n                break;\n            case 5:\n                this.skip(4);\n                break;\n            /* istanbul ignore next */\n            default:\n                throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n        }\n        return this;\n    }\n}\n","import Reader from \"../io/Reader\";\n// export class LayoutWriter {\n//   /**\n//    * Encodes the specified Layout message. Does not implicitly {@link com.opensource.svga.Layout.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.Layout\n//    * @static\n//    * @param {com.opensource.svga.ILayout} message Layout message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: Layout, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.x != null && Object.hasOwn(message, \"x\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.x);\n//     }\n//     if (message.y != null && Object.hasOwn(message, \"y\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.y);\n//     }\n//     if (message.width != null && Object.hasOwn(message, \"width\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.width);\n//     }\n//     if (message.height != null && Object.hasOwn(message, \"height\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.height);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified Layout message, length delimited. Does not implicitly {@link com.opensource.svga.Layout.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.Layout\n//    * @static\n//    * @param {com.opensource.svga.ILayout} message Layout message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: Layout, writer: Writer): Writer {\n//     return Layout.encode(message, writer).ldelim();\n//   }\n// }\nexport default class Layout {\n    /**\n     * Decodes a Layout message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.Layout} Layout\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new Layout();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.x = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.y = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.width = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.height = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a Layout message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.Layout} Layout\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): Layout {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a Layout message.\n     * @function verify\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     if (typeof message.x != \"number\") {\n    //       return \"x: number expected\";\n    //     }\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     if (typeof message.y != \"number\") {\n    //       return \"y: number expected\";\n    //     }\n    //   }\n    //   if (message.width != null && message.hasOwnProperty(\"width\")) {\n    //     if (typeof message.width != \"number\") {\n    //       return \"width: number expected\";\n    //     }\n    //   }\n    //   if (message.height != null && message.hasOwnProperty(\"height\")) {\n    //     if (typeof message.height != \"number\") {\n    //       return \"height: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a Layout message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.Layout} Layout\n     */\n    // static fromObject(object: Record<string, any>): Layout {\n    //   if (object instanceof Layout) {\n    //     return object;\n    //   }\n    //   const message = new Layout();\n    //   if (object.x != null) {\n    //     message.x = +object.x;\n    //   }\n    //   if (object.y != null) {\n    //     message.y = +object.y;\n    //   }\n    //   if (object.width != null) {\n    //     message.width = +object.width;\n    //   }\n    //   if (object.height != null) {\n    //     message.height = +object.height;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a Layout message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {com.opensource.svga.Layout} message Layout\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: Layout,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.x = 0;\n    //     object.y = 0;\n    //     object.width = 0;\n    //     object.height = 0;\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     object.x =\n    //       options.json && !isFinite(message.x) ? \"\" + message.x : message.x;\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     object.y =\n    //       options.json && !isFinite(message.y) ? \"\" + message.y : message.y;\n    //   }\n    //   if (message.width != null && message.hasOwnProperty(\"width\")) {\n    //     object.width =\n    //       options.json && !isFinite(message.width)\n    //         ? \"\" + message.width\n    //         : message.width;\n    //   }\n    //   if (message.height != null && message.hasOwnProperty(\"height\")) {\n    //     object.height =\n    //       options.json && !isFinite(message.height)\n    //         ? \"\" + message.height\n    //         : message.height;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for Layout\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.Layout\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.Layout\";\n    // }\n    /**\n     * Layout x.\n     * @member {number} x\n     * @memberof com.opensource.svga.Layout\n     * @instance\n     */\n    x = 0;\n    /**\n     * Layout y.\n     * @member {number} y\n     * @memberof com.opensource.svga.Layout\n     * @instance\n     */\n    y = 0;\n    /**\n     * Layout width.\n     * @member {number} width\n     * @memberof com.opensource.svga.Layout\n     * @instance\n     */\n    width = 0;\n    /**\n     * Layout height.\n     * @member {number} height\n     * @memberof com.opensource.svga.Layout\n     * @instance\n     */\n    height = 0;\n    /**\n     * Constructs a new Layout.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a Layout.\n     * @implements ILayout\n     * @constructor\n     * @param {com.opensource.svga.ILayout=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.x != null) {\n                this.x = properties.x;\n            }\n            if (properties.y != null) {\n                this.y = properties.y;\n            }\n            if (properties.width != null) {\n                this.width = properties.width;\n            }\n            if (properties.height != null) {\n                this.height = properties.height;\n            }\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\n// export class TransformWriter {\n//   /**\n//    * Encodes the specified Transform message. Does not implicitly {@link com.opensource.svga.Transform.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.Transform\n//    * @static\n//    * @param {com.opensource.svga.ITransform} message Transform message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: Transform, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.a != null && Object.hasOwn(message, \"a\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.a);\n//     }\n//     if (message.b != null && Object.hasOwn(message, \"b\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.b);\n//     }\n//     if (message.c != null && Object.hasOwn(message, \"c\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.c);\n//     }\n//     if (message.d != null && Object.hasOwn(message, \"d\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.d);\n//     }\n//     if (message.tx != null && Object.hasOwn(message, \"tx\")) {\n//       writer.uint32(/* id 5, wireType 5 =*/ 45).float(message.tx);\n//     }\n//     if (message.ty != null && Object.hasOwn(message, \"ty\")) {\n//       writer.uint32(/* id 6, wireType 5 =*/ 53).float(message.ty);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified Transform message, length delimited. Does not implicitly {@link com.opensource.svga.Transform.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.Transform\n//    * @static\n//    * @param {com.opensource.svga.ITransform} message Transform message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: Transform, writer: Writer): Writer {\n//     return Transform.encode(message, writer).ldelim();\n//   }\n// }\nexport default class Transform {\n    /**\n     * Decodes a Transform message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.Transform} Transform\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        let end = length == undefined ? reader.len : reader.pos + length;\n        let message = new Transform();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.a = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.b = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.c = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.d = reader.float();\n                    break;\n                }\n                case 5: {\n                    message.tx = reader.float();\n                    break;\n                }\n                case 6: {\n                    message.ty = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a Transform message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.Transform} Transform\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): Transform {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a Transform message.\n     * @function verify\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>) {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.a != null && message.hasOwnProperty(\"a\")) {\n    //     if (typeof message.a != \"number\") {\n    //       return \"a: number expected\";\n    //     }\n    //   }\n    //   if (message.b != null && message.hasOwnProperty(\"b\")) {\n    //     if (typeof message.b != \"number\") {\n    //       return \"b: number expected\";\n    //     }\n    //   }\n    //   if (message.c != null && message.hasOwnProperty(\"c\")) {\n    //     if (typeof message.c != \"number\") {\n    //       return \"c: number expected\";\n    //     }\n    //   }\n    //   if (message.d != null && message.hasOwnProperty(\"d\")) {\n    //     if (typeof message.d != \"number\") {\n    //       return \"d: number expected\";\n    //     }\n    //   }\n    //   if (message.tx != null && message.hasOwnProperty(\"tx\")) {\n    //     if (typeof message.tx != \"number\") {\n    //       return \"tx: number expected\";\n    //     }\n    //   }\n    //   if (message.ty != null && message.hasOwnProperty(\"ty\")) {\n    //     if (typeof message.ty != \"number\") {\n    //       return \"ty: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a Transform message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.Transform} Transform\n     */\n    // static fromObject(object: Record<string, any>): Transform {\n    //   if (object instanceof Transform) {\n    //     return object;\n    //   }\n    //   let message = new Transform();\n    //   if (object.a != null) {\n    //     message.a = +object.a;\n    //   }\n    //   if (object.b != null) {\n    //     message.b = +object.b;\n    //   }\n    //   if (object.c != null) {\n    //     message.c = +object.c;\n    //   }\n    //   if (object.d != null) {\n    //     message.d = +object.d;\n    //   }\n    //   if (object.tx != null) {\n    //     message.tx = +object.tx;\n    //   }\n    //   if (object.ty != null) {\n    //     message.ty = +object.ty;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a Transform message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {com.opensource.svga.Transform} message Transform\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: Transform,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   let object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.a = 0;\n    //     object.b = 0;\n    //     object.c = 0;\n    //     object.d = 0;\n    //     object.tx = 0;\n    //     object.ty = 0;\n    //   }\n    //   if (message.a != null && message.hasOwnProperty(\"a\")) {\n    //     object.a =\n    //       options.json && !isFinite(message.a) ? \"\" + message.a : message.a;\n    //   }\n    //   if (message.b != null && message.hasOwnProperty(\"b\")) {\n    //     object.b =\n    //       options.json && !isFinite(message.b) ? \"\" + message.b : message.b;\n    //   }\n    //   if (message.c != null && message.hasOwnProperty(\"c\")) {\n    //     object.c =\n    //       options.json && !isFinite(message.c) ? \"\" + message.c : message.c;\n    //   }\n    //   if (message.d != null && message.hasOwnProperty(\"d\")) {\n    //     object.d =\n    //       options.json && !isFinite(message.d) ? \"\" + message.d : message.d;\n    //   }\n    //   if (message.tx != null && message.hasOwnProperty(\"tx\")) {\n    //     object.tx =\n    //       options.json && !isFinite(message.tx) ? \"\" + message.tx : message.tx;\n    //   }\n    //   if (message.ty != null && message.hasOwnProperty(\"ty\")) {\n    //     object.ty =\n    //       options.json && !isFinite(message.ty) ? \"\" + message.ty : message.ty;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for Transform\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.Transform\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.Transform\";\n    // }\n    /**\n     * Transform a.\n     * @member {number} a\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    a = 0;\n    /**\n     * Transform b.\n     * @member {number} b\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    b = 0;\n    /**\n     * Transform c.\n     * @member {number} c\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    c = 0;\n    /**\n     * Transform d.\n     * @member {number} d\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    d = 0;\n    /**\n     * Transform tx.\n     * @member {number} tx\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    tx = 0;\n    /**\n     * Transform ty.\n     * @member {number} ty\n     * @memberof com.opensource.svga.Transform\n     * @instance\n     */\n    ty = 0;\n    /**\n     * Constructs a new Transform.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a Transform.\n     * @implements ITransform\n     * @constructor\n     * @param {com.opensource.svga.ITransform=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.a != null) {\n                this.a = properties.a;\n            }\n            if (properties.b != null) {\n                this.b = properties.b;\n            }\n            if (properties.c != null) {\n                this.c = properties.c;\n            }\n            if (properties.d != null) {\n                this.d = properties.d;\n            }\n            if (properties.tx != null) {\n                this.tx = properties.tx;\n            }\n            if (properties.ty != null) {\n                this.ty = properties.ty;\n            }\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\n// export class ShapeArgsWriter {\n//   /**\n//    * Encodes the specified ShapeArgs message. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeArgs.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IShapeArgs} message ShapeArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: ShapeArgs, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.d != null && Object.hasOwn(message, \"d\")) {\n//       writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.d);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified ShapeArgs message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeArgs.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IShapeArgs} message ShapeArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: ShapeArgs, writer: Writer): Writer {\n//     return ShapeArgs.encode(message, writer).ldelim();\n//   }\n// }\nexport default class ShapeArgs {\n    /**\n     * Decodes a ShapeArgs message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.ShapeArgs} ShapeArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new ShapeArgs();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.d = reader.string();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a ShapeArgs message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.ShapeArgs} ShapeArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): ShapeArgs {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a ShapeArgs message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.d != null && message.hasOwnProperty(\"d\")) {\n    //     if (!isString(message.d)) {\n    //       return \"d: string expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a ShapeArgs message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.ShapeArgs} ShapeArgs\n     */\n    // static fromObject(object: Record<string, any>): ShapeArgs {\n    //   if (object instanceof ShapeEntity.ShapeArgs) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity.ShapeArgs();\n    //   if (object.d != null) {\n    //     message.d = \"\" + object.d;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a ShapeArgs message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.ShapeArgs} message ShapeArgs\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: ShapeArgs,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.d = \"\";\n    //   }\n    //   if (message.d != null && message.hasOwnProperty(\"d\")) {\n    //     object.d = message.d;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for ShapeArgs\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.ShapeArgs\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.ShapeArgs\";\n    // }\n    d = \"\";\n    /**\n     * Constructs a new ShapeArgs.\n     * @memberof com.opensource.svga.ShapeEntity\n     * @classdesc Represents a ShapeArgs.\n     * @implements IShapeArgs\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.IShapeArgs=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.d != null) {\n                this.d = properties.d;\n            }\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\n// export class RectArgsWriter {\n//   /**\n//    * Encodes the specified RectArgs message. Does not implicitly {@link com.opensource.svga.ShapeEntity.RectArgs.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.RectArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IRectArgs} message RectArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: RectArgs, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.x != null && Object.hasOwn(message, \"x\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.x);\n//     }\n//     if (message.y != null && Object.hasOwn(message, \"y\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.y);\n//     }\n//     if (message.width != null && Object.hasOwn(message, \"width\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.width);\n//     }\n//     if (message.height != null && Object.hasOwn(message, \"height\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.height);\n//     }\n//     if (\n//       message.cornerRadius != null &&\n//       Object.hasOwn(message, \"cornerRadius\")\n//     ) {\n//       writer.uint32(/* id 5, wireType 5 =*/ 45).float(message.cornerRadius);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified RectArgs message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.RectArgs.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.RectArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IRectArgs} message RectArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: RectArgs, writer: Writer): Writer {\n//     return RectArgs.encode(message, writer).ldelim();\n//   }\n// }\nexport default class RectArgs {\n    /**\n     * Decodes a RectArgs message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.RectArgs} RectArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new RectArgs();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.x = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.y = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.width = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.height = reader.float();\n                    break;\n                }\n                case 5: {\n                    message.cornerRadius = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a RectArgs message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.RectArgs} RectArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): RectArgs {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a RectArgs message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     if (typeof message.x != \"number\") {\n    //       return \"x: number expected\";\n    //     }\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     if (typeof message.y != \"number\") {\n    //       return \"y: number expected\";\n    //     }\n    //   }\n    //   if (message.width != null && message.hasOwnProperty(\"width\")) {\n    //     if (typeof message.width != \"number\") {\n    //       return \"width: number expected\";\n    //     }\n    //   }\n    //   if (message.height != null && message.hasOwnProperty(\"height\")) {\n    //     if (typeof message.height != \"number\") {\n    //       return \"height: number expected\";\n    //     }\n    //   }\n    //   if (\n    //     message.cornerRadius != null &&\n    //     message.hasOwnProperty(\"cornerRadius\")\n    //   ) {\n    //     if (typeof message.cornerRadius != \"number\") {\n    //       return \"cornerRadius: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a RectArgs message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.RectArgs} RectArgs\n     */\n    // static fromObject(object: Record<string, any>): RectArgs {\n    //   if (object instanceof ShapeEntity.RectArgs) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity.RectArgs();\n    //   if (object.x != null) {\n    //     message.x = +object.x;\n    //   }\n    //   if (object.y != null) {\n    //     message.y = +object.y;\n    //   }\n    //   if (object.width != null) {\n    //     message.width = +object.width;\n    //   }\n    //   if (object.height != null) {\n    //     message.height = +object.height;\n    //   }\n    //   if (object.cornerRadius != null) {\n    //     message.cornerRadius = +object.cornerRadius;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a RectArgs message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.RectArgs} message RectArgs\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: RectArgs,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.x = 0;\n    //     object.y = 0;\n    //     object.width = 0;\n    //     object.height = 0;\n    //     object.cornerRadius = 0;\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     object.x =\n    //       options.json && !isFinite(message.x) ? \"\" + message.x : message.x;\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     object.y =\n    //       options.json && !isFinite(message.y) ? \"\" + message.y : message.y;\n    //   }\n    //   if (message.width != null && message.hasOwnProperty(\"width\")) {\n    //     object.width =\n    //       options.json && !isFinite(message.width)\n    //         ? \"\" + message.width\n    //         : message.width;\n    //   }\n    //   if (message.height != null && message.hasOwnProperty(\"height\")) {\n    //     object.height =\n    //       options.json && !isFinite(message.height)\n    //         ? \"\" + message.height\n    //         : message.height;\n    //   }\n    //   if (\n    //     message.cornerRadius != null &&\n    //     message.hasOwnProperty(\"cornerRadius\")\n    //   ) {\n    //     object.cornerRadius =\n    //       options.json && !isFinite(message.cornerRadius)\n    //         ? \"\" + message.cornerRadius\n    //         : message.cornerRadius;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for RectArgs\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.RectArgs\";\n    // }\n    /**\n     * RectArgs x.\n     * @member {number} x\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    x = 0;\n    /**\n     * RectArgs y.\n     * @member {number} y\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    y = 0;\n    /**\n     * RectArgs width.\n     * @member {number} width\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    width = 0;\n    /**\n     * RectArgs height.\n     * @member {number} height\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    height = 0;\n    /**\n     * RectArgs cornerRadius.\n     * @member {number} cornerRadius\n     * @memberof com.opensource.svga.ShapeEntity.RectArgs\n     * @instance\n     */\n    cornerRadius = 0;\n    /**\n     * Constructs a new RectArgs.\n     * @memberof com.opensource.svga.ShapeEntity\n     * @classdesc Represents a RectArgs.\n     * @implements IRectArgs\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.IRectArgs=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.x != null) {\n                this.x = properties.x;\n            }\n            if (properties.y != null) {\n                this.y = properties.y;\n            }\n            if (properties.width != null) {\n                this.width = properties.width;\n            }\n            if (properties.height != null) {\n                this.height = properties.height;\n            }\n            if (properties.cornerRadius != null) {\n                this.cornerRadius = properties.cornerRadius;\n            }\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\n// export class EllipseArgsWriter {\n//   /**\n//    * Encodes the specified EllipseArgs message. Does not implicitly {@link com.opensource.svga.ShapeEntity.EllipseArgs.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IEllipseArgs} message EllipseArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: EllipseArgs, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.x != null && Object.hasOwn(message, \"x\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.x);\n//     }\n//     if (message.y != null && Object.hasOwn(message, \"y\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.y);\n//     }\n//     if (message.radiusX != null && Object.hasOwn(message, \"radiusX\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.radiusX);\n//     }\n//     if (message.radiusY != null && Object.hasOwn(message, \"radiusY\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.radiusY);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified EllipseArgs message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.EllipseArgs.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IEllipseArgs} message EllipseArgs message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: EllipseArgs, writer: Writer): Writer {\n//     return EllipseArgs.encode(message, writer).ldelim();\n//   }\n// }\nexport default class EllipseArgs {\n    /**\n     * Decodes an EllipseArgs message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.EllipseArgs} EllipseArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new EllipseArgs();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.x = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.y = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.radiusX = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.radiusY = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes an EllipseArgs message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.EllipseArgs} EllipseArgs\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): EllipseArgs {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies an EllipseArgs message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     if (typeof message.x != \"number\") {\n    //       return \"x: number expected\";\n    //     }\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     if (typeof message.y != \"number\") {\n    //       return \"y: number expected\";\n    //     }\n    //   }\n    //   if (message.radiusX != null && message.hasOwnProperty(\"radiusX\")) {\n    //     if (typeof message.radiusX != \"number\") {\n    //       return \"radiusX: number expected\";\n    //     }\n    //   }\n    //   if (message.radiusY != null && message.hasOwnProperty(\"radiusY\")) {\n    //     if (typeof message.radiusY != \"number\") {\n    //       return \"radiusY: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates an EllipseArgs message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.EllipseArgs} EllipseArgs\n     */\n    // static fromObject(object: Record<string, any>): EllipseArgs {\n    //   if (object instanceof ShapeEntity.EllipseArgs) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity.EllipseArgs();\n    //   if (object.x != null) {\n    //     message.x = +object.x;\n    //   }\n    //   if (object.y != null) {\n    //     message.y = +object.y;\n    //   }\n    //   if (object.radiusX != null) {\n    //     message.radiusX = +object.radiusX;\n    //   }\n    //   if (object.radiusY != null) {\n    //     message.radiusY = +object.radiusY;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from an EllipseArgs message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.EllipseArgs} message EllipseArgs\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: EllipseArgs,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.x = 0;\n    //     object.y = 0;\n    //     object.radiusX = 0;\n    //     object.radiusY = 0;\n    //   }\n    //   if (message.x != null && message.hasOwnProperty(\"x\")) {\n    //     object.x =\n    //       options.json && !isFinite(message.x) ? \"\" + message.x : message.x;\n    //   }\n    //   if (message.y != null && message.hasOwnProperty(\"y\")) {\n    //     object.y =\n    //       options.json && !isFinite(message.y) ? \"\" + message.y : message.y;\n    //   }\n    //   if (message.radiusX != null && message.hasOwnProperty(\"radiusX\")) {\n    //     object.radiusX =\n    //       options.json && !isFinite(message.radiusX)\n    //         ? \"\" + message.radiusX\n    //         : message.radiusX;\n    //   }\n    //   if (message.radiusY != null && message.hasOwnProperty(\"radiusY\")) {\n    //     object.radiusY =\n    //       options.json && !isFinite(message.radiusY)\n    //         ? \"\" + message.radiusY\n    //         : message.radiusY;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for EllipseArgs\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.EllipseArgs\";\n    // }\n    /**\n     * EllipseArgs x.\n     * @member {number} x\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @instance\n     */\n    x = 0;\n    /**\n     * EllipseArgs y.\n     * @member {number} y\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @instance\n     */\n    y = 0;\n    /**\n     * EllipseArgs radiusX.\n     * @member {number} radiusX\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @instance\n     */\n    radiusX = 0;\n    /**\n     * EllipseArgs radiusY.\n     * @member {number} radiusY\n     * @memberof com.opensource.svga.ShapeEntity.EllipseArgs\n     * @instance\n     */\n    radiusY = 0;\n    /**\n     * Constructs a new EllipseArgs.\n     * @memberof com.opensource.svga.ShapeEntity\n     * @classdesc Represents an EllipseArgs.\n     * @implements IEllipseArgs\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.IEllipseArgs=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.x != null) {\n                this.x = properties.x;\n            }\n            if (properties.y != null) {\n                this.y = properties.y;\n            }\n            if (properties.radiusX != null) {\n                this.radiusX = properties.radiusX;\n            }\n            if (properties.radiusY != null) {\n                this.radiusY = properties.radiusY;\n            }\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\n// export class RGBAColorWriter {\n//   /**\n//    * Encodes the specified RGBAColor message. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor} message RGBAColor message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: RGBAColor, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.r != null && Object.hasOwn(message, \"r\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.r);\n//     }\n//     if (message.g != null && Object.hasOwn(message, \"g\")) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.g);\n//     }\n//     if (message.b != null && Object.hasOwn(message, \"b\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.b);\n//     }\n//     if (message.a != null && Object.hasOwn(message, \"a\")) {\n//       writer.uint32(/* id 4, wireType 5 =*/ 37).float(message.a);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified RGBAColor message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor} message RGBAColor message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: RGBAColor, writer: Writer): Writer {\n//     return RGBAColor.encode(message, writer).ldelim();\n//   }\n// }\nexport default class RGBAColor {\n    /**\n     * Decodes a RGBAColor message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} RGBAColor\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new RGBAColor();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.r = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.g = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.b = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.a = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a RGBAColor message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} RGBAColor\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): RGBAColor {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a RGBAColor message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.r != null && message.hasOwnProperty(\"r\")) {\n    //     if (typeof message.r != \"number\") {\n    //       return \"r: number expected\";\n    //     }\n    //   }\n    //   if (message.g != null && message.hasOwnProperty(\"g\")) {\n    //     if (typeof message.g != \"number\") {\n    //       return \"g: number expected\";\n    //     }\n    //   }\n    //   if (message.b != null && message.hasOwnProperty(\"b\")) {\n    //     if (typeof message.b != \"number\") {\n    //       return \"b: number expected\";\n    //     }\n    //   }\n    //   if (message.a != null && message.hasOwnProperty(\"a\")) {\n    //     if (typeof message.a != \"number\") {\n    //       return \"a: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a RGBAColor message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} RGBAColor\n     */\n    // static fromObject(object: Record<string, any>): RGBAColor {\n    //   if (object instanceof RGBAColor) {\n    //     return object;\n    //   }\n    //   const message = new RGBAColor();\n    //   if (object.r != null) {\n    //     message.r = +object.r;\n    //   }\n    //   if (object.g != null) {\n    //     message.g = +object.g;\n    //   }\n    //   if (object.b != null) {\n    //     message.b = +object.b;\n    //   }\n    //   if (object.a != null) {\n    //     message.a = +object.a;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a RGBAColor message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} message RGBAColor\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: RGBAColor,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.r = 0;\n    //     object.g = 0;\n    //     object.b = 0;\n    //     object.a = 0;\n    //   }\n    //   if (message.r != null && message.hasOwnProperty(\"r\")) {\n    //     object.r =\n    //       options.json && !isFinite(message.r) ? \"\" + message.r : message.r;\n    //   }\n    //   if (message.g != null && message.hasOwnProperty(\"g\")) {\n    //     object.g =\n    //       options.json && !isFinite(message.g) ? \"\" + message.g : message.g;\n    //   }\n    //   if (message.b != null && message.hasOwnProperty(\"b\")) {\n    //     object.b =\n    //       options.json && !isFinite(message.b) ? \"\" + message.b : message.b;\n    //   }\n    //   if (message.a != null && message.hasOwnProperty(\"a\")) {\n    //     object.a =\n    //       options.json && !isFinite(message.a) ? \"\" + message.a : message.a;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for RGBAColor\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return (\n    //     typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\"\n    //   );\n    // }\n    /**\n     * RGBAColor r.\n     * @member {number} r\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @instance\n     */\n    r = 0;\n    /**\n     * RGBAColor g.\n     * @member {number} g\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @instance\n     */\n    g = 0;\n    /**\n     * RGBAColor b.\n     * @member {number} b\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @instance\n     */\n    b = 0;\n    /**\n     * RGBAColor a.\n     * @member {number} a\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\n     * @instance\n     */\n    a = 0;\n    /**\n     * Constructs a new RGBAColor.\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @classdesc Represents a RGBAColor.\n     * @implements IRGBAColor\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.r != null) {\n                this.r = properties.r;\n            }\n            if (properties.g != null) {\n                this.g = properties.g;\n            }\n            if (properties.b != null) {\n                this.b = properties.b;\n            }\n            if (properties.a != null) {\n                this.a = properties.a;\n            }\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\nimport RGBAColor from \"./RGBAColor\";\n// export class ShapeStyleWriter {\n//   /**\n//    * Encodes the specified ShapeStyle message. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeStyle.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IShapeStyle} message ShapeStyle message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: ShapeStyle, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.fill != null && Object.hasOwn(message, \"fill\")) {\n//       RGBAColor.encode(\n//         message.fill,\n//         writer.uint32(/* id 1, wireType 2 =*/ 10).fork()\n//       ).ldelim();\n//     }\n//     if (message.stroke != null && Object.hasOwn(message, \"stroke\")) {\n//       RGBAColor.encode(\n//         message.stroke,\n//         writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n//       ).ldelim();\n//     }\n//     if (message.strokeWidth != null && Object.hasOwn(message, \"strokeWidth\")) {\n//       writer.uint32(/* id 3, wireType 5 =*/ 29).float(message.strokeWidth);\n//     }\n//     if (message.lineCap != null && Object.hasOwn(message, \"lineCap\")) {\n//       writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineCap);\n//     }\n//     if (message.lineJoin != null && Object.hasOwn(message, \"lineJoin\")) {\n//       writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.lineJoin);\n//     }\n//     if (message.miterLimit != null && Object.hasOwn(message, \"miterLimit\")) {\n//       writer.uint32(/* id 6, wireType 5 =*/ 53).float(message.miterLimit);\n//     }\n//     if (message.lineDashI != null && Object.hasOwn(message, \"lineDashI\")) {\n//       writer.uint32(/* id 7, wireType 5 =*/ 61).float(message.lineDashI);\n//     }\n//     if (message.lineDashII != null && Object.hasOwn(message, \"lineDashII\")) {\n//       writer.uint32(/* id 8, wireType 5 =*/ 69).float(message.lineDashII);\n//     }\n//     if (message.lineDashIII != null && Object.hasOwn(message, \"lineDashIII\")) {\n//       writer.uint32(/* id 9, wireType 5 =*/ 77).float(message.lineDashIII);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified ShapeStyle message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.ShapeStyle.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n//    * @static\n//    * @param {com.opensource.svga.ShapeEntity.IShapeStyle} message ShapeStyle message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: ShapeStyle, writer: Writer): Writer {\n//     return ShapeStyle.encode(message, writer).ldelim();\n//   }\n// }\nexport default class ShapeStyle {\n    /**\n     * Decodes a ShapeStyle message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle} ShapeStyle\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new ShapeStyle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.fill = RGBAColor.decode(reader, reader.uint32());\n                    break;\n                }\n                case 2: {\n                    message.stroke = RGBAColor.decode(reader, reader.uint32());\n                    break;\n                }\n                case 3: {\n                    message.strokeWidth = reader.float();\n                    break;\n                }\n                case 4: {\n                    message.lineCap = reader.int32();\n                    break;\n                }\n                case 5: {\n                    message.lineJoin = reader.int32();\n                    break;\n                }\n                case 6: {\n                    message.miterLimit = reader.float();\n                    break;\n                }\n                case 7: {\n                    message.lineDashI = reader.float();\n                    break;\n                }\n                case 8: {\n                    message.lineDashII = reader.float();\n                    break;\n                }\n                case 9: {\n                    message.lineDashIII = reader.float();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a ShapeStyle message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle} ShapeStyle\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): ShapeStyle {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a ShapeStyle message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.fill != null && message.hasOwnProperty(\"fill\")) {\n    //     const error = RGBAColor.verify(message.fill);\n    //     if (error) {\n    //       return \"fill.\" + error;\n    //     }\n    //   }\n    //   if (message.stroke != null && message.hasOwnProperty(\"stroke\")) {\n    //     const error = RGBAColor.verify(message.stroke);\n    //     if (error) {\n    //       return \"stroke.\" + error;\n    //     }\n    //   }\n    //   if (message.strokeWidth != null && message.hasOwnProperty(\"strokeWidth\")) {\n    //     if (typeof message.strokeWidth != \"number\") {\n    //       return \"strokeWidth: number expected\";\n    //     }\n    //   }\n    //   if (message.lineCap != null && message.hasOwnProperty(\"lineCap\"))\n    //     switch (message.lineCap) {\n    //       default:\n    //         return \"lineCap: enum value expected\";\n    //       case 0:\n    //       case 1:\n    //       case 2:\n    //         break;\n    //     }\n    //   if (message.lineJoin != null && message.hasOwnProperty(\"lineJoin\"))\n    //     switch (message.lineJoin) {\n    //       default:\n    //         return \"lineJoin: enum value expected\";\n    //       case 0:\n    //       case 1:\n    //       case 2:\n    //         break;\n    //     }\n    //   if (message.miterLimit != null && message.hasOwnProperty(\"miterLimit\")) {\n    //     if (typeof message.miterLimit != \"number\") {\n    //       return \"miterLimit: number expected\";\n    //     }\n    //   }\n    //   if (message.lineDashI != null && message.hasOwnProperty(\"lineDashI\")) {\n    //     if (typeof message.lineDashI != \"number\") {\n    //       return \"lineDashI: number expected\";\n    //     }\n    //   }\n    //   if (message.lineDashII != null && message.hasOwnProperty(\"lineDashII\")) {\n    //     if (typeof message.lineDashII != \"number\") {\n    //       return \"lineDashII: number expected\";\n    //     }\n    //   }\n    //   if (message.lineDashIII != null && message.hasOwnProperty(\"lineDashIII\")) {\n    //     if (typeof message.lineDashIII != \"number\") {\n    //       return \"lineDashIII: number expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a ShapeStyle message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity.ShapeStyle} ShapeStyle\n     */\n    // static fromObject(object: Record<string, any>): ShapeStyle {\n    //   if (object instanceof ShapeEntity.ShapeStyle) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity.ShapeStyle();\n    //   if (object.fill != null) {\n    //     if (typeof object.fill != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.ShapeStyle.fill: object expected\"\n    //       );\n    //     }\n    //     message.fill = RGBAColor.fromObject(object.fill);\n    //   }\n    //   if (object.stroke != null) {\n    //     if (typeof object.stroke != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.ShapeStyle.stroke: object expected\"\n    //       );\n    //     }\n    //     message.stroke = RGBAColor.fromObject(\n    //       object.stroke\n    //     );\n    //   }\n    //   if (object.strokeWidth != null) {\n    //     message.strokeWidth = Number(object.strokeWidth);\n    //   }\n    //   switch (object.lineCap) {\n    //     default:\n    //       if (typeof object.lineCap == \"number\") {\n    //         message.lineCap = object.lineCap;\n    //         break;\n    //       }\n    //       break;\n    //     case \"LineCap_BUTT\":\n    //     case 0:\n    //       message.lineCap = 0;\n    //       break;\n    //     case \"LineCap_ROUND\":\n    //     case 1:\n    //       message.lineCap = 1;\n    //       break;\n    //     case \"LineCap_SQUARE\":\n    //     case 2:\n    //       message.lineCap = 2;\n    //       break;\n    //   }\n    //   switch (object.lineJoin) {\n    //     default:\n    //       if (typeof object.lineJoin == \"number\") {\n    //         message.lineJoin = object.lineJoin;\n    //         break;\n    //       }\n    //       break;\n    //     case \"LineJoin_MITER\":\n    //     case 0:\n    //       message.lineJoin = 0;\n    //       break;\n    //     case \"LineJoin_ROUND\":\n    //     case 1:\n    //       message.lineJoin = 1;\n    //       break;\n    //     case \"LineJoin_BEVEL\":\n    //     case 2:\n    //       message.lineJoin = 2;\n    //       break;\n    //   }\n    //   if (object.miterLimit != null) {\n    //     message.miterLimit = +object.miterLimit;\n    //   }\n    //   if (object.lineDashI != null) {\n    //     message.lineDashI = +object.lineDashI;\n    //   }\n    //   if (object.lineDashII != null) {\n    //     message.lineDashII = +object.lineDashII;\n    //   }\n    //   if (object.lineDashIII != null) {\n    //     message.lineDashIII = +object.lineDashIII;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a ShapeStyle message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {com.opensource.svga.ShapeEntity.ShapeStyle} message ShapeStyle\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: ShapeStyle,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.fill = null;\n    //     object.stroke = null;\n    //     object.strokeWidth = 0;\n    //     object.lineCap = options.enums == String ? \"LineCap_BUTT\" : 0;\n    //     object.lineJoin = options.enums == String ? \"LineJoin_MITER\" : 0;\n    //     object.miterLimit = 0;\n    //     object.lineDashI = 0;\n    //     object.lineDashII = 0;\n    //     object.lineDashIII = 0;\n    //   }\n    //   if (message.fill != null && message.hasOwnProperty(\"fill\")) {\n    //     object.fill = RGBAColor.toObject(\n    //       message.fill,\n    //       options\n    //     );\n    //   }\n    //   if (message.stroke != null && message.hasOwnProperty(\"stroke\")) {\n    //     object.stroke = RGBAColor.toObject(\n    //       message.stroke,\n    //       options\n    //     );\n    //   }\n    //   if (message.strokeWidth != null && message.hasOwnProperty(\"strokeWidth\")) {\n    //     object.strokeWidth =\n    //       options.json && !isFinite(message.strokeWidth)\n    //         ? \"\" + message.strokeWidth\n    //         : message.strokeWidth;\n    //   }\n    //   if (message.lineCap != null && message.hasOwnProperty(\"lineCap\")) {\n    //     object.lineCap =\n    //       options.enums == String\n    //         ? LineCap[message.lineCap] == undefined\n    //           ? message.lineCap\n    //           : LineCap[message.lineCap]\n    //         : message.lineCap;\n    //   }\n    //   if (message.lineJoin != null && message.hasOwnProperty(\"lineJoin\")) {\n    //     object.lineJoin =\n    //       options.enums == String\n    //         ? LineJoin[message.lineJoin] == undefined\n    //           ? message.lineJoin\n    //           : LineJoin[message.lineJoin]\n    //         : message.lineJoin;\n    //   }\n    //   if (message.miterLimit != null && message.hasOwnProperty(\"miterLimit\")) {\n    //     object.miterLimit =\n    //       options.json && !isFinite(message.miterLimit)\n    //         ? \"\" + message.miterLimit\n    //         : message.miterLimit;\n    //   }\n    //   if (message.lineDashI != null && message.hasOwnProperty(\"lineDashI\")) {\n    //     object.lineDashI =\n    //       options.json && !isFinite(message.lineDashI)\n    //         ? \"\" + message.lineDashI\n    //         : message.lineDashI;\n    //   }\n    //   if (message.lineDashII != null && message.hasOwnProperty(\"lineDashII\")) {\n    //     object.lineDashII =\n    //       options.json && !isFinite(message.lineDashII)\n    //         ? \"\" + message.lineDashII\n    //         : message.lineDashII;\n    //   }\n    //   if (message.lineDashIII != null && message.hasOwnProperty(\"lineDashIII\")) {\n    //     object.lineDashIII =\n    //       options.json && !isFinite(message.lineDashIII)\n    //         ? \"\" + message.lineDashIII\n    //         : message.lineDashIII;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for ShapeStyle\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity.ShapeStyle\";\n    // }\n    /**\n     * ShapeStyle fill.\n     * @member {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor|null|undefined} fill\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    fill = null;\n    /**\n     * ShapeStyle stroke.\n     * @member {com.opensource.svga.ShapeEntity.ShapeStyle.IRGBAColor|null|undefined} stroke\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    stroke = null;\n    /**\n     * ShapeStyle strokeWidth.\n     * @member {number} strokeWidth\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    strokeWidth = 0;\n    /**\n     * ShapeStyle lineCap.\n     * @member {com.opensource.svga.ShapeEntity.ShapeStyle.LineCap} lineCap\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineCap = 0;\n    /**\n     * ShapeStyle lineJoin.\n     * @member {com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin} lineJoin\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineJoin = 0;\n    /**\n     * ShapeStyle miterLimit.\n     * @member {number} miterLimit\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    miterLimit = 0;\n    /**\n     * ShapeStyle lineDashI.\n     * @member {number} lineDashI\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineDashI = 0;\n    /**\n     * ShapeStyle lineDashII.\n     * @member {number} lineDashII\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineDashII = 0;\n    /**\n     * ShapeStyle lineDashIII.\n     * @member {number} lineDashIII\n     * @memberof com.opensource.svga.ShapeEntity.ShapeStyle\n     * @instance\n     */\n    lineDashIII = 0;\n    /**\n     * Constructs a new ShapeStyle.\n     * @memberof com.opensource.svga.ShapeEntity\n     * @classdesc Represents a ShapeStyle.\n     * @implements IShapeStyle\n     * @constructor\n     * @param {com.opensource.svga.ShapeEntity.IShapeStyle=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.fill != null) {\n                this.fill = properties.fill;\n            }\n            if (properties.lineCap != null) {\n                this.lineCap = properties.lineCap;\n            }\n            if (properties.lineDashI != null) {\n                this.lineDashI = properties.lineDashI;\n            }\n            if (properties.lineDashII != null) {\n                this.lineDashII = properties.lineDashII;\n            }\n            if (properties.lineDashIII != null) {\n                this.lineDashIII = properties.lineDashIII;\n            }\n            if (properties.lineJoin != null) {\n                this.lineJoin = properties.lineJoin;\n            }\n            if (properties.miterLimit != null) {\n                this.miterLimit = properties.miterLimit;\n            }\n            if (properties.stroke != null) {\n                this.stroke = properties.stroke;\n            }\n            if (properties.strokeWidth != null) {\n                this.strokeWidth = properties.strokeWidth;\n            }\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\n// import Writer from \"../serialization/Writer\";\nimport Transform from \"./Transform\";\nimport ShapeArgs from \"./ShapeArgs\";\nimport RectArgs from \"./RectArgs\";\nimport EllipseArgs from \"./EllipseArgs\";\nimport ShapeStyle from \"./ShapeStyle\";\n// export class ShapeEntityWriter {\n//   /**\n//    * Encodes the specified ShapeEntity message. Does not implicitly {@link com.opensource.svga.ShapeEntity.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.ShapeEntity\n//    * @static\n//    * @param {com.opensource.svga.IShapeEntity} message ShapeEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: ShapeEntity, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.type != null && Object.hasOwn(message, \"type\")) {\n//       writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type);\n//     }\n//     if (message.shape != null && Object.hasOwn(message, \"shape\")) {\n//       ShapeArgs.encode(\n//         message.shape,\n//         writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n//       ).ldelim();\n//     }\n//     if (message.rect != null && Object.hasOwn(message, \"rect\")) {\n//       RectArgs.encode(\n//         message.rect,\n//         writer.uint32(/* id 3, wireType 2 =*/ 26).fork()\n//       ).ldelim();\n//     }\n//     if (message.ellipse != null && Object.hasOwn(message, \"ellipse\")) {\n//       EllipseArgs.encode(\n//         message.ellipse,\n//         writer.uint32(/* id 4, wireType 2 =*/ 34).fork()\n//       ).ldelim();\n//     }\n//     if (message.styles != null && Object.hasOwn(message, \"styles\")) {\n//       ShapeStyle.encode(\n//         message.styles,\n//         writer.uint32(/* id 10, wireType 2 =*/ 82).fork()\n//       ).ldelim();\n//     }\n//     if (message.transform != null && Object.hasOwn(message, \"transform\")) {\n//       Transform.encode(\n//         message.transform,\n//         writer.uint32(/* id 11, wireType 2 =*/ 90).fork()\n//       ).ldelim();\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified ShapeEntity message, length delimited. Does not implicitly {@link com.opensource.svga.ShapeEntity.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.ShapeEntity\n//    * @static\n//    * @param {com.opensource.svga.IShapeEntity} message ShapeEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: ShapeEntity, writer: Writer): Writer {\n//     return ShapeEntity.encode(message, writer).ldelim();\n//   }\n// }\nexport default class ShapeEntity {\n    /**\n     * Decodes a ShapeEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.ShapeEntity} ShapeEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new ShapeEntity();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.type = reader.int32();\n                    break;\n                }\n                case 2: {\n                    message.shape = ShapeArgs.decode(reader, reader.uint32());\n                    break;\n                }\n                case 3: {\n                    message.rect = RectArgs.decode(reader, reader.uint32());\n                    break;\n                }\n                case 4: {\n                    message.ellipse = EllipseArgs.decode(reader, reader.uint32());\n                    break;\n                }\n                case 10: {\n                    message.styles = ShapeStyle.decode(reader, reader.uint32());\n                    break;\n                }\n                case 11: {\n                    message.transform = Transform.decode(reader, reader.uint32());\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a ShapeEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.ShapeEntity} ShapeEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): ShapeEntity {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a ShapeEntity message.\n     * @function verify\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   const properties: Record<string, any> = {};\n    //   if (message.type != null && message.hasOwnProperty(\"type\"))\n    //     switch (message.type) {\n    //       default:\n    //         return \"type: enum value expected\";\n    //       case 0:\n    //       case 1:\n    //       case 2:\n    //       case 3:\n    //         break;\n    //     }\n    //   if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n    //     properties.args = 1;\n    //     {\n    //       let error = ShapeEntity.ShapeArgs.verify(message.shape);\n    //       if (error) {\n    //         return \"shape.\" + error;\n    //       }\n    //     }\n    //   }\n    //   if (message.rect != null && message.hasOwnProperty(\"rect\")) {\n    //     if (properties.args == 1) {\n    //       return \"args: multiple values\";\n    //     }\n    //     properties.args = 1;\n    //     {\n    //       const error = ShapeEntity.RectArgs.verify(message.rect);\n    //       if (error) {\n    //         return \"rect.\" + error;\n    //       }\n    //     }\n    //   }\n    //   if (message.ellipse != null && message.hasOwnProperty(\"ellipse\")) {\n    //     if (properties.args == 1) {\n    //       return \"args: multiple values\";\n    //     }\n    //     properties.args = 1;\n    //     const error = ShapeEntity.EllipseArgs.verify(message.ellipse);\n    //     if (error) {\n    //       return \"ellipse.\" + error;\n    //     }\n    //   }\n    //   if (message.styles != null && message.hasOwnProperty(\"styles\")) {\n    //     const error = ShapeEntity.ShapeStyle.verify(message.styles);\n    //     if (error) {\n    //       return \"styles.\" + error;\n    //     }\n    //   }\n    //   if (message.transform != null && message.hasOwnProperty(\"transform\")) {\n    //     const error = Transform.verify(message.transform);\n    //     if (error) {\n    //       return \"transform.\" + error;\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a ShapeEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.ShapeEntity} ShapeEntity\n     */\n    // static fromObject(object: Record<string, any>): ShapeEntity {\n    //   if (object instanceof ShapeEntity) {\n    //     return object;\n    //   }\n    //   const message = new ShapeEntity();\n    //   switch (object.type) {\n    //     default:\n    //       if (typeof object.type == \"number\") {\n    //         message.type = object.type;\n    //         break;\n    //       }\n    //       break;\n    //     case \"SHAPE\":\n    //     case 0:\n    //       message.type = 0;\n    //       break;\n    //     case \"RECT\":\n    //     case 1:\n    //       message.type = 1;\n    //       break;\n    //     case \"ELLIPSE\":\n    //     case 2:\n    //       message.type = 2;\n    //       break;\n    //     case \"KEEP\":\n    //     case 3:\n    //       message.type = 3;\n    //       break;\n    //   }\n    //   if (object.shape != null) {\n    //     if (typeof object.shape != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.shape: object expected\"\n    //       );\n    //     }\n    //     message.shape = ShapeArgs.fromObject(object.shape);\n    //   }\n    //   if (object.rect != null) {\n    //     if (typeof object.rect != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.rect: object expected\"\n    //       );\n    //     }\n    //     message.rect = RectArgs.fromObject(object.rect);\n    //   }\n    //   if (object.ellipse != null) {\n    //     if (typeof object.ellipse != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.ellipse: object expected\"\n    //       );\n    //     }\n    //     message.ellipse = EllipseArgs.fromObject(object.ellipse);\n    //   }\n    //   if (object.styles != null) {\n    //     if (typeof object.styles != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.styles: object expected\"\n    //       );\n    //     }\n    //     message.styles = ShapeStyle.fromObject(object.styles);\n    //   }\n    //   if (object.transform != null) {\n    //     if (typeof object.transform != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.ShapeEntity.transform: object expected\"\n    //       );\n    //     }\n    //     message.transform = Transform.fromObject(object.transform);\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a ShapeEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {com.opensource.svga.ShapeEntity} message ShapeEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: ShapeEntity,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.type = options.enums == String ? \"SHAPE\" : 0;\n    //     object.styles = null;\n    //     object.transform = null;\n    //   }\n    //   if (message.type != null && message.hasOwnProperty(\"type\")) {\n    //     object.type =\n    //       options.enums == String\n    //         ? ShapeType[message.type] == undefined\n    //           ? message.type\n    //           : ShapeType[message.type]\n    //         : message.type;\n    //   }\n    //   if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n    //     object.shape = ShapeEntity.ShapeArgs.toObject(message.shape, options);\n    //     if (options.oneofs) {\n    //       object.args = \"shape\";\n    //     }\n    //   }\n    //   if (message.rect != null && message.hasOwnProperty(\"rect\")) {\n    //     object.rect = ShapeEntity.RectArgs.toObject(message.rect, options);\n    //     if (options.oneofs) {\n    //       object.args = \"rect\";\n    //     }\n    //   }\n    //   if (message.ellipse != null && message.hasOwnProperty(\"ellipse\")) {\n    //     object.ellipse = ShapeEntity.EllipseArgs.toObject(\n    //       message.ellipse,\n    //       options\n    //     );\n    //     if (options.oneofs) {\n    //       object.args = \"ellipse\";\n    //     }\n    //   }\n    //   if (message.styles != null && message.hasOwnProperty(\"styles\")) {\n    //     object.styles = ShapeEntity.ShapeStyle.toObject(message.styles, options);\n    //   }\n    //   if (message.transform != null && message.hasOwnProperty(\"transform\")) {\n    //     object.transform = Transform.toObject(message.transform, options);\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for ShapeEntity\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.ShapeEntity\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.ShapeEntity\";\n    // }\n    /**\n     * ShapeEntity type.\n     * @member {com.opensource.svga.ShapeEntity.ShapeType} type\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    type = 0;\n    /**\n     * ShapeEntity shape.\n     * @member {com.opensource.svga.ShapeEntity.IShapeArgs|null|undefined} shape\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    shape = null;\n    /**\n     * ShapeEntity rect.\n     * @member {com.opensource.svga.ShapeEntity.IRectArgs|null|undefined} rect\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    rect = null;\n    /**\n     * ShapeEntity ellipse.\n     * @member {com.opensource.svga.ShapeEntity.IEllipseArgs|null|undefined} ellipse\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    ellipse = null;\n    /**\n     * ShapeEntity styles.\n     * @member {com.opensource.svga.ShapeEntity.IShapeStyle|null|undefined} styles\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    styles = null;\n    /**\n     * ShapeEntity transform.\n     * @member {com.opensource.svga.ITransform|null|undefined} transform\n     * @memberof com.opensource.svga.ShapeEntity\n     * @instance\n     */\n    transform = null;\n    $oneOfFields = [\n        \"shape\",\n        \"rect\",\n        \"ellipse\",\n    ];\n    $fieldMap = {};\n    get args() {\n        const keys = Object.keys(this);\n        for (let i = keys.length - 1; i > -1; --i) {\n            const key = keys[i];\n            const value = this[key];\n            if (this.$fieldMap[key] == 1 && value != null) {\n                return key;\n            }\n        }\n        return \"\";\n    }\n    set args(name) {\n        for (var i = 0; i < this.$oneOfFields.length; ++i) {\n            const key = this.$oneOfFields[i];\n            if (key != name) {\n                delete this[key];\n            }\n        }\n    }\n    /**\n     * Constructs a new ShapeEntity.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a ShapeEntity.\n     * @implements IShapeEntity\n     * @constructor\n     * @param {com.opensource.svga.IShapeEntity=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.type != null) {\n                this.type = properties.type;\n            }\n            if (properties.ellipse != null) {\n                this.ellipse = properties.ellipse;\n            }\n            if (properties.rect != null) {\n                this.rect = properties.rect;\n            }\n            if (properties.shape != null) {\n                this.shape = properties.shape;\n            }\n            if (properties.styles != null) {\n                this.styles = properties.styles;\n            }\n            if (properties.transform != null) {\n                this.transform = properties.transform;\n            }\n        }\n        for (var i = 0; i < this.$oneOfFields.length; ++i) {\n            this.$fieldMap[this.$oneOfFields[i]] = 1;\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\n// import Writer from \"../serialization/Writer\";\nimport Layout from \"./Layout\";\nimport Transform from \"./Transform\";\nimport ShapeEntity from \"./ShapeEntity\";\n// export class FrameEntityWriter {\n//   /**\n//    * Encodes the specified FrameEntity message. Does not implicitly {@link com.opensource.svga.FrameEntity.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.FrameEntity\n//    * @static\n//    * @param {com.opensource.svga.IFrameEntity} message FrameEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: FrameEntity, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.alpha != null && Object.hasOwn(message, \"alpha\")) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.alpha);\n//     }\n//     if (message.layout != null && Object.hasOwn(message, \"layout\")) {\n//       Layout.encode(\n//         message.layout,\n//         writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n//       ).ldelim();\n//     }\n//     if (message.transform != null && Object.hasOwn(message, \"transform\")) {\n//       Transform.encode(\n//         message.transform,\n//         writer.uint32(/* id 3, wireType 2 =*/ 26).fork()\n//       ).ldelim();\n//     }\n//     if (message.clipPath != null && Object.hasOwn(message, \"clipPath\")) {\n//       writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.clipPath);\n//     }\n//     if (message.shapes != null && message.shapes.length) {\n//       for (let i = 0; i < message.shapes.length; ++i) {\n//         ShapeEntity.encode(\n//           message.shapes[i],\n//           writer.uint32(/* id 5, wireType 2 =*/ 42).fork()\n//         ).ldelim();\n//       }\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified FrameEntity message, length delimited. Does not implicitly {@link com.opensource.svga.FrameEntity.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.FrameEntity\n//    * @static\n//    * @param {com.opensource.svga.IFrameEntity} message FrameEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: FrameEntity, writer: Writer): Writer {\n//     return FrameEntity.encode(message, writer).ldelim();\n//   }\n// }\nexport default class FrameEntity {\n    /**\n     * Decodes a FrameEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.FrameEntity} FrameEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new FrameEntity();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.alpha = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.layout = Layout.decode(reader, reader.uint32());\n                    break;\n                }\n                case 3: {\n                    message.transform = Transform.decode(reader, reader.uint32());\n                    break;\n                }\n                case 4: {\n                    message.clipPath = reader.string();\n                    break;\n                }\n                case 5: {\n                    if (!(message.shapes && message.shapes.length)) {\n                        message.shapes = [];\n                    }\n                    message.shapes.push(ShapeEntity.decode(reader, reader.uint32()));\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a FrameEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.FrameEntity} FrameEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): FrameEntity {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a FrameEntity message.\n     * @function verify\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.alpha != null && message.hasOwnProperty(\"alpha\")) {\n    //     if (typeof message.alpha != \"number\") {\n    //       return \"alpha: number expected\";\n    //     }\n    //   }\n    //   if (message.layout != null && message.hasOwnProperty(\"layout\")) {\n    //     const error = Layout.verify(message.layout);\n    //     if (error) {\n    //       return \"layout.\" + error;\n    //     }\n    //   }\n    //   if (message.transform != null && message.hasOwnProperty(\"transform\")) {\n    //     const error = Transform.verify(message.transform);\n    //     if (error) {\n    //       return \"transform.\" + error;\n    //     }\n    //   }\n    //   if (message.clipPath != null && message.hasOwnProperty(\"clipPath\")) {\n    //     if (!isString(message.clipPath)) {\n    //       return \"clipPath: string expected\";\n    //     }\n    //   }\n    //   if (message.shapes != null && message.hasOwnProperty(\"shapes\")) {\n    //     if (!Array.isArray(message.shapes)) {\n    //       return \"shapes: array expected\";\n    //     }\n    //     for (let i = 0; i < message.shapes.length; ++i) {\n    //       const error = ShapeEntity.verify(message.shapes[i]);\n    //       if (error) {\n    //         return \"shapes.\" + error;\n    //       }\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a FrameEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.FrameEntity} FrameEntity\n     */\n    // static fromObject(object: Record<string, any>): FrameEntity {\n    //   if (object instanceof FrameEntity) {\n    //     return object;\n    //   }\n    //   const message = new FrameEntity();\n    //   if (object.alpha != null) {\n    //     message.alpha = +object.alpha;\n    //   }\n    //   if (object.layout != null) {\n    //     if (typeof object.layout != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.FrameEntity.layout: object expected\"\n    //       );\n    //     }\n    //     message.layout = Layout.fromObject(object.layout);\n    //   }\n    //   if (object.transform != null) {\n    //     if (typeof object.transform != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.FrameEntity.transform: object expected\"\n    //       );\n    //     }\n    //     message.transform = Transform.fromObject(object.transform);\n    //   }\n    //   if (object.clipPath != null) {\n    //     message.clipPath = String(object.clipPath);\n    //   }\n    //   if (object.shapes) {\n    //     if (!Array.isArray(object.shapes)) {\n    //       throw TypeError(\n    //         \".com.opensource.svga.FrameEntity.shapes: array expected\"\n    //       );\n    //     }\n    //     message.shapes = [];\n    //     for (let i = 0; i < object.shapes.length; ++i) {\n    //       if (typeof object.shapes[i] != \"object\") {\n    //         throw TypeError(\n    //           \".com.opensource.svga.FrameEntity.shapes: object expected\"\n    //         );\n    //       }\n    //       message.shapes[i] = ShapeEntity.fromObject(object.shapes[i]);\n    //     }\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a FrameEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {com.opensource.svga.FrameEntity} message FrameEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: FrameEntity,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.arrays || options.defaults) {\n    //     object.shapes = [];\n    //   }\n    //   if (options.defaults) {\n    //     object.alpha = 0;\n    //     object.layout = null;\n    //     object.transform = null;\n    //     object.clipPath = \"\";\n    //   }\n    //   if (message.alpha != null && message.hasOwnProperty(\"alpha\")) {\n    //     object.alpha =\n    //       options.json && !isFinite(message.alpha)\n    //         ? \"\" + message.alpha\n    //         : message.alpha;\n    //   }\n    //   if (message.layout != null && message.hasOwnProperty(\"layout\")) {\n    //     object.layout = Layout.toObject(message.layout, options);\n    //   }\n    //   if (message.transform != null && message.hasOwnProperty(\"transform\")) {\n    //     object.transform = Transform.toObject(message.transform, options);\n    //   }\n    //   if (message.clipPath != null && message.hasOwnProperty(\"clipPath\")) {\n    //     object.clipPath = message.clipPath;\n    //   }\n    //   if (message.shapes && message.shapes.length) {\n    //     object.shapes = [];\n    //     for (let j = 0; j < message.shapes.length; ++j) {\n    //       object.shapes[j] = ShapeEntity.toObject(message.shapes[j], options);\n    //     }\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for FrameEntity\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.FrameEntity\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.FrameEntity\";\n    // }\n    /**\n     * FrameEntity shapes.\n     * @member {Array.<com.opensource.svga.IShapeEntity>} shapes\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    shapes = [];\n    /**\n     * FrameEntity alpha.\n     * @member {number} alpha\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    alpha = 0;\n    /**\n     * FrameEntity layout.\n     * @member {com.opensource.svga.ILayout|null|undefined} layout\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    layout = null;\n    /**\n     * FrameEntity transform.\n     * @member {com.opensource.svga.ITransform|null|undefined} transform\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    transform = null;\n    /**\n     * FrameEntity clipPath.\n     * @member {string} clipPath\n     * @memberof com.opensource.svga.FrameEntity\n     * @instance\n     */\n    clipPath = \"\";\n    /**\n     * Constructs a new FrameEntity.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a FrameEntity.\n     * @implements IFrameEntity\n     * @constructor\n     * @param {com.opensource.svga.IFrameEntity=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.alpha != null) {\n                this.alpha = properties.alpha;\n            }\n            if (properties.clipPath != null) {\n                this.clipPath = properties.clipPath;\n            }\n            if (properties.layout != null) {\n                this.layout = properties.layout;\n            }\n            if (properties.shapes != null) {\n                this.shapes = properties.shapes;\n            }\n            if (properties.transform != null) {\n                this.transform = properties.transform;\n            }\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\n// import Writer from \"../serialization/Writer\";\nimport FrameEntity from \"./FrameEntity\";\n// export class SpriteEntityWriter {\n//   /**\n//    * Encodes the specified SpriteEntity message. Does not implicitly {@link com.opensource.svga.SpriteEntity.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.SpriteEntity\n//    * @static\n//    * @param {com.opensource.svga.ISpriteEntity} message SpriteEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: SpriteEntity, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (message.imageKey != null && Object.hasOwn(message, \"imageKey\")) {\n//       writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.imageKey);\n//     }\n//     if (message.frames != null && message.frames.length) {\n//       for (let i = 0; i < message.frames.length; ++i) {\n//         FrameEntity.encode(\n//           message.frames[i],\n//           writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n//         ).ldelim();\n//       }\n//     }\n//     if (message.matteKey != null && Object.hasOwn(message, \"matteKey\")) {\n//       writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.matteKey);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified SpriteEntity message, length delimited. Does not implicitly {@link com.opensource.svga.SpriteEntity.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.SpriteEntity\n//    * @static\n//    * @param {com.opensource.svga.ISpriteEntity} message SpriteEntity message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: SpriteEntity, writer: Writer): Writer {\n//     return SpriteEntity.encode(message, writer).ldelim();\n//   }\n// }\nexport default class SpriteEntity {\n    /**\n     * Decodes a SpriteEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.SpriteEntity} SpriteEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new SpriteEntity();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.imageKey = reader.string();\n                    break;\n                }\n                case 2: {\n                    if (!(message.frames && message.frames.length)) {\n                        message.frames = [];\n                    }\n                    message.frames.push(FrameEntity.decode(reader, reader.uint32()));\n                    break;\n                }\n                case 3: {\n                    message.matteKey = reader.string();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a SpriteEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.SpriteEntity} SpriteEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): SpriteEntity {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a SpriteEntity message.\n     * @function verify\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.imageKey != null && message.hasOwnProperty(\"imageKey\")) {\n    //     if (!isString(message.imageKey)) {\n    //       return \"imageKey: string expected\";\n    //     }\n    //   }\n    //   if (message.frames != null && message.hasOwnProperty(\"frames\")) {\n    //     if (!Array.isArray(message.frames)) {\n    //       return \"frames: array expected\";\n    //     }\n    //     for (let i = 0; i < message.frames.length; ++i) {\n    //       const error = FrameEntity.verify(message.frames[i]);\n    //       if (error) {\n    //         return \"frames.\" + error;\n    //       }\n    //     }\n    //   }\n    //   if (message.matteKey != null && message.hasOwnProperty(\"matteKey\")) {\n    //     if (!isString(message.matteKey)) {\n    //       return \"matteKey: string expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a SpriteEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.SpriteEntity} SpriteEntity\n     */\n    // static fromObject(object: Record<string, any>): SpriteEntity {\n    //   if (object instanceof SpriteEntity) {\n    //     return object;\n    //   }\n    //   const message = new SpriteEntity();\n    //   if (object.imageKey != null) {\n    //     message.imageKey = \"\" + object.imageKey;\n    //   }\n    //   if (object.frames) {\n    //     if (!Array.isArray(object.frames)) {\n    //       throw TypeError(\n    //         \".com.opensource.svga.SpriteEntity.frames: array expected\"\n    //       );\n    //     }\n    //     message.frames = [];\n    //     for (let i = 0; i < object.frames.length; ++i) {\n    //       if (typeof object.frames[i] != \"object\") {\n    //         throw TypeError(\n    //           \".com.opensource.svga.SpriteEntity.frames: object expected\"\n    //         );\n    //       }\n    //       message.frames[i] = FrameEntity.fromObject(object.frames[i]);\n    //     }\n    //   }\n    //   if (object.matteKey != null) {\n    //     message.matteKey = \"\" + object.matteKey;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a SpriteEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {com.opensource.svga.SpriteEntity} message SpriteEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: SpriteEntity,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.arrays || options.defaults) {\n    //     object.frames = [];\n    //   }\n    //   if (options.defaults) {\n    //     object.imageKey = \"\";\n    //     object.matteKey = \"\";\n    //   }\n    //   if (message.imageKey != null && message.hasOwnProperty(\"imageKey\")) {\n    //     object.imageKey = message.imageKey;\n    //   }\n    //   if (message.frames && message.frames.length) {\n    //     object.frames = [];\n    //     for (let j = 0; j < message.frames.length; ++j) {\n    //       object.frames[j] = FrameEntity.toObject(message.frames[j], options);\n    //     }\n    //   }\n    //   if (message.matteKey != null && message.hasOwnProperty(\"matteKey\")) {\n    //     object.matteKey = message.matteKey;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for SpriteEntity\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.SpriteEntity\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.SpriteEntity\";\n    // }\n    /**\n     * SpriteEntity frames.\n     * @member {Array.<com.opensource.svga.IFrameEntity>} frames\n     * @memberof com.opensource.svga.SpriteEntity\n     * @instance\n     */\n    frames = [];\n    /**\n     * SpriteEntity imageKey.\n     * @member {string} imageKey\n     * @memberof com.opensource.svga.SpriteEntity\n     * @instance\n     */\n    imageKey = \"\";\n    /**\n     * SpriteEntity matteKey.\n     * @member {string} matteKey\n     * @memberof com.opensource.svga.SpriteEntity\n     * @instance\n     */\n    matteKey = \"\";\n    /**\n     * Constructs a new SpriteEntity.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a SpriteEntity.\n     * @implements ISpriteEntity\n     * @constructor\n     * @param {com.opensource.svga.ISpriteEntity=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.frames != null) {\n                this.frames = properties.frames;\n            }\n            if (properties.imageKey != null) {\n                this.imageKey = properties.imageKey;\n            }\n            if (properties.matteKey != null) {\n                this.matteKey = properties.matteKey;\n            }\n        }\n    }\n}\n","import Reader from \"../io/Reader\";\n// export class MovieParamsWriter {\n//   /**\n//    * Encodes the specified MovieParams message. Does not implicitly {@link com.opensource.svga.MovieParams.verify|verify} messages.\n//    * @function encode\n//    * @memberof com.opensource.svga.MovieParams\n//    * @static\n//    * @param {com.opensource.svga.IMovieParams} message MovieParams message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encode(message: MovieParams, writer: Writer): Writer {\n//     if (!writer) {\n//       writer = Writer.create();\n//     }\n//     if (\n//       message.viewBoxWidth != null &&\n//       Object.hasOwn(message, \"viewBoxWidth\")\n//     ) {\n//       writer.uint32(/* id 1, wireType 5 =*/ 13).float(message.viewBoxWidth);\n//     }\n//     if (\n//       message.viewBoxHeight != null &&\n//       Object.hasOwn(message, \"viewBoxHeight\")\n//     ) {\n//       writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.viewBoxHeight);\n//     }\n//     if (message.fps != null && Object.hasOwn(message, \"fps\")) {\n//       writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.fps);\n//     }\n//     if (message.frames != null && Object.hasOwn(message, \"frames\")) {\n//       writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.frames);\n//     }\n//     return writer;\n//   }\n//   /**\n//    * Encodes the specified MovieParams message, length delimited. Does not implicitly {@link com.opensource.svga.MovieParams.verify|verify} messages.\n//    * @function encodeDelimited\n//    * @memberof com.opensource.svga.MovieParams\n//    * @static\n//    * @param {com.opensource.svga.IMovieParams} message MovieParams message or plain object to encode\n//    * @param {$protobuf.Writer} [writer] Writer to encode to\n//    * @returns {$protobuf.Writer} Writer\n//    */\n//   static encodeDelimited(message: MovieParams, writer: Writer): Writer {\n//     return MovieParams.encode(message, writer).ldelim();\n//   }\n// }\nexport default class MovieParams {\n    /**\n     * Decodes a MovieParams message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.MovieParams} MovieParams\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        let end = length == undefined ? reader.len : reader.pos + length;\n        let message = new MovieParams();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.viewBoxWidth = reader.float();\n                    break;\n                }\n                case 2: {\n                    message.viewBoxHeight = reader.float();\n                    break;\n                }\n                case 3: {\n                    message.fps = reader.int32();\n                    break;\n                }\n                case 4: {\n                    message.frames = reader.int32();\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a MovieParams message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.MovieParams} MovieParams\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): MovieParams {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a MovieParams message.\n     * @function verify\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (\n    //     message.viewBoxWidth != null &&\n    //     message.hasOwnProperty(\"viewBoxWidth\")\n    //   ) {\n    //     if (typeof message.viewBoxWidth != \"number\") {\n    //       return \"viewBoxWidth: number expected\";\n    //     }\n    //   }\n    //   if (\n    //     message.viewBoxHeight != null &&\n    //     message.hasOwnProperty(\"viewBoxHeight\")\n    //   ) {\n    //     if (typeof message.viewBoxHeight != \"number\") {\n    //       return \"viewBoxHeight: number expected\";\n    //     }\n    //   }\n    //   if (message.fps != null && message.hasOwnProperty(\"fps\")) {\n    //     if (!isInteger(message.fps)) {\n    //       return \"fps: integer expected\";\n    //     }\n    //   }\n    //   if (message.frames != null && message.hasOwnProperty(\"frames\")) {\n    //     if (!isInteger(message.frames)) {\n    //       return \"frames: integer expected\";\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a MovieParams message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.MovieParams} MovieParams\n     */\n    // static fromObject(object: Record<string, any>): MovieParams {\n    //   if (object instanceof MovieParams) {\n    //     return object;\n    //   }\n    //   const message = new MovieParams();\n    //   if (object.viewBoxWidth != null) {\n    //     message.viewBoxWidth = +object.viewBoxWidth;\n    //   }\n    //   if (object.viewBoxHeight != null) {\n    //     message.viewBoxHeight = +object.viewBoxHeight;\n    //   }\n    //   if (object.fps != null) {\n    //     message.fps = object.fps | 0;\n    //   }\n    //   if (object.frames != null) {\n    //     message.frames = object.frames | 0;\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a MovieParams message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {com.opensource.svga.MovieParams} message MovieParams\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: MovieParams,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.defaults) {\n    //     object.viewBoxWidth = 0;\n    //     object.viewBoxHeight = 0;\n    //     object.fps = 0;\n    //     object.frames = 0;\n    //   }\n    //   if (\n    //     message.viewBoxWidth != null &&\n    //     message.hasOwnProperty(\"viewBoxWidth\")\n    //   ) {\n    //     object.viewBoxWidth =\n    //       options.json && !isFinite(message.viewBoxWidth)\n    //         ? \"\" + message.viewBoxWidth\n    //         : message.viewBoxWidth;\n    //   }\n    //   if (\n    //     message.viewBoxHeight != null &&\n    //     message.hasOwnProperty(\"viewBoxHeight\")\n    //   ) {\n    //     object.viewBoxHeight =\n    //       options.json && !isFinite(message.viewBoxHeight)\n    //         ? \"\" + message.viewBoxHeight\n    //         : message.viewBoxHeight;\n    //   }\n    //   if (message.fps != null && message.hasOwnProperty(\"fps\")) {\n    //     object.fps = message.fps;\n    //   }\n    //   if (message.frames != null && message.hasOwnProperty(\"frames\")) {\n    //     object.frames = message.frames;\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for MovieParams\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.MovieParams\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string): string {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.MovieParams\";\n    // }\n    /**\n     * MovieParams viewBoxWidth.\n     * @member {number} viewBoxWidth\n     * @memberof com.opensource.svga.MovieParams\n     * @instance\n     */\n    viewBoxWidth = 0;\n    /**\n     * MovieParams viewBoxHeight.\n     * @member {number} viewBoxHeight\n     * @memberof com.opensource.svga.MovieParams\n     * @instance\n     */\n    viewBoxHeight = 0;\n    /**\n     * MovieParams fps.\n     * @member {number} fps\n     * @memberof com.opensource.svga.MovieParams\n     * @instance\n     */\n    fps = 0;\n    /**\n     * MovieParams frames.\n     * @member {number} frames\n     * @memberof com.opensource.svga.MovieParams\n     * @instance\n     */\n    frames = 0;\n    /**\n     * Constructs a new MovieParams.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a MovieParams.\n     * @implements IMovieParams\n     * @constructor\n     * @param {com.opensource.svga.IMovieParams=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.viewBoxWidth != null) {\n                this.viewBoxWidth = properties.viewBoxWidth;\n            }\n            if (properties.viewBoxHeight != null) {\n                this.viewBoxHeight = properties.viewBoxHeight;\n            }\n            if (properties.fps != null) {\n                this.fps = properties.fps;\n            }\n            if (properties.frames != null) {\n                this.frames = properties.frames;\n            }\n        }\n    }\n}\n","// import base64 from \"@protobufjs/base64\";\nimport Reader from \"../io/Reader\";\n// import Writer from \"../serialization/Writer\";\nimport SpriteEntity from \"./SpriteEntity\";\nimport MovieParams from \"./MovieParams\";\nexport default class MovieEntity {\n    static EMPTY_OBJECT = Object.freeze({});\n    /**\n     * Decodes a MovieEntity message from the specified reader or buffer.\n     * @function decode\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {com.opensource.svga.MovieEntity} MovieEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    static decode(reader, length) {\n        reader = Reader.create(reader);\n        const end = length == undefined ? reader.len : reader.pos + length;\n        const message = new MovieEntity();\n        let key;\n        let value;\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    message.version = reader.string();\n                    break;\n                }\n                case 2: {\n                    message.params = MovieParams.decode(reader, reader.uint32());\n                    break;\n                }\n                case 3: {\n                    if (message.images == MovieEntity.EMPTY_OBJECT) {\n                        message.images = {};\n                    }\n                    const end2 = reader.uint32() + reader.pos;\n                    key = \"\";\n                    value = [];\n                    while (reader.pos < end2) {\n                        let tag2 = reader.uint32();\n                        switch (tag2 >>> 3) {\n                            case 1:\n                                key = reader.string();\n                                break;\n                            case 2:\n                                value = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag2 & 7);\n                                break;\n                        }\n                    }\n                    message.images[key] = value;\n                    break;\n                }\n                case 4: {\n                    if (!(message.sprites && message.sprites.length)) {\n                        message.sprites = [];\n                    }\n                    message.sprites.push(SpriteEntity.decode(reader, reader.uint32()));\n                    break;\n                }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Decodes a MovieEntity message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {com.opensource.svga.MovieEntity} MovieEntity\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    // static decodeDelimited(reader: Reader | Uint8Array): MovieEntity {\n    //   reader = Reader.create(reader);\n    //   return this.decode(reader, reader.uint32());\n    // }\n    /**\n     * Verifies a MovieEntity message.\n     * @function verify\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    // static verify(message: Record<string, any>): string | null {\n    //   if (typeof message != \"object\" || message == null) {\n    //     return \"object expected\";\n    //   }\n    //   if (message.version != null && message.hasOwnProperty(\"version\")) {\n    //     if (!isString(message.version)) {\n    //       return \"version: string expected\";\n    //     }\n    //   }\n    //   if (message.params != null && message.hasOwnProperty(\"params\")) {\n    //     const error = MovieParams.verify(message.params);\n    //     if (error) {\n    //       return \"params.\" + error;\n    //     }\n    //   }\n    //   if (message.images != null && message.hasOwnProperty(\"images\")) {\n    //     if (!isObject(message.images)) {\n    //       return \"images: object expected\";\n    //     }\n    //     const keys = Object.keys(message.images);\n    //     for (let i = 0; i < keys.length; ++i) {\n    //       const key = keys[i];\n    //       if (\n    //         !(\n    //           (message.images[key] &&\n    //             typeof message.images[key].length == \"number\") ||\n    //           isString(message.images[key])\n    //         )\n    //       ) {\n    //         return \"images: buffer{k:string} expected\";\n    //       }\n    //     }\n    //   }\n    //   if (message.sprites != null && message.hasOwnProperty(\"sprites\")) {\n    //     if (!Array.isArray(message.sprites)) {\n    //       return \"sprites: array expected\";\n    //     }\n    //     for (let i = 0; i < message.sprites.length; ++i) {\n    //       const error = SpriteEntity.verify(message.sprites[i]);\n    //       if (error) {\n    //         return \"sprites.\" + error;\n    //       }\n    //     }\n    //   }\n    //   return null;\n    // }\n    /**\n     * Creates a MovieEntity message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {com.opensource.svga.MovieEntity} MovieEntity\n     */\n    // static fromObject(object: Record<string, any>): MovieEntity {\n    //   if (object instanceof MovieEntity) {\n    //     return object;\n    //   }\n    //   const message = new MovieEntity();\n    //   if (object.version != null) {\n    //     message.version = \"\" + object.version;\n    //   }\n    //   if (object.params != null) {\n    //     if (typeof object.params != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.MovieEntity.params: object expected\"\n    //       );\n    //     }\n    //     message.params = MovieParams.fromObject(object.params);\n    //   }\n    //   if (object.images) {\n    //     if (typeof object.images != \"object\") {\n    //       throw TypeError(\n    //         \".com.opensource.svga.MovieEntity.images: object expected\"\n    //       );\n    //     }\n    //     message.images = {};\n    //     const keys = Object.keys(object.images);\n    //     for (let i = 0; i < keys.length; ++i) {\n    //       const key = keys[i];\n    //       if (typeof object.images[key] == \"string\") {\n    //         base64.decode(\n    //           object.images[key],\n    //           (message.images[key] = new Uint8Array(\n    //             base64.length(object.images[key])\n    //           )),\n    //           0\n    //         );\n    //       } else if (object.images[key].length >= 0) {\n    //         message.images[key] = object.images[key];\n    //       }\n    //     }\n    //   }\n    //   if (object.sprites) {\n    //     if (!Array.isArray(object.sprites)) {\n    //       throw TypeError(\n    //         \".com.opensource.svga.MovieEntity.sprites: array expected\"\n    //       );\n    //     }\n    //     message.sprites = [];\n    //     for (let i = 0; i < object.sprites.length; ++i) {\n    //       if (typeof object.sprites[i] != \"object\") {\n    //         throw TypeError(\n    //           \".com.opensource.svga.MovieEntity.sprites: object expected\"\n    //         );\n    //       }\n    //       message.sprites[i] = SpriteEntity.fromObject(object.sprites[i]);\n    //     }\n    //   }\n    //   return message;\n    // }\n    /**\n     * Creates a plain object from a MovieEntity message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {com.opensource.svga.MovieEntity} message MovieEntity\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    // static toObject(\n    //   message: MovieEntity,\n    //   options: Record<string, any>\n    // ): Record<string, any> {\n    //   if (!options) {\n    //     options = {};\n    //   }\n    //   const object: Record<string, any> = {};\n    //   if (options.arrays || options.defaults) {\n    //     object.sprites = [];\n    //   }\n    //   if (options.objects || options.defaults) {\n    //     object.images = {};\n    //   }\n    //   if (options.defaults) {\n    //     object.version = \"\";\n    //     object.params = null;\n    //   }\n    //   if (message.version != null && message.hasOwnProperty(\"version\")) {\n    //     object.version = message.version;\n    //   }\n    //   if (message.params != null && message.hasOwnProperty(\"params\")) {\n    //     object.params = MovieParams.toObject(message.params, options);\n    //   }\n    //   let keys2;\n    //   if (message.images && (keys2 = Object.keys(message.images)).length) {\n    //     object.images = {};\n    //     for (let j = 0; j < keys2.length; ++j) {\n    //       const key = keys2[j];\n    //       object.images[key] =\n    //         options.bytes == String\n    //           ? base64.encode(message.images[key], 0, message.images[key].length)\n    //           : options.bytes == Array\n    //           ? [...message.images[key]]\n    //           : message.images[key];\n    //     }\n    //   }\n    //   if (message.sprites && message.sprites.length) {\n    //     object.sprites = [];\n    //     for (let j = 0; j < message.sprites.length; ++j) {\n    //       object.sprites[j] = SpriteEntity.toObject(message.sprites[j], options);\n    //     }\n    //   }\n    //   return object;\n    // }\n    /**\n     * Gets the default type url for MovieEntity\n     * @function getTypeUrl\n     * @memberof com.opensource.svga.MovieEntity\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    // static getTypeUrl(typeUrlPrefix?: string) {\n    //   if (typeUrlPrefix == undefined) {\n    //     typeUrlPrefix = \"type.googleapis.com\";\n    //   }\n    //   return typeUrlPrefix + \"/com.opensource.svga.MovieEntity\";\n    // }\n    /**\n     * MovieEntity version.\n     * @member {string} version\n     * @memberof com.opensource.svga.MovieEntity\n     * @instance\n     */\n    version = \"\";\n    /**\n     * MovieEntity params.\n     * @member {com.opensource.svga.IMovieParams|null|undefined} params\n     * @memberof com.opensource.svga.MovieEntity\n     * @instance\n     */\n    params = null;\n    /**\n     * MovieEntity images.\n     * @member {Object.<string,Uint8Array>} images\n     * @memberof com.opensource.svga.MovieEntity\n     * @instance\n     */\n    images = MovieEntity.EMPTY_OBJECT;\n    /**\n     * MovieEntity sprites.\n     * @member {Array.<com.opensource.svga.ISpriteEntity>} sprites\n     * @memberof com.opensource.svga.MovieEntity\n     * @instance\n     */\n    sprites = [];\n    /**\n     * Constructs a new MovieEntity.\n     * @memberof com.opensource.svga\n     * @classdesc Represents a MovieEntity.\n     * @implements IMovieEntity\n     * @constructor\n     * @param {com.opensource.svga.IMovieEntity=} [properties] Properties to set\n     */\n    constructor(properties) {\n        if (properties) {\n            if (properties.version != null) {\n                this.version = properties.version;\n            }\n            if (properties.images != null) {\n                this.images = properties.images;\n            }\n            if (properties.params != null) {\n                this.params = properties.params;\n            }\n            if (properties.sprites != null) {\n                this.sprites = properties.sprites;\n            }\n        }\n    }\n}\n","export class VideoEntity {\n    /**\n     * svga 版本号\n     */\n    version;\n    /**\n     * svga 文件名\n     */\n    filename;\n    /**\n     * svga 尺寸\n     */\n    size = {\n        width: 0,\n        height: 0\n    };\n    /**\n     * svga 帧率\n     */\n    fps = 20;\n    /**\n     * 是否可以编辑svga文件\n     */\n    locked = false;\n    /**\n     * svga 帧数\n     */\n    frames = 0;\n    /**\n     * svga 二进制图片合集\n     */\n    images = {};\n    /**\n     * svga 动态元素\n     */\n    dynamicElements = {};\n    /**\n     * svga 关键帧信息\n     */\n    sprites = [];\n    constructor(movie, filename) {\n        const { viewBoxWidth, viewBoxHeight, fps, frames } = movie.params;\n        this.version = movie.version;\n        this.filename = filename;\n        this.size.width = viewBoxWidth;\n        this.size.height = viewBoxHeight;\n        this.fps = fps;\n        this.frames = frames;\n        this.images = movie.images || {};\n        this.sprites = this.formatSprites(movie.sprites || []);\n    }\n    /**\n     * 格式化精灵图\n     * @param mSprites\n     * @returns\n     */\n    formatSprites(mSprites) {\n        return mSprites.map((mSprite) => ({\n            imageKey: mSprite.imageKey,\n            frames: this.formatFrames(mSprite.frames || []),\n        }));\n    }\n    /**\n     * 格式化关键帧\n     * @param mFrames\n     * @returns\n     */\n    formatFrames(mFrames) {\n        let lastShapes;\n        return mFrames.map((mFrame) => {\n            const { layout: FL, transform: FT, alpha: FA } = mFrame;\n            // 设置Layout\n            const L = {\n                x: (FL?.x + 0.5) | 0,\n                y: (FL?.y + 0.5) | 0,\n                width: (FL?.width + 0.5) | 0,\n                height: (FL?.height + 0.5) | 0,\n            };\n            // 设置Transform\n            const T = {\n                a: FT?.a ?? 1.0,\n                b: FT?.b ?? 0.0,\n                c: FT?.c ?? 0.0,\n                d: FT?.d ?? 1.0,\n                tx: FT?.tx ?? 0.0,\n                ty: FT?.ty ?? 0.0,\n            };\n            let shapes = this.formatShapes(mFrame.shapes || []);\n            if (mFrame.shapes[0]?.type === 3 && lastShapes) {\n                shapes = lastShapes;\n            }\n            else {\n                lastShapes = shapes;\n            }\n            const llx = T.a * L.x + T.c * L.y + T.tx;\n            const lrx = T.a * (L.x + L.width) + T.c * L.y + T.tx;\n            const lbx = T.a * L.x + T.c * (L.y + L.height) + T.tx;\n            const rbx = T.a * (L.x + L.width) + T.c * (L.y + L.height) + T.tx;\n            const lly = T.b * L.x + T.d * L.y + T.ty;\n            const lry = T.b * (L.x + L.width) + T.d * L.y + T.ty;\n            const lby = T.b * L.x + T.d * (L.y + L.height) + T.ty;\n            const rby = T.b * (L.x + L.width) + T.d * (L.y + L.height) + T.ty;\n            const nx = (Math.min(lbx, rbx, llx, lrx) + 0.5) | 0;\n            const ny = (Math.min(lby, rby, lly, lry) + 0.5) | 0;\n            const CP = mFrame.clipPath ?? \"\";\n            const maskPath = CP.length > 0\n                ? {\n                    d: CP,\n                    transform: undefined,\n                    styles: {\n                        fill: \"rgba(0, 0, 0, 0)\",\n                        stroke: null,\n                        strokeWidth: null,\n                        lineCap: null,\n                        lineJoin: null,\n                        miterLimit: null,\n                        lineDash: null,\n                    },\n                }\n                : null;\n            return {\n                alpha: FA ?? 0,\n                layout: L,\n                transform: T,\n                clipPath: CP,\n                shapes,\n                nx,\n                ny,\n                maskPath,\n            };\n        });\n    }\n    /**\n     * 格式化形状\n     * @param mShapes\n     * @returns\n     */\n    formatShapes(mShapes) {\n        const shapes = [];\n        for (let mShape of mShapes) {\n            const mStyles = mShape.styles;\n            if (mStyles == null) {\n                continue;\n            }\n            const lineDash = [];\n            const { lineDashI: LD1, lineDashII: LD2, lineDashIII: LD3 } = mStyles;\n            if (LD1 > 0) {\n                lineDash.push(LD1);\n            }\n            if (LD2 > 0) {\n                if (lineDash.length < 1) {\n                    lineDash.push(0);\n                }\n                lineDash.push(LD2);\n            }\n            if (LD3 > 0) {\n                if (lineDash.length < 2) {\n                    lineDash.push(0);\n                    lineDash.push(0);\n                }\n                lineDash[2] = LD3;\n            }\n            let lineCap = null;\n            switch (mStyles.lineCap) {\n                case 0:\n                    lineCap = \"butt\";\n                    break;\n                case 1:\n                    lineCap = \"round\";\n                    break;\n                case 2:\n                    lineCap = \"square\";\n                    break;\n            }\n            let lineJoin = null;\n            switch (mStyles.lineJoin) {\n                case 2:\n                    lineJoin = \"bevel\";\n                    break;\n                case 1:\n                    lineJoin = \"round\";\n                    break;\n                case 0:\n                    lineJoin = \"miter\";\n                    break;\n            }\n            const { fill: StF, stroke: StS } = mStyles;\n            let fill = null;\n            if (StF) {\n                fill = `rgba(${(StF.r * 255) | 0}, ${(StF.g * 255) | 0}, ${(StF.b * 255) | 0}, ${(StF.a * 1) | 0})`;\n            }\n            let stroke = null;\n            if (StS) {\n                stroke = `rgba(${(StS.r * 255) | 0}, ${(StS.g * 255) | 0}, ${(StS.b * 255) | 0}, ${(StS.a * 1) | 0})`;\n            }\n            const SS = {\n                lineDash,\n                fill,\n                stroke,\n                lineCap,\n                lineJoin,\n                strokeWidth: mStyles.strokeWidth,\n                miterLimit: mStyles.miterLimit,\n            };\n            const { transform: ShF, shape, rect, ellipse } = mShape;\n            const ST = {\n                a: ShF?.a ?? 1.0,\n                b: ShF?.b ?? 0.0,\n                c: ShF?.c ?? 0.0,\n                d: ShF?.d ?? 1.0,\n                tx: ShF?.tx ?? 0.0,\n                ty: ShF?.ty ?? 0.0,\n            };\n            if (mShape.type === 0 && shape) {\n                shapes.push({\n                    type: \"shape\" /* PlatformVideo.SHAPE_TYPE.SHAPE */,\n                    path: shape,\n                    styles: SS,\n                    transform: ST,\n                });\n            }\n            else if (mShape.type === 1 && rect) {\n                shapes.push({\n                    type: \"rect\" /* PlatformVideo.SHAPE_TYPE.RECT */,\n                    path: rect,\n                    styles: SS,\n                    transform: ST,\n                });\n            }\n            else if (mShape.type === 2 && ellipse) {\n                shapes.push({\n                    type: \"ellipse\" /* PlatformVideo.SHAPE_TYPE.ELLIPSE */,\n                    path: ellipse,\n                    styles: SS,\n                    transform: ST,\n                });\n            }\n        }\n        return shapes;\n    }\n}\n","import { unzlibSync } from \"fflate\";\nimport { platform } from \"../platform\";\nimport { SVGADecoder } from \"../extensions/protobuf\";\nimport benchmark from \"../benchmark\";\nimport { VideoEntity } from \"./video-entity\";\n/**\n * SVGA 下载解析器\n */\nexport class Parser {\n    /**\n     * 解析视频实体\n     * @param data 视频二进制数据\n     * @param url 视频地址\n     * @returns\n     */\n    static parseVideo(data, url) {\n        const header = new Uint8Array(data, 0, 4);\n        const u8a = new Uint8Array(data);\n        if (header.toString() === \"80,75,3,4\") {\n            throw new Error(\"this parser only support version@2 of SVGA.\");\n        }\n        let entity;\n        benchmark.time(\"unzlibSync\", () => {\n            const inflateData = unzlibSync(u8a);\n            const movieData = SVGADecoder.decode(inflateData);\n            entity = new VideoEntity(movieData, platform.path.filename(url));\n        });\n        return entity;\n    }\n    /**\n     * 读取文件资源\n     * @param url 文件资源地址\n     * @returns\n     */\n    download(url) {\n        const { remote, local, globals } = platform;\n        benchmark.label(url);\n        benchmark.line();\n        // 读取远程文件\n        if (remote.is(url)) {\n            return remote.fetch(url);\n        }\n        // 读取本地文件\n        if (globals.env !== \"h5\") {\n            return local.read(url);\n        }\n        return Promise.resolve(null);\n    }\n    /**\n     * 通过 url 下载并解析 SVGA 文件\n     * @param url SVGA 文件的下载链接\n     * @returns Promise<SVGA 数据源\n     */\n    async load(url) {\n        return Parser.parseVideo((await this.download(url)), url);\n    }\n}\n","/**\n * CurrentPoint对象池，用于减少对象创建和GC压力\n */\nexport class PointPool {\n    pool = [];\n    static instance;\n    static getInstance() {\n        if (!PointPool.instance) {\n            PointPool.instance = new PointPool();\n        }\n        return PointPool.instance;\n    }\n    acquire() {\n        if (this.pool.length > 0) {\n            return this.pool.pop();\n        }\n        return { x: 0, y: 0, x1: 0, y1: 0, x2: 0, y2: 0 };\n    }\n    release(point) {\n        // 重置点的属性\n        point.x = 0;\n        point.y = 0;\n        point.x1 = 0;\n        point.y1 = 0;\n        point.x2 = 0;\n        point.y2 = 0;\n        this.pool.push(point);\n    }\n}\n","import { PointPool } from './point-pool';\n/**\n * https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths\n * 绘制路径的不同指令：\n * * 直线命令\n * - M: moveTo，移动到指定点，不绘制直线。\n * - L: lineTo，从起始点绘制一条直线到指定点。\n * - H: horizontal lineTo，从起始点绘制一条水平线到指定点。\n * - V: vertical lineTo，从起始点绘制一条垂直线到指定点。\n * - Z: closePath，从起始点绘制一条直线到路径起点，形成一个闭合路径。\n * * 曲线命令\n * - C: bezierCurveTo，绘制三次贝塞尔曲线。\n * - S: smooth curveTo，绘制平滑三次贝塞尔曲线。\n * - Q: quadraticCurveTo，绘制两次贝塞尔曲线。\n * - T: smooth quadraticCurveTo，绘制平滑两次贝塞尔曲线。\n * * 弧线命令\n * - A: arcTo，从起始点绘制一条弧线到指定点。\n */\nconst VALID_METHODS = \"MLHVCSQZmlhvcsqz\";\nfunction render(context, materials, dynamicMaterials, videoEntity, currentFrame, head, tail, globalTransform) {\n    const { sprites } = videoEntity;\n    for (let i = head; i < tail; i++) {\n        const sprite = sprites[i];\n        const { imageKey } = sprite;\n        const bitmap = materials.get(imageKey);\n        const dynamicElement = dynamicMaterials.get(imageKey);\n        drawSprite(context, sprite, currentFrame, bitmap, dynamicElement, globalTransform);\n    }\n}\nfunction drawSprite(context, sprite, currentFrame, bitmap, dynamicElement, globalTransform) {\n    const frame = sprite.frames[currentFrame];\n    if (frame.alpha < 0.05)\n        return;\n    context.save();\n    if (globalTransform) {\n        context.transform(globalTransform.a, globalTransform.b, globalTransform.c, globalTransform.d, globalTransform.tx, globalTransform.ty);\n    }\n    context.globalAlpha = frame.alpha;\n    context.transform(frame.transform?.a ?? 1, frame.transform?.b ?? 0, frame.transform?.c ?? 0, frame.transform?.d ?? 1, frame.transform?.tx ?? 0, frame.transform?.ty ?? 0);\n    if (bitmap) {\n        if (frame.maskPath) {\n            drawBezier(context, frame.maskPath.d, frame.maskPath.transform, frame.maskPath.styles);\n            context.clip();\n        }\n        context.drawImage(bitmap, 0, 0, frame.layout.width, frame.layout.height);\n    }\n    if (dynamicElement) {\n        context.drawImage(dynamicElement, (frame.layout.width - dynamicElement.width) / 2, (frame.layout.height - dynamicElement.height) / 2);\n    }\n    for (let i = 0; i < frame.shapes.length; i++) {\n        drawShape(context, frame.shapes[i]);\n    }\n    context.restore();\n}\nfunction drawShape(context, shape) {\n    switch (shape.type) {\n        case \"shape\" /* PlatformVideo.SHAPE_TYPE.SHAPE */:\n            drawBezier(context, shape.path.d, shape.transform, shape.styles);\n            break;\n        case \"ellipse\" /* PlatformVideo.SHAPE_TYPE.ELLIPSE */:\n            drawEllipse(context, shape.path.x ?? 0.0, shape.path.y ?? 0.0, shape.path.radiusX ?? 0.0, shape.path.radiusY ?? 0.0, shape.transform, shape.styles);\n            break;\n        case \"rect\" /* PlatformVideo.SHAPE_TYPE.RECT */:\n            drawRect(context, shape.path.x ?? 0.0, shape.path.y ?? 0.0, shape.path.width ?? 0.0, shape.path.height ?? 0.0, shape.path.cornerRadius ?? 0.0, shape.transform, shape.styles);\n            break;\n    }\n}\nfunction resetShapeStyles(context, styles) {\n    if (!styles)\n        return;\n    context.strokeStyle = styles.stroke || \"transparent\";\n    if (styles.strokeWidth > 0) {\n        context.lineWidth = styles.strokeWidth;\n    }\n    if (styles.miterLimit > 0) {\n        context.miterLimit = styles.miterLimit;\n    }\n    if (styles.lineCap) {\n        context.lineCap = styles.lineCap;\n    }\n    if (styles.lineJoin) {\n        context.lineJoin = styles.lineJoin;\n    }\n    context.fillStyle = styles.fill || \"transparent\";\n    if (styles.lineDash) {\n        context.setLineDash(styles.lineDash);\n    }\n}\nfunction drawBezier(context, d, transform, styles) {\n    context.save();\n    resetShapeStyles(context, styles);\n    if (transform) {\n        context.transform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);\n    }\n    const pointPool = PointPool.getInstance();\n    const currentPoint = pointPool.acquire();\n    context.beginPath();\n    if (d) {\n        // 优化字符串处理逻辑，减少正则表达式使用\n        const commands = d.match(/[a-zA-Z][^a-zA-Z]*/g) || [];\n        for (const command of commands) {\n            const firstLetter = command[0];\n            if (VALID_METHODS.includes(firstLetter)) {\n                const args = command.substring(1).trim().split(/[\\s,]+/).filter(Boolean);\n                drawBezierElement(context, currentPoint, firstLetter, args);\n            }\n        }\n    }\n    if (styles.fill) {\n        context.fill();\n    }\n    if (styles.stroke) {\n        context.stroke();\n    }\n    pointPool.release(currentPoint);\n    context.restore();\n}\nfunction drawBezierElement(context, currentPoint, method, args) {\n    switch (method) {\n        case \"M\":\n            currentPoint.x = +args[0];\n            currentPoint.y = +args[1];\n            context.moveTo(currentPoint.x, currentPoint.y);\n            break;\n        case \"m\":\n            currentPoint.x += +args[0];\n            currentPoint.y += +args[1];\n            context.moveTo(currentPoint.x, currentPoint.y);\n            break;\n        case \"L\":\n            currentPoint.x = +args[0];\n            currentPoint.y = +args[1];\n            context.lineTo(currentPoint.x, currentPoint.y);\n            break;\n        case \"l\":\n            currentPoint.x += +args[0];\n            currentPoint.y += +args[1];\n            context.lineTo(currentPoint.x, currentPoint.y);\n            break;\n        case \"H\":\n            currentPoint.x = +args[0];\n            context.lineTo(currentPoint.x, currentPoint.y);\n            break;\n        case \"h\":\n            currentPoint.x += +args[0];\n            context.lineTo(currentPoint.x, currentPoint.y);\n            break;\n        case \"V\":\n            currentPoint.y = +args[0];\n            context.lineTo(currentPoint.x, currentPoint.y);\n            break;\n        case \"v\":\n            currentPoint.y += +args[0];\n            context.lineTo(currentPoint.x, currentPoint.y);\n            break;\n        case \"C\":\n            currentPoint.x1 = +args[0];\n            currentPoint.y1 = +args[1];\n            currentPoint.x2 = +args[2];\n            currentPoint.y2 = +args[3];\n            currentPoint.x = +args[4];\n            currentPoint.y = +args[5];\n            context.bezierCurveTo(currentPoint.x1, currentPoint.y1, currentPoint.x2, currentPoint.y2, currentPoint.x, currentPoint.y);\n            break;\n        case \"c\":\n            currentPoint.x1 = currentPoint.x + +args[0];\n            currentPoint.y1 = currentPoint.y + +args[1];\n            currentPoint.x2 = currentPoint.x + +args[2];\n            currentPoint.y2 = currentPoint.y + +args[3];\n            currentPoint.x += +args[4];\n            currentPoint.y += +args[5];\n            context.bezierCurveTo(currentPoint.x1, currentPoint.y1, currentPoint.x2, currentPoint.y2, currentPoint.x, currentPoint.y);\n            break;\n        case \"S\":\n            if (currentPoint.x1 !== undefined &&\n                currentPoint.y1 !== undefined &&\n                currentPoint.x2 !== undefined &&\n                currentPoint.y2 !== undefined) {\n                currentPoint.x1 = currentPoint.x - currentPoint.x2 + currentPoint.x;\n                currentPoint.y1 = currentPoint.y - currentPoint.y2 + currentPoint.y;\n                currentPoint.x2 = +args[0];\n                currentPoint.y2 = +args[1];\n                currentPoint.x = +args[2];\n                currentPoint.y = +args[3];\n                context.bezierCurveTo(currentPoint.x1, currentPoint.y1, currentPoint.x2, currentPoint.y2, currentPoint.x, currentPoint.y);\n            }\n            else {\n                currentPoint.x1 = +args[0];\n                currentPoint.y1 = +args[1];\n                currentPoint.x = +args[2];\n                currentPoint.y = +args[3];\n                context.quadraticCurveTo(currentPoint.x1, currentPoint.y1, currentPoint.x, currentPoint.y);\n            }\n            break;\n        case \"s\":\n            if (currentPoint.x1 !== undefined &&\n                currentPoint.y1 !== undefined &&\n                currentPoint.x2 !== undefined &&\n                currentPoint.y2 !== undefined) {\n                currentPoint.x1 = currentPoint.x - currentPoint.x2 + currentPoint.x;\n                currentPoint.y1 = currentPoint.y - currentPoint.y2 + currentPoint.y;\n                currentPoint.x2 = currentPoint.x + +args[0];\n                currentPoint.y2 = currentPoint.y + +args[1];\n                currentPoint.x += +args[2];\n                currentPoint.y += +args[3];\n                context.bezierCurveTo(currentPoint.x1, currentPoint.y1, currentPoint.x2, currentPoint.y2, currentPoint.x, currentPoint.y);\n            }\n            else {\n                currentPoint.x1 = currentPoint.x + +args[0];\n                currentPoint.y1 = currentPoint.y + +args[1];\n                currentPoint.x += +args[2];\n                currentPoint.y += +args[3];\n                context.quadraticCurveTo(currentPoint.x1, currentPoint.y1, currentPoint.x, currentPoint.y);\n            }\n            break;\n        case \"Q\":\n            currentPoint.x1 = +args[0];\n            currentPoint.y1 = +args[1];\n            currentPoint.x = +args[2];\n            currentPoint.y = +args[3];\n            context.quadraticCurveTo(currentPoint.x1, currentPoint.y1, currentPoint.x, currentPoint.y);\n            break;\n        case \"q\":\n            currentPoint.x1 = currentPoint.x + +args[0];\n            currentPoint.y1 = currentPoint.y + +args[1];\n            currentPoint.x += +args[2];\n            currentPoint.y += +args[3];\n            context.quadraticCurveTo(currentPoint.x1, currentPoint.y1, currentPoint.x, currentPoint.y);\n            break;\n        case \"Z\":\n        case \"z\":\n            context.closePath();\n            break;\n        default:\n            break;\n    }\n}\nfunction drawEllipse(context, x, y, radiusX, radiusY, transform, styles) {\n    context.save();\n    resetShapeStyles(context, styles);\n    if (transform) {\n        context.transform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);\n    }\n    x = x - radiusX;\n    y = y - radiusY;\n    const w = radiusX * 2;\n    const h = radiusY * 2;\n    const kappa = 0.5522848;\n    const ox = (w / 2) * kappa;\n    const oy = (h / 2) * kappa;\n    const xe = x + w;\n    const ye = y + h;\n    const xm = x + w / 2;\n    const ym = y + h / 2;\n    context.beginPath();\n    context.moveTo(x, ym);\n    context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n    context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n    if (styles.fill) {\n        context.fill();\n    }\n    if (styles.stroke) {\n        context.stroke();\n    }\n    context.restore();\n}\nfunction drawRect(context, x, y, width, height, cornerRadius, transform, styles) {\n    context.save();\n    resetShapeStyles(context, styles);\n    if (transform) {\n        context.transform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);\n    }\n    let radius = cornerRadius;\n    if (width < 2 * radius) {\n        radius = width / 2;\n    }\n    if (height < 2 * radius) {\n        radius = height / 2;\n    }\n    context.beginPath();\n    context.moveTo(x + radius, y);\n    context.arcTo(x + width, y, x + width, y + height, radius);\n    context.arcTo(x + width, y + height, x, y + height, radius);\n    context.arcTo(x, y + height, x, y, radius);\n    context.arcTo(x, y, x + width, y, radius);\n    context.closePath();\n    if (styles.fill) {\n        context.fill();\n    }\n    if (styles.stroke) {\n        context.stroke();\n    }\n    context.restore();\n}\nexport default render;\n","import benchmark from \"../benchmark\";\nimport { platform } from \"../platform\";\nexport class ImagePool {\n    /**\n     * 待复用的 img 标签\n     */\n    // FIXME: 微信小程序创建调用太多createImage会导致微信/微信小程序崩溃\n    images = [];\n    /**\n     * 动态素材\n     */\n    dynamicMaterials = new Map();\n    /**\n     * 素材\n     */\n    materials = new Map();\n    /**\n     * 创建图片标签\n     * @returns\n     */\n    getReleaseImage() {\n        return this.images.shift();\n    }\n    /**\n     * 加载图片集\n     * @param images 图片数据\n     * @param filename 文件名称\n     * @returns\n     */\n    loadAll(images, filename) {\n        return benchmark.time(\"loadAll\", () => {\n            const { load, isImage } = platform.image;\n            const imageAwaits = [];\n            Object.keys(images).forEach((key) => {\n                const image = images[key];\n                if (isImage(image)) {\n                    this.materials.set(key, image);\n                }\n                else {\n                    const p = load(image, filename, key).then((img) => {\n                        this.materials.set(key, img);\n                    });\n                    imageAwaits.push(p);\n                }\n            });\n            return Promise.all(imageAwaits);\n        });\n    }\n    /**\n     * 更新动态素材\n     * @param images\n     */\n    appendAll(images) {\n        this.dynamicMaterials = new Map(Object.entries(images));\n    }\n    /**\n     * 清理素材\n     */\n    release() {\n        const { env } = platform.globals;\n        const { isImage, isImageBitmap } = platform.image;\n        // FIXME: 支付宝小程序 image 修改 src 无法触发 onload 事件\n        if (env !== \"alipay\") {\n            const releaseOne = (image) => {\n                if (isImage(image)) {\n                    image.onload = null;\n                    image.onerror = null;\n                    image.src = \"\";\n                    this.images.push(image);\n                }\n                else if (isImageBitmap(image)) {\n                    image.close();\n                }\n            };\n            this.materials.forEach(releaseOne);\n            this.dynamicMaterials.forEach(releaseOne);\n        }\n        this.materials.clear();\n        this.dynamicMaterials.clear();\n        this.images = Array.from(new Set(this.images));\n    }\n}\n","import { platform } from \"../platform\";\nimport benchmark from \"../benchmark\";\nimport render from \"./render\";\nimport { ImagePool } from \"./image-pool\";\nconst { noop } = platform;\nexport class Painter {\n    mode;\n    /**\n     * 主屏的 Canvas 元素\n     * Main Screen\n     */\n    X = null;\n    /**\n     * 主屏的 Context 对象\n     * Main Context\n     */\n    XC = null;\n    /**\n     * 副屏的 Canvas 元素\n     * Secondary Screen\n     */\n    Y = null;\n    /**\n     * 副屏的 Context 对象\n     * Secondary Context\n     */\n    YC = null;\n    /**\n     * 画布的宽度\n     */\n    W;\n    /**\n     * 画布的高度\n     */\n    H;\n    /**\n     * 粉刷模式\n     */\n    model = {};\n    IM = new ImagePool();\n    lastResizeKey = \"\";\n    lastTransform;\n    globalTransform;\n    /**\n     *\n     * @param mode\n     *  - poster: 海报模式\n     *  - animation: 动画模式\n     *  - 默认为 animation\n     * @param W 海报模式必须传入\n     * @param H 海报模式必须传入\n     */\n    constructor(mode = \"animation\", width = 0, height = 0) {\n        this.mode = mode;\n        const { dpr } = platform.globals;\n        this.W = width * dpr;\n        this.H = height * dpr;\n    }\n    setModel(type) {\n        const { model } = this;\n        const { env } = platform.globals;\n        // set type\n        model.type = type;\n        // set clear\n        if (type === \"O\" &&\n            // OffscreenCanvas 在 Firefox 浏览器无法被清理历史内容\n            env === \"h5\" &&\n            navigator.userAgent.includes(\"Firefox\")) {\n            model.clear = \"CR\";\n        }\n        else if ((type === \"O\" && env === \"tt\") || env === \"alipay\") {\n            model.clear = \"CL\";\n        }\n        else {\n            model.clear = \"RE\";\n        }\n        benchmark.line(4);\n        benchmark.log(\"brush type\", model.type);\n        benchmark.log(\"brush clear\", model.clear);\n        benchmark.line(4);\n    }\n    /**\n     * 注册画笔，根据环境判断生成最优的绘制方式\n     * @param selector\n     * @param ofsSelector\n     * @param component\n     */\n    async register(selector, ofsSelector, component) {\n        const { model, mode } = this;\n        const { getCanvas, getOfsCanvas } = platform;\n        const { env } = platform.globals;\n        // #region set main screen implement\n        // -------- 创建主屏 ---------\n        if (mode === \"poster\" &&\n            (env !== \"h5\" || \"OffscreenCanvas\" in globalThis)) {\n            const { W, H } = this;\n            if (!(W > 0 && H > 0)) {\n                throw new Error(\"Poster mode must set width and height when create Brush instance\");\n            }\n            const { canvas, context } = getOfsCanvas({ width: W, height: H });\n            this.X = canvas;\n            this.XC = context;\n            this.setModel(\"O\");\n        }\n        else {\n            const { canvas, context } = await getCanvas(selector, component);\n            const { width, height } = canvas;\n            // 添加主屏\n            this.X = canvas;\n            this.XC = context;\n            if (mode === \"poster\") {\n                canvas.width = width;\n                canvas.height = height;\n                this.setModel(\"C\");\n            }\n            else {\n                this.W = width;\n                this.H = height;\n            }\n        }\n        if (env !== \"h5\") {\n            const { X, IM } = this;\n            const { createImage } = X;\n            Object.defineProperty(X, \"createImage\", {\n                get() {\n                    return () => IM.getReleaseImage() || createImage.call(X);\n                },\n            });\n            platform.setGlobalCanvas(X);\n        }\n        // #endregion set main screen implement\n        // #region set secondary screen implement\n        // ------- 创建副屏 ---------\n        if (mode === \"poster\") {\n            this.Y = this.X;\n            this.YC = this.XC;\n        }\n        else {\n            let ofsResult;\n            if (typeof ofsSelector === \"string\" && ofsSelector !== \"\") {\n                ofsResult = await getCanvas(ofsSelector, component);\n                ofsResult.canvas.width = this.W;\n                ofsResult.canvas.height = this.H;\n                this.setModel(\"C\");\n            }\n            else {\n                ofsResult = getOfsCanvas({ width: this.W, height: this.H });\n                this.setModel(\"O\");\n            }\n            this.Y = ofsResult.canvas;\n            this.YC = ofsResult.context;\n        }\n        // #endregion set secondary screen implement\n        // #region clear main screen implement\n        // ------- 生成主屏清理函数 -------\n        // FIXME:【支付宝小程序】无法通过改变尺寸来清理画布\n        if (model.clear === \"CL\") {\n            this.clearContainer = () => {\n                const { W, H } = this;\n                this.XC.clearRect(0, 0, W, H);\n            };\n        }\n        else {\n            this.clearContainer = () => {\n                const { W, H } = this;\n                this.X.width = W;\n                this.X.height = H;\n            };\n        }\n        // #endregion clear main screen implement\n        if (mode === \"poster\") {\n            this.clearSecondary = this.stick = noop;\n        }\n        else {\n            // #region clear secondary screen implement\n            // ------- 生成副屏清理函数 --------\n            switch (model.clear) {\n                case \"CR\":\n                    this.clearSecondary = () => {\n                        const { W, H } = this;\n                        // FIXME:【支付宝小程序】频繁创建新的 OffscreenCanvas 会出现崩溃现象\n                        const { canvas, context } = getOfsCanvas({ width: W, height: H });\n                        this.Y = canvas;\n                        this.YC = context;\n                    };\n                    break;\n                case \"CL\":\n                    this.clearSecondary = () => {\n                        const { W, H } = this;\n                        // FIXME:【支付宝小程序】无法通过改变尺寸来清理画布，无论是Canvas还是OffscreenCanvas\n                        this.YC.clearRect(0, 0, W, H);\n                    };\n                    break;\n                default:\n                    this.clearSecondary = () => {\n                        const { W, H, Y } = this;\n                        Y.width = W;\n                        Y.height = H;\n                    };\n            }\n            // #endregion clear secondary screen implement\n        }\n    }\n    /**\n     * 更新动态图片集\n     * @param images\n     */\n    updateDynamicImages(images) {\n        this.IM.appendAll(images);\n    }\n    /**\n     * 加载图片集\n     * @param images 图片数据\n     * @param filename 文件名称\n     * @returns\n     */\n    loadImages(images, filename) {\n        return this.IM.loadAll(images, filename);\n    }\n    /**\n     * 生成图片\n     * @returns\n     */\n    getImageData() {\n        return this.XC.getImageData(0, 0, this.W, this.H);\n    }\n    /**\n     * 计算缩放比例\n     * @param contentMode\n     * @param videoSize\n     * @returns\n     */\n    calculateScale(contentMode, videoSize) {\n        const { Y } = this;\n        const imageRatio = videoSize.width / videoSize.height;\n        const viewRatio = Y.width / Y.height;\n        const isAspectFit = contentMode === \"aspect-fit\" /* PLAYER_CONTENT_MODE.ASPECT_FIT */;\n        const shouldUseWidth = (imageRatio >= viewRatio && isAspectFit) ||\n            (imageRatio <= viewRatio && !isAspectFit);\n        if (shouldUseWidth) {\n            const scale = Y.width / videoSize.width;\n            return {\n                scaleX: scale,\n                scaleY: scale,\n                translateX: 0,\n                translateY: (Y.height - videoSize.height * scale) / 2,\n            };\n        }\n        const scale = Y.height / videoSize.height;\n        return {\n            scaleX: scale,\n            scaleY: scale,\n            translateX: (Y.width - videoSize.width * scale) / 2,\n            translateY: 0,\n        };\n    }\n    /**\n     * 调整画布尺寸\n     * @param contentMode\n     * @param videoSize\n     * @returns\n     */\n    resize(contentMode, videoSize) {\n        const { width: canvasWidth, height: canvasHeight } = this.Y;\n        const { width: videoWidth, height: videoHeight } = videoSize;\n        const resizeKey = `${contentMode}-${videoWidth}-${videoHeight}-${canvasWidth}-${canvasHeight}`;\n        if (this.lastResizeKey === resizeKey && this.lastTransform) {\n            this.globalTransform = this.lastTransform;\n            return;\n        }\n        let scale = {\n            scaleX: 1,\n            scaleY: 1,\n            translateX: 0,\n            translateY: 0,\n        };\n        if (contentMode === \"fill\" /* PLAYER_CONTENT_MODE.FILL */) {\n            scale.scaleX = canvasWidth / videoWidth;\n            scale.scaleY = canvasHeight / videoHeight;\n        }\n        else {\n            scale = this.calculateScale(contentMode, videoSize);\n        }\n        this.lastResizeKey = resizeKey;\n        this.globalTransform = this.lastTransform = {\n            a: scale.scaleX,\n            b: 0.0,\n            c: 0.0,\n            d: scale.scaleY,\n            tx: scale.translateX,\n            ty: scale.translateY,\n        };\n    }\n    clearContainer = noop;\n    clearSecondary = noop;\n    /**\n     * 清理素材库\n     */\n    clearMaterials() {\n        this.IM.release();\n    }\n    /**\n     * 绘制图片片段\n     * @param videoEntity\n     * @param currentFrame\n     * @param start\n     * @param end\n     */\n    draw(videoEntity, currentFrame, start, end) {\n        const { materials, dynamicMaterials } = this.IM;\n        render(this.YC, materials, dynamicMaterials, videoEntity, currentFrame, start, end, this.globalTransform);\n    }\n    stick() {\n        const { W, H, mode } = this;\n        if (mode !== \"poster\") {\n            this.XC.drawImage(this.YC.canvas || this.Y, 0, 0, W, H);\n        }\n    }\n    /**\n     * 销毁画笔\n     */\n    destroy() {\n        this.clearContainer();\n        this.clearSecondary();\n        this.clearMaterials();\n        this.X = this.XC = this.Y = this.YC = null;\n        this.clearContainer = this.clearSecondary = this.stick = noop;\n    }\n}\n","import { platform } from \"../platform\";\nconst { noop } = platform;\n/**\n * 动画控制器\n */\nexport class Animator {\n    /**\n     * 动画是否执行\n     */\n    isRunning = false;\n    /**\n     * 动画开始时间\n     */\n    startTime = 0;\n    /**\n     * 动画持续时间\n     */\n    duration = 0;\n    /**\n     * 循环播放开始帧与动画开始帧之间的时间偏差\n     */\n    loopStart = 0;\n    /**\n     * 循环持续时间\n     */\n    loopDuration = 0;\n    /* ---- 事件钩子 ---- */\n    onStart = noop;\n    onUpdate = noop;\n    onEnd = noop;\n    /**\n     * 设置动画的必要参数\n     * @param duration\n     * @param loopStart\n     * @param loop\n     * @param fillValue\n     */\n    setConfig(duration, loopStart, loop, fillValue) {\n        this.duration = duration;\n        this.loopStart = loopStart;\n        this.loopDuration = duration * loop + fillValue - loopStart;\n    }\n    start() {\n        this.isRunning = true;\n        this.startTime = platform.now();\n        this.onStart();\n        this.doFrame();\n    }\n    resume() {\n        this.isRunning = true;\n        this.startTime = platform.now();\n        this.doFrame();\n    }\n    pause() {\n        this.isRunning = false;\n        // 设置暂停的位置\n        this.loopStart = (platform.now() - this.startTime + this.loopStart) % this.duration;\n    }\n    stop() {\n        this.isRunning = false;\n        this.loopStart = 0;\n    }\n    doFrame() {\n        if (this.isRunning) {\n            this.doDeltaTime(platform.now() - this.startTime);\n            if (this.isRunning) {\n                platform.rAF(() => this.doFrame());\n            }\n        }\n    }\n    doDeltaTime(DT) {\n        const { duration: D, loopStart: LS, loopDuration: LD, } = this;\n        // 本轮动画已消耗的时间比例（Percentage of speed time）\n        let TP;\n        let ended = false;\n        // 运行时间 大于等于 循环持续时间\n        if (DT >= LD) {\n            // 动画已结束\n            TP = 1.0;\n            ended = true;\n            this.stop();\n        }\n        else {\n            // 本轮动画已消耗的时间比例 = 本轮动画已消耗的时间 / 动画持续时间\n            TP = ((DT + LS) % D) / D;\n        }\n        this.onUpdate(TP);\n        if (!this.isRunning && ended) {\n            this.onEnd();\n        }\n    }\n}\n","export class Config {\n    /**\n     * 最后停留的目标模式，类似于 animation-fill-mode，默认值 forwards。\n     */\n    fillMode = \"backwards\" /* PLAYER_FILL_MODE.BACKWARDS */;\n    /**\n     * 播放模式，默认值 forwards\n     */\n    playMode = \"forwards\" /* PLAYER_PLAY_MODE.FORWARDS */;\n    /**\n     * 填充模式，类似于 content-mode。\n     */\n    contentMode = \"fill\" /* PLAYER_CONTENT_MODE.FILL */;\n    /**\n     * 开始播放的帧，默认值 0\n     */\n    startFrame = 0;\n    /**\n     * 结束播放的帧，默认值 0\n     */\n    endFrame = 0;\n    /**\n     * 循环播放的开始帧，默认值 0\n     */\n    loopStartFrame = 0;\n    /**\n     * 循环次数，默认值 0（无限循环）\n     */\n    loop = 0;\n    /**\n     * 是否开启动画容器视窗检测，默认值 false\n     * 开启后利用 Intersection Observer API 检测动画容器是否处于视窗内，若处于视窗外，停止描绘渲染帧避免造成资源消耗\n     */\n    // public isUseIntersectionObserver = false;\n    register(config) {\n        if (typeof config.loop === \"number\" && config.loop >= 0) {\n            this.loop = config.loop;\n        }\n        if (config.fillMode &&\n            [\"forwards\" /* PLAYER_FILL_MODE.FORWARDS */, \"backwards\" /* PLAYER_FILL_MODE.BACKWARDS */, \"none\" /* PLAYER_FILL_MODE.NONE */].includes(config.fillMode)) {\n            this.fillMode = config.fillMode;\n        }\n        if (config.playMode &&\n            [\"forwards\" /* PLAYER_PLAY_MODE.FORWARDS */, \"fallbacks\" /* PLAYER_PLAY_MODE.FALLBACKS */].includes(config.playMode)) {\n            this.playMode = config.playMode;\n        }\n        if (typeof config.startFrame === \"number\" && config.startFrame >= 0) {\n            this.startFrame = config.startFrame;\n        }\n        if (typeof config.endFrame === \"number\" && config.endFrame >= 0) {\n            this.endFrame = config.endFrame;\n        }\n        if (typeof config.loopStartFrame === \"number\" &&\n            config.loopStartFrame >= 0) {\n            this.loopStartFrame = config.loopStartFrame;\n        }\n        if (typeof config.contentMode === \"string\") {\n            this.contentMode = config.contentMode;\n        }\n        // if (typeof config.isUseIntersectionObserver === 'boolean') {\n        //   this.isUseIntersectionObserver = config.isUseIntersectionObserver\n        // }\n    }\n    setItem(key, value) {\n        this.register({ [key]: value });\n    }\n    getConfig(entity) {\n        const { playMode, loopStartFrame, startFrame, endFrame, fillMode, loop } = this;\n        const { fps, sprites } = entity;\n        let { frames } = entity;\n        const spriteCount = sprites.length;\n        const start = startFrame > 0 ? startFrame : 0;\n        const end = endFrame > 0 && endFrame < frames ? endFrame : frames;\n        if (start > end) {\n            throw new Error(\"StartFrame should greater than EndFrame\");\n        }\n        // 更新活动帧总数\n        if (end < frames) {\n            frames = end - start;\n        }\n        else if (start > 0) {\n            frames -= start;\n        }\n        let currFrame = loopStartFrame;\n        let extFrame = 0;\n        // 顺序播放/倒叙播放\n        if (playMode === \"forwards\" /* PLAYER_PLAY_MODE.FORWARDS */) {\n            // 如果开始动画的当前帧是最后一帧，重置为开始帧\n            if (currFrame === end - 1) {\n                currFrame = start;\n            }\n            if (fillMode === \"forwards\" /* PLAYER_FILL_MODE.FORWARDS */) {\n                extFrame = 1;\n            }\n        }\n        else {\n            // 如果开始动画的当前帧是最后一帧，重置为开始帧\n            if (currFrame === 0) {\n                currFrame = end - 1;\n            }\n            if (fillMode === \"backwards\" /* PLAYER_FILL_MODE.BACKWARDS */) {\n                extFrame = 1;\n            }\n        }\n        // 每帧持续的时间\n        const frameDuration = 1000 / fps;\n        return {\n            currFrame,\n            startFrame: start,\n            endFrame: end,\n            totalFrame: frames,\n            spriteCount,\n            aniConfig: {\n                // 单个周期的运行时长\n                duration: Math.floor(frames * frameDuration * 10 ** 6) / 10 ** 6,\n                // 第一个周期开始时间偏移量\n                loopStart: loopStartFrame > start ? (loopStartFrame - start) * frameDuration : 0,\n                // 循环次数\n                loop: loop === 0 ? Infinity : loop,\n                // 最后一帧不在周期内，需要单独计算\n                fillValue: extFrame * frameDuration,\n            },\n        };\n    }\n}\n","import { platform } from \"../platform\";\nimport { Painter } from \"../painter\";\nimport { Animator } from \"./animator\";\nimport { Config } from \"./config\";\nimport benchmark from \"../benchmark\";\n/**\n * SVGA 播放器\n */\nexport class Player {\n    /**\n     * SVGA 元数据\n     * Video Entity\n     */\n    entity = undefined;\n    /**\n     * 当前配置项\n     */\n    config = new Config();\n    /**\n     * 动画实例\n     */\n    animator = null;\n    /**\n     * 刷头实例\n     */\n    painter = new Painter();\n    // private isBeIntersection = true;\n    // private intersectionObserver: IntersectionObserver | null = null\n    /**\n     * 设置配置项\n     * @param options 可配置项\n     * @property container 主屏，播放动画的 Canvas 元素\n     * @property secondary 副屏，播放动画的 Canvas 元素\n     * @property loop 循环次数，默认值 0（无限循环）\n     * @property fillMode 最后停留的目标模式，类似于 animation-fill-mode，接受值 forwards 和 fallbacks，默认值 forwards。\n     * @property playMode 播放模式，接受值 forwards 和 fallbacks ，默认值 forwards。\n     * @property startFrame 单个循环周期内开始播放的帧数，默认值 0\n     * @property endFrame 单个循环周期内结束播放的帧数，默认值 0\n     * @property loopStartFrame 循环播放的开始帧，仅影响第一个周期的开始帧，默认值 0\n     */\n    async setConfig(options, component) {\n        const config = typeof options === \"string\" ? { container: options } : options;\n        this.config.register(config);\n        this.animator = new Animator();\n        // 监听容器是否处于浏览器视窗内\n        // this.setIntersectionObserver()\n        await this.painter.register(config.container, config.secondary, component);\n    }\n    /**\n     * 更新配置\n     * @param key\n     * @param value\n     */\n    setItem(key, value) {\n        this.config.setItem(key, value);\n    }\n    // private setIntersectionObserver (): void {\n    //   if (hasIntersectionObserver && this.config.isUseIntersectionObserver) {\n    //     this.intersectionObserver = new IntersectionObserver(entries => {\n    //       this.isBeIntersection = !(entries[0].intersectionRatio <= 0)\n    //     }, {\n    //       rootMargin: '0px',\n    //       threshold: [0, 0.5, 1]\n    //     })\n    //     this.intersectionObserver.observe(this.config.container)\n    //   } else {\n    //     if (this.intersectionObserver !== null) this.intersectionObserver.disconnect()\n    //     this.config.isUseIntersectionObserver = false\n    //     this.isBeIntersection = true\n    //   }\n    // }\n    /**\n     * 装载 SVGA 数据元\n     * @param videoEntity SVGA 数据源\n     * @returns Promise<void>\n     */\n    mount(videoEntity) {\n        if (!videoEntity)\n            throw new Error(\"videoEntity undefined\");\n        const { images, filename } = videoEntity;\n        this.animator.stop();\n        this.painter.clearSecondary();\n        this.painter.clearMaterials();\n        this.painter.updateDynamicImages(videoEntity.dynamicElements);\n        this.entity = videoEntity;\n        return this.painter.loadImages(images, filename);\n    }\n    /**\n     * 开始播放事件回调\n     * @param frame\n     */\n    onStart;\n    /**\n     * 重新播放事件回调\n     * @param frame\n     */\n    onResume;\n    /**\n     * 暂停播放事件回调\n     * @param frame\n     */\n    onPause;\n    /**\n     * 停止播放事件回调\n     * @param frame\n     */\n    onStop;\n    /**\n     * 播放中事件回调\n     * @param percent\n     * @param frame\n     * @param frames\n     */\n    onProcess;\n    /**\n     * 结束播放事件回调\n     * @param frame\n     */\n    onEnd;\n    /**\n     * 开始播放\n     */\n    start() {\n        this.startAnimation();\n        this.onStart?.();\n    }\n    /**\n     * 重新播放\n     */\n    resume() {\n        this.animator.resume();\n        this.onResume?.();\n    }\n    /**\n     * 暂停播放\n     */\n    pause() {\n        this.animator.pause();\n        this.onPause?.();\n    }\n    /**\n     * 停止播放\n     */\n    stop() {\n        this.animator.stop();\n        this.painter.clearContainer();\n        this.painter.clearSecondary();\n        this.onStop?.();\n    }\n    /**\n     * 销毁实例\n     */\n    destroy() {\n        this.animator.stop();\n        this.painter.destroy();\n        this.animator = null;\n        this.entity = undefined;\n    }\n    /**\n     * 跳转到指定帧\n     * @param frame 目标帧\n     * @param andPlay 是否立即播放\n     */\n    stepToFrame(frame, andPlay = false) {\n        if (!this.entity || frame < 0 || frame >= this.entity.frames)\n            return;\n        this.pause();\n        this.config.loopStartFrame = frame;\n        if (andPlay) {\n            this.start();\n        }\n    }\n    /**\n     * 跳转到指定百分比\n     * @param percent 目标百分比\n     * @param andPlay 是否立即播放\n     */\n    stepToPercentage(percent, andPlay = false) {\n        if (!this.entity)\n            return;\n        const { frames } = this.entity;\n        this.stepToFrame(Math.round((percent < 0 ? 0 : percent) * frames) % frames, andPlay);\n    }\n    /**\n     * 开始绘制动画\n     */\n    startAnimation() {\n        const { entity, config, animator, painter } = this;\n        const { now } = platform;\n        const { fillMode, playMode, contentMode } = config;\n        const { currFrame, startFrame, endFrame, totalFrame, spriteCount, aniConfig, } = config.getConfig(entity);\n        const { duration, loopStart, loop, fillValue } = aniConfig;\n        const isReverseMode = playMode === \"fallbacks\" /* PLAYER_PLAY_MODE.FALLBACKS */;\n        // 当前帧\n        let currentFrame = currFrame;\n        // 片段绘制结束位置\n        let tail = 0;\n        let nextTail;\n        // 上一帧\n        let latestFrame;\n        // 下一帧\n        let nextFrame;\n        // 精确帧\n        let exactFrame;\n        // 当前已完成的百分比\n        let percent;\n        // 当前需要绘制的百分比\n        // let partialDrawPercent: number;\n        // 是否还有剩余时间\n        let hasRemained;\n        // 更新动画基础信息\n        animator.setConfig(duration, loopStart, loop, fillValue);\n        painter.resize(contentMode, entity.size);\n        // 分段渲染函数\n        const MAX_DRAW_TIME_PER_FRAME = 8;\n        const MAX_ACCELERATE_DRAW_TIME_PER_FRAME = 3;\n        const MAX_DYNAMIC_CHUNK_SIZE = 34;\n        const MIN_DYNAMIC_CHUNK_SIZE = 1;\n        // 动态调整每次绘制的块大小\n        let dynamicChunkSize = 4; // 初始块大小\n        let startTime;\n        let chunk;\n        let elapsed;\n        // 使用`指数退避算法`平衡渲染速度和流畅度\n        const patchDraw = (before) => {\n            startTime = now();\n            before();\n            while (tail < spriteCount) {\n                // 根据当前块大小计算nextTail\n                chunk = Math.min(dynamicChunkSize, spriteCount - tail);\n                nextTail = (tail + chunk) | 0;\n                painter.draw(entity, currentFrame, tail, nextTail);\n                tail = nextTail;\n                // 动态调整块大小\n                elapsed = now() - startTime;\n                if (elapsed < MAX_ACCELERATE_DRAW_TIME_PER_FRAME) {\n                    dynamicChunkSize = Math.min(dynamicChunkSize * 2, MAX_DYNAMIC_CHUNK_SIZE); // 加快绘制\n                }\n                else if (elapsed > MAX_DRAW_TIME_PER_FRAME) {\n                    dynamicChunkSize = Math.max(dynamicChunkSize / 2, MIN_DYNAMIC_CHUNK_SIZE); // 减慢绘制\n                    break;\n                }\n            }\n        };\n        // const TAIL_THRESHOLD_FACTOR = 1.05;\n        // const TAIL_OFFSET = 2;\n        // let partialDrawPercent = 0;\n        // // 普通模式\n        // const patchDraw = (before: () => void) => {\n        //   before();\n        //   if (tail < spriteCount) {\n        //     // 1.15 和 2 均为阔值，保证渲染尽快完成\n        //     nextTail = hasRemained\n        //       ? Math.min(\n        //           (spriteCount * partialDrawPercent * TAIL_THRESHOLD_FACTOR +\n        //             TAIL_OFFSET) | 0,\n        //           spriteCount\n        //         )\n        //       : spriteCount;\n        //     if (nextTail > tail) {\n        //       painter.draw(entity!, currentFrame, tail, nextTail);\n        //       tail = nextTail;\n        //     }\n        //   }\n        // };\n        // 动画绘制过程\n        animator.onUpdate = (timePercent) => {\n            benchmark.time(\"partial updated\", () => {\n                patchDraw(() => {\n                    percent = isReverseMode ? 1 - timePercent : timePercent;\n                    exactFrame = percent * totalFrame;\n                    if (isReverseMode) {\n                        nextFrame =\n                            (timePercent === 0 ? endFrame : Math.ceil(exactFrame)) - 1;\n                        // partialDrawPercent = Math.abs(1 - exactFrame + currentFrame);\n                        // FIXME: 倒序会有一帧的偏差，需要校准当前帧\n                        percent = currentFrame / totalFrame;\n                    }\n                    else {\n                        nextFrame = timePercent === 1 ? startFrame : Math.floor(exactFrame);\n                        // partialDrawPercent = Math.abs(exactFrame - currentFrame);\n                    }\n                    hasRemained = currentFrame === nextFrame;\n                });\n            });\n            if (hasRemained)\n                return;\n            painter.clearContainer();\n            painter.stick();\n            painter.clearSecondary();\n            latestFrame = currentFrame;\n            currentFrame = nextFrame;\n            tail = 0;\n            this.onProcess?.(~~(percent * 100) / 100, latestFrame);\n        };\n        animator.onStart = () => {\n            entity.locked = true;\n        };\n        animator.onEnd = () => {\n            entity.locked = false;\n            // 如果不保留最后一帧渲染，则清空画布\n            if (fillMode === \"none\" /* PLAYER_FILL_MODE.NONE */) {\n                painter.clearContainer();\n            }\n            this.onEnd?.();\n        };\n        animator.start();\n    }\n}\n","import { platform } from \"../../platform\";\n// CRC32 表初始化\nfunction initCRC32Table() {\n    return Uint32Array.from(Array(256), (_, i) => {\n        let c = i;\n        for (let j = 0; j < 8; j++) {\n            c = (c & 1) ? (0xedb88320 ^ (c >>> 1)) : (c >>> 1);\n        }\n        return c >>> 0;\n    });\n}\nexport class CRC32 {\n    static table = initCRC32Table();\n    cache = new Map();\n    calculate(buff) {\n        if (!buff || !(buff instanceof Uint8Array)) {\n            throw new TypeError('Input must be a Uint8Array');\n        }\n        const { table } = CRC32;\n        const { cache } = this;\n        const key = platform.decode.bytesToString(buff);\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        let crc = 0xffffffff;\n        const { length } = buff;\n        // 使用位运算优化\n        for (let i = 0; i < length; i++) {\n            crc = (crc >>> 8) ^ table[(crc ^ buff[i]) & 0xff];\n        }\n        const result = (crc ^ 0xffffffff) >>> 0;\n        cache.set(key, result);\n        return result;\n    }\n    clear() {\n        this.cache.clear();\n    }\n}\n","import { zlibSync } from \"fflate\";\nimport { CRC32 } from \"./crc\";\nexport class PNGEncoder {\n    width;\n    height;\n    view;\n    pngData = new Uint8Array(0);\n    crc32 = new CRC32();\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n        this.view = new DataView(new ArrayBuffer(4 * width * height));\n    }\n    createChunk(type, data) {\n        // 长度（4字节，大端序）\n        const length = new Uint8Array(4);\n        new DataView(length.buffer).setUint32(0, data.length, false);\n        // 块类型（4字节， ASCII）\n        const chunkType = Uint8Array.from(type, c => c.charCodeAt(0));\n        // 计算 CRC32 校验（类型 + 数据）\n        const partialChunk = new Uint8Array(chunkType.length + data.length);\n        partialChunk.set(chunkType);\n        partialChunk.set(data, chunkType.length);\n        const crc = new Uint8Array(4);\n        new DataView(crc.buffer).setUint32(0, this.crc32.calculate(partialChunk) >>> 0, false);\n        const result = new Uint8Array(length.length + partialChunk.length + crc.length);\n        result.set(length);\n        result.set(partialChunk, length.length);\n        result.set(crc, length.length + partialChunk.length);\n        return result;\n    }\n    createIHDRChunk() {\n        const ihdrData = new Uint8Array(13);\n        const view = new DataView(ihdrData.buffer);\n        // 宽度\n        view.setUint32(0, this.width, false);\n        // 高度\n        view.setUint32(4, this.height, false);\n        // 位深度\n        view.setUint8(8, 8);\n        // 颜色类型\n        view.setUint8(9, 6);\n        // 压缩方法\n        view.setUint8(10, 0);\n        // 过滤器方法\n        view.setUint8(11, 0);\n        // 交错方法\n        view.setUint8(12, 0);\n        return this.createChunk(\"IHDR\", ihdrData);\n    }\n    createIDATChunk() {\n        const { width, height, view } = this;\n        const rowSize = width * 4 + 1;\n        const idatData = new Uint8Array(rowSize * height);\n        // 将Uint32数据转换为Uint8数据\n        const pixelsData = new Uint8Array(view.buffer);\n        for (let y = 0; y < height; y++) {\n            const startIdx = y * rowSize;\n            idatData[startIdx] = 0x00; // 过滤头\n            // ✅ 复制预先转换好的 RGBA 数据\n            const srcStart = y * width * 4; // Uint32 => 每个元素占 4 字节\n            const srcEnd = srcStart + width * 4;\n            idatData.set(pixelsData.subarray(srcStart, srcEnd), startIdx + 1);\n        }\n        // 使用 zlib 进行压缩, 平衡压缩率有利于提升文件生成速度\n        return this.createChunk(\"IDAT\", zlibSync(idatData));\n    }\n    createIENDChunk() {\n        return this.createChunk(\"IEND\", new Uint8Array(0));\n    }\n    setPixel(x, y, pixel) {\n        this.view.setUint32((y * this.width + x) * 4, pixel, false);\n    }\n    write(pixels) {\n        const { width, height } = this;\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const index = (y * width + x) * 4;\n                const r = pixels[index];\n                const g = pixels[index + 1];\n                const b = pixels[index + 2];\n                const a = pixels[index + 3];\n                const pixel = ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n                this.setPixel(x, y, pixel);\n            }\n        }\n    }\n    flush() {\n        // 1. 文件头（固定 8 字节）\n        const pngSignature = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);\n        // 预先创建所有块\n        const ihdrChunk = this.createIHDRChunk();\n        const idatChunk = this.createIDATChunk();\n        const iendChunk = this.createIENDChunk();\n        // 直接计算总大小\n        const totalSize = 8 + ihdrChunk.length + idatChunk.length + iendChunk.length;\n        // 一次性分配内存\n        this.pngData = new Uint8Array(totalSize);\n        let offset = 0;\n        // 按顺序写入数据\n        this.pngData.set(pngSignature, offset);\n        offset += pngSignature.length;\n        this.pngData.set(ihdrChunk, offset);\n        offset += ihdrChunk.length;\n        this.pngData.set(idatChunk, offset);\n        offset += idatChunk.length;\n        this.pngData.set(iendChunk, offset);\n        // 清空缓存\n        this.crc32.clear();\n    }\n    toBuffer() {\n        return this.pngData;\n    }\n}\n","// ---------------------------------------------------------------------\n// qrBitBuffer\n// ---------------------------------------------------------------------\nexport class BitBuffer {\n    buffer = [];\n    lengthInBits = 0;\n    getAt(i) {\n        const bufIndex = ~~(i / 8);\n        return ((this.buffer[bufIndex] >>> (7 - (i % 8))) & 1) == 1;\n    }\n    put(num, length) {\n        for (let i = 0; i < length; i++) {\n            this.putBit(((num >>> (length - i - 1)) & 1) == 1);\n        }\n    }\n    putBit(bit) {\n        const { lengthInBits: len, buffer } = this;\n        const bufIndex = ~~(len / 8);\n        if (buffer.length <= bufIndex) {\n            buffer.push(0);\n        }\n        if (bit) {\n            buffer[bufIndex] |= 0x80 >>> len % 8;\n        }\n        this.lengthInBits += 1;\n    }\n}\n","// ---------------------------------------------------------------------\n// QRMode\n// ---------------------------------------------------------------------\nexport const QRMode = {\n    MODE_NUMBER: 1 << 0,\n    MODE_ALPHA_NUM: 1 << 1,\n    MODE_8BIT_BYTE: 1 << 2,\n    MODE_KANJI: 1 << 3,\n};\n// ---------------------------------------------------------------------\n// QRErrorCorrectLevel\n// ---------------------------------------------------------------------\nexport const QRErrorCorrectLevel = {\n    L: 1,\n    M: 0,\n    Q: 3,\n    H: 2,\n};\n// ---------------------------------------------------------------------\n// QRMaskPattern\n// ---------------------------------------------------------------------\nexport const QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7,\n};\n","// ---------------------------------------------------------------------\n// qr8BitByte\n// ---------------------------------------------------------------------\nimport { QRMode } from \"./constants\";\nexport class BitByte {\n    bytes;\n    constructor(data) {\n        let parsedData = [];\n        // Added to support UTF-8 Characters\n        for (let i = 0; i < data.length; i++) {\n            const byteArray = [];\n            const code = data.charCodeAt(i);\n            if (code > 0x10000) {\n                byteArray[0] = 0xf0 | ((code & 0x1c0000) >>> 18);\n                byteArray[1] = 0x80 | ((code & 0x3f000) >>> 12);\n                byteArray[2] = 0x80 | ((code & 0xfc0) >>> 6);\n                byteArray[3] = 0x80 | (code & 0x3f);\n            }\n            else if (code > 0x800) {\n                byteArray[0] = 0xe0 | ((code & 0xf000) >>> 12);\n                byteArray[1] = 0x80 | ((code & 0xfc0) >>> 6);\n                byteArray[2] = 0x80 | (code & 0x3f);\n            }\n            else if (code > 0x80) {\n                byteArray[0] = 0xc0 | ((code & 0x7c0) >>> 6);\n                byteArray[1] = 0x80 | (code & 0x3f);\n            }\n            else {\n                byteArray[0] = code;\n            }\n            // Fix Unicode corruption bug\n            parsedData.push(byteArray);\n        }\n        this.bytes = parsedData.flat(1);\n        const { bytes } = this;\n        if (bytes.length != data.length) {\n            bytes.unshift(191);\n            bytes.unshift(187);\n            bytes.unshift(239);\n        }\n    }\n    get mode() {\n        return QRMode.MODE_8BIT_BYTE;\n    }\n    get length() {\n        return this.bytes.length;\n    }\n    write(buff) {\n        const { bytes } = this;\n        for (let i = 0; i < bytes.length; i++) {\n            buff.put(bytes[i], 8);\n        }\n    }\n}\n","// ---------------------------------------------------------------------\n// QRRSBlock\n// ---------------------------------------------------------------------\nimport { QRErrorCorrectLevel } from \"./constants\";\nconst RS_BLOCK_TABLE = [\n    [1, 26, 19],\n    [1, 26, 16],\n    [1, 26, 13],\n    [1, 26, 9],\n    [1, 44, 34],\n    [1, 44, 28],\n    [1, 44, 22],\n    [1, 44, 16],\n    [1, 70, 55],\n    [1, 70, 44],\n    [2, 35, 17],\n    [2, 35, 13],\n    [1, 100, 80],\n    [2, 50, 32],\n    [2, 50, 24],\n    [4, 25, 9],\n    [1, 134, 108],\n    [2, 67, 43],\n    [2, 33, 15, 2, 34, 16],\n    [2, 33, 11, 2, 34, 12],\n    [2, 86, 68],\n    [4, 43, 27],\n    [4, 43, 19],\n    [4, 43, 15],\n    [2, 98, 78],\n    [4, 49, 31],\n    [2, 32, 14, 4, 33, 15],\n    [4, 39, 13, 1, 40, 14],\n    [2, 121, 97],\n    [2, 60, 38, 2, 61, 39],\n    [4, 40, 18, 2, 41, 19],\n    [4, 40, 14, 2, 41, 15],\n    [2, 146, 116],\n    [3, 58, 36, 2, 59, 37],\n    [4, 36, 16, 4, 37, 17],\n    [4, 36, 12, 4, 37, 13],\n    [2, 86, 68, 2, 87, 69],\n    [4, 69, 43, 1, 70, 44],\n    [6, 43, 19, 2, 44, 20],\n    [6, 43, 15, 2, 44, 16],\n    [4, 101, 81],\n    [1, 80, 50, 4, 81, 51],\n    [4, 50, 22, 4, 51, 23],\n    [3, 36, 12, 8, 37, 13],\n    [2, 116, 92, 2, 117, 93],\n    [6, 58, 36, 2, 59, 37],\n    [4, 46, 20, 6, 47, 21],\n    [7, 42, 14, 4, 43, 15],\n    [4, 133, 107],\n    [8, 59, 37, 1, 60, 38],\n    [8, 44, 20, 4, 45, 21],\n    [12, 33, 11, 4, 34, 12],\n    [3, 145, 115, 1, 146, 116],\n    [4, 64, 40, 5, 65, 41],\n    [11, 36, 16, 5, 37, 17],\n    [11, 36, 12, 5, 37, 13],\n    [5, 109, 87, 1, 110, 88],\n    [5, 65, 41, 5, 66, 42],\n    [5, 54, 24, 7, 55, 25],\n    [11, 36, 12],\n    [5, 122, 98, 1, 123, 99],\n    [7, 73, 45, 3, 74, 46],\n    [15, 43, 19, 2, 44, 20],\n    [3, 45, 15, 13, 46, 16],\n    [1, 135, 107, 5, 136, 108],\n    [10, 74, 46, 1, 75, 47],\n    [1, 50, 22, 15, 51, 23],\n    [2, 42, 14, 17, 43, 15],\n    [5, 150, 120, 1, 151, 121],\n    [9, 69, 43, 4, 70, 44],\n    [17, 50, 22, 1, 51, 23],\n    [2, 42, 14, 19, 43, 15],\n    [3, 141, 113, 4, 142, 114],\n    [3, 70, 44, 11, 71, 45],\n    [17, 47, 21, 4, 48, 22],\n    [9, 39, 13, 16, 40, 14],\n    [3, 135, 107, 5, 136, 108],\n    [3, 67, 41, 13, 68, 42],\n    [15, 54, 24, 5, 55, 25],\n    [15, 43, 15, 10, 44, 16],\n    [4, 144, 116, 4, 145, 117],\n    [17, 68, 42],\n    [17, 50, 22, 6, 51, 23],\n    [19, 46, 16, 6, 47, 17],\n    [2, 139, 111, 7, 140, 112],\n    [17, 74, 46],\n    [7, 54, 24, 16, 55, 25],\n    [34, 37, 13],\n    [4, 151, 121, 5, 152, 122],\n    [4, 75, 47, 14, 76, 48],\n    [11, 54, 24, 14, 55, 25],\n    [16, 45, 15, 14, 46, 16],\n    [6, 147, 117, 4, 148, 118],\n    [6, 73, 45, 14, 74, 46],\n    [11, 54, 24, 16, 55, 25],\n    [30, 46, 16, 2, 47, 17],\n    [8, 132, 106, 4, 133, 107],\n    [8, 75, 47, 13, 76, 48],\n    [7, 54, 24, 22, 55, 25],\n    [22, 45, 15, 13, 46, 16],\n    [10, 142, 114, 2, 143, 115],\n    [19, 74, 46, 4, 75, 47],\n    [28, 50, 22, 6, 51, 23],\n    [33, 46, 16, 4, 47, 17],\n    [8, 152, 122, 4, 153, 123],\n    [22, 73, 45, 3, 74, 46],\n    [8, 53, 23, 26, 54, 24],\n    [12, 45, 15, 28, 46, 16],\n    [3, 147, 117, 10, 148, 118],\n    [3, 73, 45, 23, 74, 46],\n    [4, 54, 24, 31, 55, 25],\n    [11, 45, 15, 31, 46, 16],\n    [7, 146, 116, 7, 147, 117],\n    [21, 73, 45, 7, 74, 46],\n    [1, 53, 23, 37, 54, 24],\n    [19, 45, 15, 26, 46, 16],\n    [5, 145, 115, 10, 146, 116],\n    [19, 75, 47, 10, 76, 48],\n    [15, 54, 24, 25, 55, 25],\n    [23, 45, 15, 25, 46, 16],\n    [13, 145, 115, 3, 146, 116],\n    [2, 74, 46, 29, 75, 47],\n    [42, 54, 24, 1, 55, 25],\n    [23, 45, 15, 28, 46, 16],\n    [17, 145, 115],\n    [10, 74, 46, 23, 75, 47],\n    [10, 54, 24, 35, 55, 25],\n    [19, 45, 15, 35, 46, 16],\n    [17, 145, 115, 1, 146, 116],\n    [14, 74, 46, 21, 75, 47],\n    [29, 54, 24, 19, 55, 25],\n    [11, 45, 15, 46, 46, 16],\n    [13, 145, 115, 6, 146, 116],\n    [14, 74, 46, 23, 75, 47],\n    [44, 54, 24, 7, 55, 25],\n    [59, 46, 16, 1, 47, 17],\n    [12, 151, 121, 7, 152, 122],\n    [12, 75, 47, 26, 76, 48],\n    [39, 54, 24, 14, 55, 25],\n    [22, 45, 15, 41, 46, 16],\n    [6, 151, 121, 14, 152, 122],\n    [6, 75, 47, 34, 76, 48],\n    [46, 54, 24, 10, 55, 25],\n    [2, 45, 15, 64, 46, 16],\n    [17, 152, 122, 4, 153, 123],\n    [29, 74, 46, 14, 75, 47],\n    [49, 54, 24, 10, 55, 25],\n    [24, 45, 15, 46, 46, 16],\n    [4, 152, 122, 18, 153, 123],\n    [13, 74, 46, 32, 75, 47],\n    [48, 54, 24, 14, 55, 25],\n    [42, 45, 15, 32, 46, 16],\n    [20, 147, 117, 4, 148, 118],\n    [40, 75, 47, 7, 76, 48],\n    [43, 54, 24, 22, 55, 25],\n    [10, 45, 15, 67, 46, 16],\n    [19, 148, 118, 6, 149, 119],\n    [18, 75, 47, 31, 76, 48],\n    [34, 54, 24, 34, 55, 25],\n    [20, 45, 15, 61, 46, 16],\n];\nexport class RSBlock {\n    getRSBlockTable(typeNumber, errorCorrectLevel) {\n        const { L, M, Q, H } = QRErrorCorrectLevel;\n        const pos = (typeNumber - 1) * 4;\n        switch (errorCorrectLevel) {\n            case L:\n                return RS_BLOCK_TABLE[pos + 0];\n            case M:\n                return RS_BLOCK_TABLE[pos + 1];\n            case Q:\n                return RS_BLOCK_TABLE[pos + 2];\n            case H:\n                return RS_BLOCK_TABLE[pos + 3];\n            default:\n                throw new Error(`bad rs block @ typeNumber:${typeNumber}/errorCorrectLevel: ${errorCorrectLevel}`);\n        }\n    }\n    getRSBlocks(typeNumber, errorCorrectLevel) {\n        const rsBlock = this.getRSBlockTable(typeNumber, errorCorrectLevel);\n        const length = rsBlock.length / 3;\n        const list = [];\n        for (let i = 0; i < length; i++) {\n            const count = rsBlock[i * 3];\n            const totalCount = rsBlock[i * 3 + 1];\n            const dataCount = rsBlock[i * 3 + 2];\n            for (let j = 0; j < count; j++) {\n                list.push({ totalCount, dataCount });\n            }\n        }\n        return list;\n    }\n}\n","// ---------------------------------------------------------------------\n// QRMath\n// ---------------------------------------------------------------------\nconst EXP_TABLE = new Array(256);\nconst LOG_TABLE = new Array(256);\n// initialize tables\nfor (let i = 0; i < 8; i++) {\n    EXP_TABLE[i] = 1 << i;\n}\nfor (let i = 8; i < 256; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\n}\nfor (let i = 0; i < 255; i++) {\n    LOG_TABLE[EXP_TABLE[i]] = i;\n}\nexport const QRMath = {\n    glog(n) {\n        if (n < 1) {\n            throw new Error(`glog(${n})`);\n        }\n        return LOG_TABLE[n];\n    },\n    gexp(n) {\n        if (n < 0) {\n            n = 255 + (n % 255);\n        }\n        else if (n > 255) {\n            n %= 255;\n        }\n        return EXP_TABLE[n];\n    }\n};\n","// ---------------------------------------------------------------------\n// Polynomial\n// ---------------------------------------------------------------------\nimport { QRMath } from \"./math\";\nexport class Polynomial {\n    num;\n    constructor(num, shift) {\n        const { length } = num;\n        if (typeof length == 'undefined') {\n            throw new Error(`${length}/${shift}`);\n        }\n        let offset = 0;\n        while (offset < length && num[offset] == 0) {\n            offset++;\n        }\n        const len = length - offset;\n        this.num = new Array(len + shift);\n        for (let i = 0; i < len; i++) {\n            this.num[i] = num[i + offset];\n        }\n    }\n    get length() {\n        return this.num.length;\n    }\n    getAt(i) {\n        return this.num[i];\n    }\n    multiply(e) {\n        const { glog, gexp } = QRMath;\n        const num = [];\n        for (let i = 0; i < this.length; i++) {\n            for (let j = 0; j < e.length; j++) {\n                num[i + j] ^= gexp(glog(this.getAt(i)) + glog(e.getAt(j)));\n            }\n        }\n        return new Polynomial(num, 0);\n    }\n    mod(e) {\n        if (this.length - e.length < 0) {\n            return this;\n        }\n        const { glog, gexp } = QRMath;\n        const ratio = glog(this.getAt(0)) - glog(e.getAt(0));\n        const num = [];\n        for (var i = 0; i < this.length; i++) {\n            const n = this.getAt(i);\n            num[i] = i < e.length ? n ^ gexp(glog(e.getAt(i)) + ratio) : n;\n        }\n        // recursive call\n        return new Polynomial(num, 0).mod(e);\n    }\n}\n","import { Polynomial } from \"./polynomial\";\nimport { QRMaskPattern, QRMode } from \"./constants\";\nimport { QRMath } from \"./math\";\nconst PATTERN_POSITION_TABLE = [\n    [],\n    [6, 18],\n    [6, 22],\n    [6, 26],\n    [6, 30],\n    [6, 34],\n    [6, 22, 38],\n    [6, 24, 42],\n    [6, 26, 46],\n    [6, 28, 50],\n    [6, 30, 54],\n    [6, 32, 58],\n    [6, 34, 62],\n    [6, 26, 46, 66],\n    [6, 26, 48, 70],\n    [6, 26, 50, 74],\n    [6, 30, 54, 78],\n    [6, 30, 56, 82],\n    [6, 30, 58, 86],\n    [6, 34, 62, 90],\n    [6, 28, 50, 72, 94],\n    [6, 26, 50, 74, 98],\n    [6, 30, 54, 78, 102],\n    [6, 28, 54, 80, 106],\n    [6, 32, 58, 84, 110],\n    [6, 30, 58, 86, 114],\n    [6, 34, 62, 90, 118],\n    [6, 26, 50, 74, 98, 122],\n    [6, 30, 54, 78, 102, 126],\n    [6, 26, 52, 78, 104, 130],\n    [6, 30, 56, 82, 108, 134],\n    [6, 34, 60, 86, 112, 138],\n    [6, 30, 58, 86, 114, 142],\n    [6, 34, 62, 90, 118, 146],\n    [6, 30, 54, 78, 102, 126, 150],\n    [6, 24, 50, 76, 102, 128, 154],\n    [6, 28, 54, 80, 106, 132, 158],\n    [6, 32, 58, 84, 110, 136, 162],\n    [6, 26, 54, 82, 110, 138, 166],\n    [6, 30, 58, 86, 114, 142, 170],\n];\nconst G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\nconst G18 = (1 << 12) |\n    (1 << 11) |\n    (1 << 10) |\n    (1 << 9) |\n    (1 << 8) |\n    (1 << 5) |\n    (1 << 2) |\n    (1 << 0);\nconst G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\nconst genBCHDigit = (data) => data == 0 ? 0 : Math.log2(data);\nconst BCH_G15 = genBCHDigit(G15);\nconst BCH_G18 = genBCHDigit(G18);\n// ---------------------------------------------------------------------\n// QRUtil\n// ---------------------------------------------------------------------\nexport const Util = {\n    getBCHTypeInfo(data) {\n        let d = data << 10;\n        while (genBCHDigit(d) - BCH_G15 >= 0) {\n            d ^= G15 << (genBCHDigit(d) - BCH_G15);\n        }\n        return ((data << 10) | d) ^ G15_MASK;\n    },\n    getBCHTypeNumber(data) {\n        let d = data << 12;\n        while (genBCHDigit(d) - BCH_G18 >= 0) {\n            d ^= G18 << (genBCHDigit(d) - BCH_G18);\n        }\n        return (data << 12) | d;\n    },\n    getPatternPosition(typeNumber) {\n        return PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n    getMaskFunction(maskPattern) {\n        const { PATTERN000, PATTERN001, PATTERN010, PATTERN011, PATTERN100, PATTERN101, PATTERN110, PATTERN111, } = QRMaskPattern;\n        switch (maskPattern) {\n            case PATTERN000:\n                return (i, j) => (i + j) % 2 == 0;\n            case PATTERN001:\n                return (i) => i % 2 == 0;\n            case PATTERN010:\n                return (_i, j) => j % 3 == 0;\n            case PATTERN011:\n                return (i, j) => (i + j) % 3 == 0;\n            case PATTERN100:\n                return (i, j) => (~~(i / 2) + ~~(j / 3)) % 2 == 0;\n            case PATTERN101:\n                return (i, j) => ((i * j) % 2) + ((i * j) % 3) == 0;\n            case PATTERN110:\n                return (i, j) => (((i * j) % 2) + ((i * j) % 3)) % 2 == 0;\n            case PATTERN111:\n                return (i, j) => (((i * j) % 3) + ((i + j) % 2)) % 2 == 0;\n            default:\n                throw new Error(`bad maskPattern: ${maskPattern}`);\n        }\n    },\n    getErrorCorrectPolynomial(errorCorrectLength) {\n        let a = new Polynomial([1], 0);\n        for (let i = 0; i < errorCorrectLength; i++) {\n            a = a.multiply(new Polynomial([1, QRMath.gexp(i)], 0));\n        }\n        return a;\n    },\n    getLengthInBits(mode, type) {\n        const { MODE_NUMBER, MODE_ALPHA_NUM, MODE_8BIT_BYTE, MODE_KANJI } = QRMode;\n        if (type < 1 || type > 40) {\n            throw new Error(`type: ${type}`);\n        }\n        if (type >= 1 && type < 10) {\n            // 1 - 9\n            switch (mode) {\n                case MODE_NUMBER:\n                    return 10;\n                case MODE_ALPHA_NUM:\n                    return 9;\n                case MODE_8BIT_BYTE:\n                    return 8;\n                case MODE_KANJI:\n                    return 8;\n                default:\n            }\n        }\n        if (type < 27) {\n            // 10 - 26\n            switch (mode) {\n                case MODE_NUMBER:\n                    return 12;\n                case MODE_ALPHA_NUM:\n                    return 11;\n                case MODE_8BIT_BYTE:\n                    return 16;\n                case MODE_KANJI:\n                    return 10;\n                default:\n            }\n        }\n        if (type <= 40) {\n            // 27 - 40\n            switch (mode) {\n                case MODE_NUMBER:\n                    return 14;\n                case MODE_ALPHA_NUM:\n                    return 13;\n                case MODE_8BIT_BYTE:\n                    return 16;\n                case MODE_KANJI:\n                    return 12;\n                default:\n            }\n        }\n        throw new Error(`mode: ${mode}`);\n    },\n    getLostPoint(qr) {\n        const moduleCount = qr.getModuleCount();\n        let lostPoint = 0;\n        // LEVEL1\n        for (let row = 0; row < moduleCount; row++) {\n            for (let col = 0; col < moduleCount; col++) {\n                const dark = qr.isDark(row, col);\n                let sameCount = 0;\n                for (let r = -1; r <= 1; r++) {\n                    const nRow = row + r;\n                    if (nRow < 0 || moduleCount <= nRow)\n                        continue;\n                    for (let c = -1; c <= 1; c++) {\n                        const nCol = col + c;\n                        if (nCol < 0 || moduleCount <= nCol)\n                            continue;\n                        if (r == 0 && c == 0)\n                            continue;\n                        if (dark == qr.isDark(nRow, nCol)) {\n                            sameCount++;\n                        }\n                    }\n                }\n                if (sameCount > 5) {\n                    lostPoint += sameCount + 3 - 5;\n                }\n            }\n        }\n        // LEVEL2\n        for (let row = 0; row < moduleCount - 1; row++) {\n            for (let col = 0; col < moduleCount - 1; col++) {\n                let count = 0;\n                if (qr.isDark(row, col))\n                    count++;\n                if (qr.isDark(row + 1, col))\n                    count++;\n                if (qr.isDark(row, col + 1))\n                    count++;\n                if (qr.isDark(row + 1, col + 1))\n                    count++;\n                if (count == 0 || count == 4) {\n                    lostPoint += 3;\n                }\n            }\n        }\n        // LEVEL3\n        for (let row = 0; row < moduleCount; row++) {\n            for (let col = 0; col < moduleCount - 6; col++) {\n                if (qr.isDark(row, col) &&\n                    !qr.isDark(row, col + 1) &&\n                    qr.isDark(row, col + 2) &&\n                    qr.isDark(row, col + 3) &&\n                    qr.isDark(row, col + 4) &&\n                    !qr.isDark(row, col + 5) &&\n                    qr.isDark(row, col + 6)) {\n                    lostPoint += 40;\n                }\n            }\n        }\n        for (let col = 0; col < moduleCount; col++) {\n            for (let row = 0; row < moduleCount - 6; row++) {\n                if (qr.isDark(row, col) &&\n                    !qr.isDark(row + 1, col) &&\n                    qr.isDark(row + 2, col) &&\n                    qr.isDark(row + 3, col) &&\n                    qr.isDark(row + 4, col) &&\n                    !qr.isDark(row + 5, col) &&\n                    qr.isDark(row + 6, col)) {\n                    lostPoint += 40;\n                }\n            }\n        }\n        // LEVEL4\n        let darkCount = 0;\n        for (let col = 0; col < moduleCount; col++) {\n            for (let row = 0; row < moduleCount; row++) {\n                if (qr.isDark(row, col)) {\n                    darkCount++;\n                }\n            }\n        }\n        const ratio = Math.abs((100 * darkCount) / Math.pow(moduleCount, 2) - 50) / 5;\n        return lostPoint + ratio * 10;\n    },\n};\n","// ---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2025 LiHZSky\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n// http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//\n// ---------------------------------------------------------------------\nimport { BitBuffer } from \"./bit-buffer\";\nimport { BitByte } from \"./bit-byte\";\nimport { RSBlock } from \"./block\";\nimport { QRErrorCorrectLevel } from \"./constants\";\nimport { Polynomial } from \"./polynomial\";\nimport { Util } from \"./util\";\nconst PAD0 = 0xec;\nconst PAD1 = 0x11;\n/**\n * QRCode实现\n * https://www.cnblogs.com/leestar54/p/15782929.html\n * @param typeNumber 1 to 40\n * @param errorCorrectLevel 'L','M','Q','H'\n */\nexport class QRCode {\n    typeNumber;\n    errorCorrectLevel;\n    modules = [];\n    moduleCount = 0;\n    dataCache = null;\n    dataList = [];\n    constructor(typeNumber, errorCorrectLevel) {\n        this.typeNumber = typeNumber;\n        this.errorCorrectLevel = QRErrorCorrectLevel[errorCorrectLevel];\n    }\n    makeImpl(test, maskPattern) {\n        this.moduleCount = this.typeNumber * 4 + 17;\n        this.modules = ((moduleCount) => {\n            const modules = [];\n            // 预设一个 moduleCount * moduleCount 的空白矩阵\n            for (let row = 0; row < moduleCount; row++) {\n                modules[row] = [];\n                for (let col = 0; col < moduleCount; col++) {\n                    modules[row][col] = null;\n                }\n            }\n            return modules;\n        })(this.moduleCount);\n        ;\n        const count = this.moduleCount - 7;\n        this.setupPositionProbePattern(0, 0);\n        this.setupPositionProbePattern(count, 0);\n        this.setupPositionProbePattern(0, count);\n        this.setupPositionAdjustPattern();\n        this.setupTimingPattern();\n        this.setupTypeInfo(test, maskPattern);\n        if (this.typeNumber >= 7) {\n            this.setupTypeNumber(test);\n        }\n        if (this.dataCache == null) {\n            this.dataCache = this.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n        }\n        this.mapData(this.dataCache, maskPattern);\n    }\n    setupPositionProbePattern(row, col) {\n        const { modules, moduleCount } = this;\n        for (let r = -1; r <= 7; r++) {\n            const nr = row + r;\n            if (nr <= -1 || moduleCount <= nr)\n                continue;\n            for (let c = -1; c <= 7; c++) {\n                const nc = col + c;\n                if (nc <= -1 || moduleCount <= nc)\n                    continue;\n                modules[nr][nc] =\n                    (r >= 0 && r <= 6 && (c == 0 || c == 6)) ||\n                        (c >= 0 && c <= 6 && (r == 0 || r == 6)) ||\n                        (r >= 2 && r <= 4 && c >= 2 && c <= 4);\n            }\n        }\n    }\n    setupPositionAdjustPattern() {\n        const { typeNumber, modules } = this;\n        const pos = Util.getPatternPosition(typeNumber);\n        const { length } = pos;\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < length; j++) {\n                const row = pos[i];\n                const col = pos[j];\n                if (modules[row][col] != null)\n                    continue;\n                for (let r = -2; r <= 2; r++) {\n                    for (let c = -2; c <= 2; c++) {\n                        modules[row + r][col + c] =\n                            r == -2 || r == 2 || c == -2 || c == 2 || (r == 0 && c == 0);\n                    }\n                }\n            }\n        }\n    }\n    setupTimingPattern() {\n        const { moduleCount, modules } = this;\n        const count = moduleCount - 8;\n        for (let r = 8; r < count; r++) {\n            if (modules[r][6] != null)\n                continue;\n            modules[r][6] = r % 2 == 0;\n        }\n        for (let c = 8; c < count; c++) {\n            if (modules[6][c] != null)\n                continue;\n            modules[6][c] = c % 2 == 0;\n        }\n    }\n    setupTypeInfo(test, maskPattern) {\n        const { errorCorrectLevel, modules, moduleCount } = this;\n        const data = (errorCorrectLevel << 3) | maskPattern;\n        const bits = Util.getBCHTypeInfo(data);\n        // vertical\n        for (let i = 0; i < 15; i++) {\n            const mod = !test && ((bits >> i) & 1) == 1;\n            if (i < 6) {\n                modules[i][8] = mod;\n            }\n            else if (i < 8) {\n                modules[i + 1][8] = mod;\n            }\n            else {\n                modules[moduleCount - 15 + i][8] = mod;\n            }\n        }\n        // horizontal\n        for (let i = 0; i < 15; i++) {\n            const mod = !test && ((bits >> i) & 1) == 1;\n            if (i < 8) {\n                modules[8][moduleCount - i - 1] = mod;\n            }\n            else if (i < 9) {\n                modules[8][15 - i] = mod;\n            }\n            else {\n                modules[8][15 - i - 1] = mod;\n            }\n        }\n        // fixed module\n        modules[moduleCount - 8][8] = !test;\n    }\n    getBestMaskPattern() {\n        let minLostPoint = 0;\n        let pattern = 0;\n        for (let i = 0; i < 8; i++) {\n            this.makeImpl(true, i);\n            const lostPoint = Util.getLostPoint(this);\n            if (i == 0 || minLostPoint > lostPoint) {\n                minLostPoint = lostPoint;\n                pattern = i;\n            }\n        }\n        return pattern;\n    }\n    setupTypeNumber(test) {\n        const { typeNumber, modules, moduleCount } = this;\n        const bits = Util.getBCHTypeNumber(typeNumber);\n        for (let i = 0; i < 18; i++) {\n            const mod = !test && ((bits >> i) & 1) == 1;\n            modules[~~(i / 3)][(i % 3) + moduleCount - 8 - 3] = mod;\n            modules[(i % 3) + moduleCount - 8 - 3][~~(i / 3)] = mod;\n        }\n    }\n    createData(typeNumber, errorCorrectLevel, dataList) {\n        const rsBlocks = new RSBlock().getRSBlocks(typeNumber, errorCorrectLevel);\n        const buffer = new BitBuffer();\n        for (let i = 0; i < dataList.length; i++) {\n            const data = dataList[i];\n            buffer.put(data.mode, 4);\n            buffer.put(data.length, Util.getLengthInBits(data.mode, typeNumber));\n            data.write(buffer);\n        }\n        // calc num max data.\n        let totalDataCount = 0;\n        for (let i = 0; i < rsBlocks.length; i++) {\n            totalDataCount += rsBlocks[i].dataCount;\n        }\n        const totalCount = totalDataCount * 8;\n        if (buffer.lengthInBits > totalCount) {\n            throw new Error(`code length overflow. (${buffer.lengthInBits} > ${totalCount})`);\n        }\n        // end code\n        if (buffer.lengthInBits + 4 <= totalCount) {\n            buffer.put(0, 4);\n        }\n        // padding\n        while (buffer.lengthInBits % 8 != 0) {\n            buffer.putBit(false);\n        }\n        // padding\n        while (true) {\n            if (buffer.lengthInBits >= totalCount) {\n                break;\n            }\n            buffer.put(PAD0, 8);\n            if (buffer.lengthInBits >= totalCount) {\n                break;\n            }\n            buffer.put(PAD1, 8);\n        }\n        return this.createBytes(buffer, rsBlocks);\n    }\n    mapData(data, maskPattern) {\n        const { modules, moduleCount } = this;\n        const maskFunc = Util.getMaskFunction(maskPattern);\n        let inc = -1;\n        let row = moduleCount - 1;\n        let bitIndex = 7;\n        let byteIndex = 0;\n        for (let col = row; col > 0; col -= 2) {\n            if (col == 6)\n                col -= 1;\n            while (true) {\n                for (let c = 0; c < 2; c++) {\n                    if (modules[row][col - c] == null) {\n                        let dark = false;\n                        if (byteIndex < data.length) {\n                            dark = ((data[byteIndex] >>> bitIndex) & 1) == 1;\n                        }\n                        if (maskFunc(row, col - c)) {\n                            dark = !dark;\n                        }\n                        modules[row][col - c] = dark;\n                        bitIndex--;\n                        if (bitIndex == -1) {\n                            byteIndex++;\n                            bitIndex = 7;\n                        }\n                    }\n                }\n                row += inc;\n                if (row < 0 || moduleCount <= row) {\n                    row -= inc;\n                    inc = -inc;\n                    break;\n                }\n            }\n        }\n    }\n    createBytes(bitBuffer, rsBlocks) {\n        const dcdata = [];\n        const ecdata = [];\n        let offset = 0;\n        let maxDcCount = 0;\n        let maxEcCount = 0;\n        for (let r = 0; r < rsBlocks.length; r++) {\n            const dcCount = rsBlocks[r].dataCount;\n            const ecCount = rsBlocks[r].totalCount - dcCount;\n            maxDcCount = Math.max(maxDcCount, dcCount);\n            maxEcCount = Math.max(maxEcCount, ecCount);\n            dcdata[r] = [];\n            for (let i = 0; i < dcCount; i++) {\n                dcdata[r][i] = 0xff & bitBuffer.buffer[i + offset];\n            }\n            offset += dcCount;\n            const rsPoly = Util.getErrorCorrectPolynomial(ecCount);\n            const rawPoly = new Polynomial(dcdata[r], rsPoly.length - 1);\n            const modPoly = rawPoly.mod(rsPoly);\n            ecdata[r] = new Array(rsPoly.length - 1);\n            for (let i = 0; i < ecdata[r].length; i++) {\n                const modIndex = i + modPoly.length - ecdata[r].length;\n                ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n            }\n        }\n        let totalCodeCount = 0;\n        for (let i = 0; i < rsBlocks.length; i++) {\n            totalCodeCount += rsBlocks[i].totalCount;\n        }\n        const data = new Array(totalCodeCount);\n        let index = 0;\n        for (let i = 0; i < maxDcCount; i++) {\n            for (let r = 0; r < rsBlocks.length; r++) {\n                if (i < dcdata[r].length) {\n                    data[index++] = dcdata[r][i];\n                }\n            }\n        }\n        for (let i = 0; i < maxEcCount; i++) {\n            for (let r = 0; r < rsBlocks.length; r++) {\n                if (i < ecdata[r].length) {\n                    data[index++] = ecdata[r][i];\n                }\n            }\n        }\n        return data;\n    }\n    isDark(row, col) {\n        const { moduleCount } = this;\n        if (row < 0 || moduleCount <= row || col < 0 || moduleCount <= col) {\n            throw new Error(`${row}, ${col}`);\n        }\n        return this.modules[row][col];\n    }\n    addData(data) {\n        this.dataList.push(new BitByte(data));\n        this.dataCache = null;\n    }\n    getModuleCount() {\n        return this.moduleCount;\n    }\n    make() {\n        this.makeImpl(false, this.getBestMaskPattern());\n    }\n}\n","import { platform } from \"../platform\";\nimport { PNGEncoder, QRCode } from \"../extensions\";\nfunction parseOptions(options) {\n    const typeNumber = options.typeNumber ?? 4;\n    const correctLevel = options.correctLevel ?? \"H\";\n    const codeColor = options.codeColor ?? \"#000000\";\n    const backgroundColor = options.backgroundColor ?? \"#FFFFFF\";\n    return {\n        code: options.code,\n        size: options.size,\n        typeNumber,\n        correctLevel,\n        codeColor,\n        backgroundColor,\n    };\n}\nconst calcCellSizeAndPadding = (moduleCount, size) => {\n    const cellSize = ~~(size / moduleCount);\n    return {\n        padding: ~~((size - moduleCount * cellSize) / 2),\n        cellSize: cellSize || 2,\n    };\n};\nexport function generateImageBufferFromCode(options) {\n    const { code, typeNumber, correctLevel, size, codeColor, backgroundColor } = parseOptions(options);\n    let qr;\n    try {\n        qr = new QRCode(typeNumber, correctLevel);\n        qr.addData(code);\n        qr.make();\n    }\n    catch (e) {\n        if (typeNumber >= 40) {\n            throw new Error(\"Text too long to encode\");\n        }\n        return arguments.callee({\n            code,\n            size,\n            correctLevel,\n            typeNumber: typeNumber + 1,\n            codeColor,\n            backgroundColor,\n        });\n    }\n    // calc cellsize and margin\n    const moduleCount = qr.getModuleCount();\n    const { padding, cellSize } = calcCellSizeAndPadding(moduleCount, size);\n    const max = moduleCount * cellSize + padding;\n    const CODE_COLOR = +`${codeColor.replace(\"#\", \"0x\")}FF`;\n    const BACKGROUND_COLOR = +`${backgroundColor.replace(\"#\", \"0x\")}FF`;\n    const png = new PNGEncoder(size, size);\n    for (let y = 0; y < size; y++) {\n        for (let x = 0; x < size; x++) {\n            if (padding <= x && x < max && padding <= y && y < max) {\n                const c = ~~((x - padding) / cellSize);\n                const r = ~~((y - padding) / cellSize);\n                png.setPixel(x, y, qr.isDark(r, c) ? CODE_COLOR : BACKGROUND_COLOR);\n            }\n            else {\n                png.setPixel(x, y, BACKGROUND_COLOR);\n            }\n        }\n    }\n    png.flush();\n    return png.toBuffer();\n}\nexport function generateImageFromCode(options) {\n    const buff = generateImageBufferFromCode(options);\n    return platform.decode.toDataURL(buff);\n}\n","import { platform } from \"../platform\";\nimport { PNGEncoder } from \"../extensions\";\nexport function getBufferFromImageData(imageData) {\n    const { width, height, data } = imageData;\n    const pngEncoder = new PNGEncoder(width, height);\n    pngEncoder.write(data);\n    pngEncoder.flush();\n    return pngEncoder.toBuffer();\n}\nexport function getDataURLFromImageData(imageData) {\n    const buff = getBufferFromImageData(imageData);\n    return platform.decode.toDataURL(buff);\n}\n","import { platform } from \"../platform\";\nimport { Parser } from \"../parser\";\nexport class VideoManager {\n    /**\n     * 视频池的当前指针位置\n     */\n    point = 0;\n    /**\n     * 视频的最大留存数量，其他视频将放在磁盘上缓存\n     */\n    maxRemain = 3;\n    /**\n     * 留存视频的开始指针位置\n     */\n    remainStart = 0;\n    /**\n     * 留存视频的结束指针位置\n     */\n    remainEnd = 0;\n    /**\n     * 视频加载模式\n     * 快速加载模式：可保证当前视频加载完成后，尽快播放；其他请求将使用Promise的方式保存在bucket中，以供后续使用\n     * 完整加载模式：可保证所有视频加载完成，确保播放切换的流畅性\n     */\n    loadMode = \"fast\";\n    /**\n     * 视频池的所有数据\n     */\n    buckets = [];\n    /**\n     * SVGA解析器\n     */\n    parser = new Parser();\n    /**\n     * 获取视频池大小\n     */\n    get length() {\n        return this.buckets.length;\n    }\n    /**\n     * 更新留存指针位置\n     */\n    updateRemainPoints() {\n        if (this.point < Math.ceil(this.maxRemain / 2)) {\n            this.remainStart = 0;\n            this.remainEnd = this.maxRemain;\n        }\n        else if (this.length - this.point < Math.floor(this.maxRemain / 2)) {\n            this.remainStart = this.remainEnd - this.maxRemain;\n            this.remainEnd = this.length;\n        }\n        else {\n            this.remainStart = Math.floor(this.point - this.maxRemain / 2);\n            this.remainEnd = this.remainStart + this.maxRemain;\n        }\n    }\n    /**\n     * 更新留存指针位置\n     * @param point 最新的指针位置\n     * @returns\n     */\n    updateBucketOperators(point) {\n        const { remainStart, remainEnd } = this;\n        this.point = point;\n        this.updateRemainPoints();\n        if (remainStart === remainEnd) {\n            return [\n                {\n                    action: \"add\",\n                    start: this.remainStart,\n                    end: this.remainEnd,\n                },\n            ];\n        }\n        if (this.remainStart > remainEnd || this.remainEnd < remainStart) {\n            return [\n                {\n                    action: \"remove\",\n                    start: remainStart,\n                    end: remainEnd,\n                },\n                {\n                    action: \"add\",\n                    start: this.remainStart,\n                    end: this.remainEnd,\n                },\n            ];\n        }\n        if (this.remainStart > remainStart && this.remainEnd > remainEnd) {\n            return [\n                {\n                    action: \"remove\",\n                    start: remainStart,\n                    end: this.remainStart,\n                },\n                {\n                    action: \"add\",\n                    start: remainEnd,\n                    end: this.remainEnd,\n                },\n            ];\n        }\n        if (this.remainStart < remainStart && this.remainEnd < remainEnd) {\n            return [\n                {\n                    action: \"remove\",\n                    start: this.remainEnd,\n                    end: remainEnd,\n                },\n                {\n                    action: \"add\",\n                    start: this.remainStart,\n                    end: remainStart,\n                },\n            ];\n        }\n        return [];\n    }\n    /**\n     * 获取当前的视频信息\n     * @param point 最新的指针位置\n     * @returns\n     */\n    async getBucket(point) {\n        if (point < 0 || point >= this.length) {\n            return this.buckets[this.point];\n        }\n        const operators = this.updateBucketOperators(point);\n        if (operators.length) {\n            const waitings = [];\n            operators.forEach(({ action, start, end }) => {\n                for (let i = start; i < end; i++) {\n                    const bucket = this.buckets[i];\n                    if (action === \"remove\") {\n                        bucket.entity = null;\n                    }\n                    else if (action === \"add\") {\n                        bucket.promise = this.parser.load(bucket.local || bucket.origin);\n                        if (this.loadMode === \"whole\" || this.point === i) {\n                            waitings.push(bucket.promise);\n                        }\n                    }\n                }\n            });\n            await Promise.all(waitings);\n        }\n        return this.get();\n    }\n    /**\n     * 视频加载模式\n     * @param loadMode\n     */\n    setLoadMode(loadMode) {\n        this.loadMode = loadMode;\n    }\n    /**\n     * 预加载视频到本地磁盘中\n     * @param urls 视频远程地址\n     * @param point 当前指针位置\n     * @param maxRemain 最大留存数量\n     */\n    async prepare(urls, point, maxRemain) {\n        const { parser, loadMode } = this;\n        const { globals, path, local } = platform;\n        const { env } = globals;\n        this.point =\n            typeof point === \"number\" && point > 0 && point < urls.length ? point : 0;\n        this.maxRemain =\n            typeof maxRemain === \"number\" && maxRemain > 0 ? maxRemain : 3;\n        this.updateRemainPoints();\n        this.buckets = await Promise.all(urls.map(async (url, index) => {\n            const bucket = {\n                origin: url,\n                local: \"\",\n                entity: null,\n                // filesize: 0,\n                promise: null,\n            };\n            if (env === \"h5\" || env === \"tt\") {\n                bucket.local = url;\n                if (this.remainStart <= index && index < this.remainEnd) {\n                    if (loadMode === \"whole\" || index === this.point) {\n                        bucket.entity = await parser.load(url);\n                    }\n                    else {\n                        bucket.promise = parser.load(url);\n                    }\n                }\n                return bucket;\n            }\n            const filePath = path.resolve(path.filename(url), \"full\");\n            const downloadAwait = parser.download(bucket.origin);\n            const parseVideoAwait = async (buff) => {\n                if (buff) {\n                    try {\n                        await local.write(buff, filePath);\n                        bucket.local = filePath;\n                    }\n                    catch (ex) {\n                        console.error(ex);\n                    }\n                    // bucket.filesize = buff.byteLength / 8;\n                    if (this.remainStart <= index && index < this.remainEnd) {\n                        return Parser.parseVideo(buff, url);\n                    }\n                }\n                return null;\n            };\n            if (loadMode === \"whole\" || index === this.point) {\n                bucket.entity = await parseVideoAwait(await downloadAwait);\n            }\n            else {\n                bucket.promise = downloadAwait.then(parseVideoAwait);\n            }\n            return bucket;\n        }));\n    }\n    /**\n     * 获取当前帧的bucket\n     * @returns\n     */\n    async get() {\n        const bucket = this.buckets[this.point];\n        if (bucket.promise) {\n            bucket.entity = await bucket.promise;\n            bucket.promise = null;\n            return bucket;\n        }\n        if (bucket.entity === null) {\n            bucket.entity = await this.parser.load(bucket.local || bucket.origin);\n            return bucket;\n        }\n        return bucket;\n    }\n    /**\n     * 获取指定位置的bucket\n     * @param pos\n     * @returns\n     */\n    go(pos) {\n        return this.getBucket(pos);\n    }\n    /**\n     * 获取当前指针位置\n     * @returns\n     */\n    getPoint() {\n        return this.point;\n    }\n    /**\n     * 清理所有的bucket\n     * @returns\n     */\n    clear() {\n        const { globals, local } = platform;\n        const { env } = globals;\n        const { buckets } = this;\n        this.buckets = [];\n        this.point = this.remainStart = this.remainEnd = 0;\n        this.maxRemain = 3;\n        return Promise.all(buckets.map((bucket) => {\n            if (env !== \"h5\" && env !== \"tt\") {\n                return local.remove(bucket.local);\n            }\n            return bucket.local;\n        }));\n    }\n}\n","import { platform } from \"../platform\";\nimport { generateImageBufferFromCode, } from \"./qrcode-helper\";\nimport { getBufferFromImageData } from \"./png-helper\";\nexport class VideoEditor {\n    entity;\n    options;\n    constructor(entity, options = {}) {\n        this.entity = entity;\n        this.options = options;\n    }\n    async set(key, value, mode = \"R\") {\n        if (mode === \"A\") {\n            this.entity.dynamicElements[key] = await platform.image.load(value, this.entity.filename, `dynamic.${key}`);\n        }\n        else {\n            this.entity.images[key] = value;\n        }\n    }\n    /**\n     * 创建自定义编辑器\n     * @param width\n     * @param height\n     * @returns\n     */\n    async createContext(width, height) {\n        if (platform.globals.env !== \"h5\" || \"OffscreenCanvas\" in globalThis) {\n            return platform.getOfsCanvas({ width, height });\n        }\n        const { container, component } = this.options;\n        if (container) {\n            const result = await platform.getCanvas(container, component);\n            if (result.context) {\n                result.canvas.width = width;\n                result.canvas.height = height;\n            }\n            return result;\n        }\n        throw new Error(\"Don't support OffscreenCanvas, and please provide a container\");\n    }\n    /**\n     * 创建画布图片\n     * @param context\n     * @param options\n     * @returns\n     */\n    async setCanvas(key, context, options) {\n        if (this.entity.locked)\n            return;\n        const { width, height } = context.canvas;\n        const imageData = context.getImageData(0, 0, width, height);\n        const buff = getBufferFromImageData(imageData);\n        await this.set(key, new Uint8Array(buff), options?.mode);\n    }\n    /**\n     * 创建二进制图片\n     * @param key\n     * @param buff\n     * @param options\n     * @returns\n     */\n    async setImage(key, url, options) {\n        if (this.entity.locked)\n            return;\n        if (url.startsWith('data:image')) {\n            await this.set(key, url, options?.mode);\n        }\n        else {\n            const buff = await platform.remote.fetch(url);\n            await this.set(key, new Uint8Array(buff), options?.mode);\n        }\n    }\n    /**\n     * 创建二维码图片\n     * @param key\n     * @param code\n     * @param options\n     * @returns\n     */\n    async setQRCode(key, code, options) {\n        if (this.entity.locked)\n            return;\n        const buff = generateImageBufferFromCode({ ...options, code });\n        await this.set(key, new Uint8Array(buff), options?.mode);\n    }\n}\n","import { getDataURLFromImageData } from \"../helper\";\nimport { Painter } from \"../painter\";\nexport class Poster {\n    /**\n     * SVGA 元数据\n     * Video Entity\n     */\n    entity = undefined;\n    /**\n     * 当前的帧，默认值 0\n     */\n    frame = 0;\n    /**\n     * 填充模式，类似于 content-mode。\n     */\n    contentMode = \"fill\" /* PLAYER_CONTENT_MODE.FILL */;\n    /**\n     * 是否配置完成\n     */\n    isConfigured = false;\n    /**\n     * 刷头实例\n     */\n    painter;\n    constructor(width, height) {\n        this.painter = new Painter(\"poster\", width, height);\n    }\n    /**\n     * 设置配置项\n     * @param options 可配置项\n     */\n    setConfig(options = {}, component) {\n        const config = typeof options === \"string\" ? { container: options } : options;\n        if (config.container === undefined) {\n            config.container = \"\";\n        }\n        if (config.contentMode !== undefined) {\n            this.contentMode = config.contentMode;\n        }\n        this.frame = typeof config.frame === 'number' ? config.frame : 0;\n        this.isConfigured = true;\n        return this.painter.register(config.container, '', component);\n    }\n    /**\n     * 修改内容模式\n     * @param contentMode\n     */\n    setContentMode(contentMode) {\n        this.contentMode = contentMode;\n    }\n    /**\n     * 设置当前帧\n     * @param frame\n     */\n    setFrame(frame) {\n        this.frame = frame;\n    }\n    /**\n     * 装载 SVGA 数据元\n     * @param videoEntity SVGA 数据源\n     * @param currFrame\n     * @returns\n     */\n    async mount(videoEntity) {\n        if (!videoEntity) {\n            throw new Error(\"videoEntity undefined\");\n        }\n        if (!this.isConfigured) {\n            await this.painter.register('', '', null);\n            this.isConfigured = true;\n        }\n        const { images, filename } = videoEntity;\n        this.painter.clearContainer();\n        this.painter.clearMaterials();\n        this.painter.updateDynamicImages(videoEntity.dynamicElements);\n        this.entity = videoEntity;\n        return this.painter.loadImages(images, filename);\n    }\n    /**\n     * 绘制海报\n     */\n    draw() {\n        if (!this.entity)\n            return;\n        const { painter, entity, contentMode, frame } = this;\n        painter.resize(contentMode, entity.size);\n        painter.draw(entity, frame, 0, entity.sprites.length);\n    }\n    /**\n     * 获取海报元数据\n     * @returns\n     */\n    toDataURL() {\n        return getDataURLFromImageData(this.painter.getImageData());\n    }\n    /**\n     * 销毁海报\n     */\n    destroy() {\n        this.painter.destroy();\n        this.entity = undefined;\n    }\n}\n"],"names":["u8","Uint8Array","u16","Uint16Array","i32","Int32Array","fleb","fdeb","clim","freb","eb","start","b","i","r","j","_a","fl","revfl","_b","fd","revfd","rev","x","hMap","cd","mb","s","length","l","co","le","rvb","sv","r_1","v","m","flt","fdt","flm","flrm","fdm","fdrm","max","a","bits","d","p","o","bits16","shft","slc","e","subarray","ec","err","ind","msg","nt","Error","code","captureStackTrace","wbits","wbits16","hTree","t","push","f","t2","slice","et","sort","i0","i1","i2","maxSym","tr","mbt","ln","dt","lft","cst","i2_1","i2_2","i2_3","n","Math","lc","c","cl","cli","cln","cls","w","clen","cf","wfblk","out","pos","dat","wblk","final","syms","lf","df","li","bs","bl","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","lm","ll","dm","dl","flen","ftlen","dtlen","llm","lcts","it","clct","len","sym","dst","deo","adler","min","dopt","opt","pre","post","st","dictionary","dict","newDat","set","lvl","plvl","z","ceil","lst","msk_1","prev","head","h","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","lin","din","dflt","level","mem","log","wbytes","zlibSync","data","opts","lv","zlh","unzlibSync","buf","sl","noBuf","resize","noSt","cbuf","nbuf","bt","lbt","dbt","tbts","type","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","lt","lms","dms","lpos","add","dsym","end","shift","dend","inflt","td","TextDecoder","decode","stream","async","Promise","setTimeout","RangeError","Array","fromCharCode","String","join","plugins","globalCanvas","platformVersion","version","globals","env","br","dpr","noop","retry","constructor","this","autoEnv","init","useBridge","usePixelRatio","reduce","name","map","usePlugins","window","tt","my","wx","globalThis","devicePixelRatio","getWindowInfo","pixelRatio","getSystemInfoSync","forEach","isArray","dependencies","install","installPlugin","setGlobalCanvas","getGlobalCanvas","getContext","width","height","canvas","context","document","querySelector","clientWidth","clientHeight","createSelectorQuery","in","select","fields","node","size","exec","toBuffer","buffer","byteOffset","byteLength","bytesToString","apply","from","fatal","toDataURL","btoa","utf8","arrayBufferToBase64","test","is","fetch","then","ok","arrayBuffer","status","statusText","request","url","dataType","responseType","enableCache","success","fail","catch","errMsg","errorMessage","message","includes","getFileSystemManager","write","writeFile","filePath","read","readFile","remove","unlink","local","path","Set","onload","has","delete","onerror","src","Image","isImage","isImageBitmap","ImageBitmap","create","load","createImageBitmap","Blob","resolve","createImage","u","console","warn","performance","getPerformance","now","Date","OffscreenCanvas","createOffscreenCanvas","substring","lastIndexOf","USER_DATA_PATH","filename","getEnvInfoSync","common","g","requestAnimationFrame","badge","sys","getDeviceBaseInfo","platform","getDeviceInfoSync","getDeviceInfo","toLocaleLowerCase","Stopwatch","label","startTime","isRealMachine","time","stop","timeEnd","benchmark","callback","stopwatch","result","line","repeat","Platform","remote","image","rAF","getCanvas","getOfsCanvas","super","pluginCanvas","pluginOfsCanvas","pluginDecode","pluginDownload","pluginFsm","pluginImage","pluginNow","pluginPath","pluginRAF","plugin","value","call","Object","defineProperty","get","enumerable","configurable","view","DataView","ArrayBuffer","tempUint8Array","float","readFloatLE","getFloat32","Reader","static","begin","indexOutOfRange","reader","writeLength","uint32","int32","bytes","EMPTY_UINT8ARRAY","string","skip","startPos","skipType","wireType","Layout","undefined","tag","y","properties","Transform","tx","ty","ShapeArgs","RectArgs","cornerRadius","EllipseArgs","radiusX","radiusY","RGBAColor","ShapeStyle","fill","stroke","strokeWidth","lineCap","lineJoin","miterLimit","lineDashI","lineDashII","lineDashIII","ShapeEntity","shape","rect","ellipse","styles","transform","$oneOfFields","$fieldMap","args","keys","key","FrameEntity","alpha","layout","clipPath","shapes","SpriteEntity","imageKey","frames","matteKey","MovieParams","viewBoxWidth","viewBoxHeight","fps","MovieEntity","freeze","params","images","EMPTY_OBJECT","end2","tag2","sprites","VideoEntity","locked","dynamicElements","movie","formatSprites","mSprites","mSprite","formatFrames","mFrames","lastShapes","mFrame","FL","FT","FA","L","T","formatShapes","llx","lrx","lbx","rbx","lly","lry","lby","rby","nx","ny","CP","maskPath","lineDash","mShapes","mShape","mStyles","LD1","LD2","LD3","StF","StS","SS","ShF","ST","Parser","parseVideo","header","u8a","toString","entity","inflateData","movieData","SVGADecoder","download","PointPool","pool","getInstance","instance","acquire","pop","x1","y1","x2","y2","release","point","drawSprite","sprite","currentFrame","bitmap","dynamicElement","globalTransform","frame","save","globalAlpha","drawBezier","clip","drawImage","drawShape","restore","resetShapeStyles","kappa","ox","oy","xe","ye","xm","ym","beginPath","moveTo","bezierCurveTo","drawEllipse","radius","arcTo","closePath","drawRect","strokeStyle","lineWidth","fillStyle","setLineDash","pointPool","currentPoint","commands","match","command","firstLetter","drawBezierElement","trim","split","filter","Boolean","method","lineTo","quadraticCurveTo","ImagePool","dynamicMaterials","Map","materials","getReleaseImage","loadAll","imageAwaits","img","all","appendAll","entries","releaseOne","close","clear","Painter","mode","X","XC","Y","YC","W","H","model","IM","lastResizeKey","lastTransform","setModel","navigator","userAgent","register","selector","ofsSelector","component","ofsResult","clearContainer","clearRect","clearSecondary","stick","updateDynamicImages","loadImages","getImageData","calculateScale","contentMode","videoSize","imageRatio","viewRatio","isAspectFit","scale","scaleX","scaleY","translateX","translateY","canvasWidth","canvasHeight","videoWidth","videoHeight","resizeKey","clearMaterials","draw","videoEntity","tail","render","destroy","Animator","isRunning","duration","loopStart","loopDuration","onStart","onUpdate","onEnd","setConfig","loop","fillValue","doFrame","resume","pause","doDeltaTime","DT","D","LS","LD","TP","ended","Config","fillMode","playMode","startFrame","endFrame","loopStartFrame","config","setItem","getConfig","spriteCount","currFrame","extFrame","frameDuration","totalFrame","aniConfig","floor","Infinity","Player","animator","painter","options","container","secondary","mount","onResume","onPause","onStop","onProcess","startAnimation","stepToFrame","andPlay","stepToPercentage","percent","round","isReverseMode","nextTail","latestFrame","nextFrame","exactFrame","hasRemained","chunk","elapsed","dynamicChunkSize","timePercent","before","patchDraw","CRC32","Uint32Array","_","initCRC32Table","cache","calculate","buff","TypeError","table","crc","PNGEncoder","pngData","crc32","createChunk","setUint32","chunkType","charCodeAt","partialChunk","createIHDRChunk","ihdrData","setUint8","createIDATChunk","rowSize","idatData","pixelsData","startIdx","srcStart","srcEnd","createIENDChunk","setPixel","pixel","pixels","index","flush","pngSignature","ihdrChunk","idatChunk","iendChunk","totalSize","offset","BitBuffer","lengthInBits","getAt","bufIndex","put","num","putBit","bit","QRMode","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","QRErrorCorrectLevel","M","Q","QRMaskPattern","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","BitByte","parsedData","byteArray","flat","unshift","RS_BLOCK_TABLE","RSBlock","getRSBlockTable","typeNumber","errorCorrectLevel","getRSBlocks","rsBlock","list","count","totalCount","dataCount","EXP_TABLE","LOG_TABLE","QRMath","glog","gexp","Polynomial","multiply","mod","ratio","PATTERN_POSITION_TABLE","genBCHDigit","log2","BCH_G15","BCH_G18","Util","getBCHTypeInfo","getBCHTypeNumber","getPatternPosition","getMaskFunction","maskPattern","_i","getErrorCorrectPolynomial","errorCorrectLength","getLengthInBits","getLostPoint","qr","moduleCount","getModuleCount","lostPoint","row","col","dark","isDark","sameCount","nRow","nCol","darkCount","abs","pow","QRCode","modules","dataCache","dataList","makeImpl","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","nr","nc","getBestMaskPattern","minLostPoint","pattern","rsBlocks","totalDataCount","createBytes","maskFunc","inc","bitIndex","byteIndex","bitBuffer","dcdata","ecdata","maxDcCount","maxEcCount","dcCount","ecCount","rsPoly","modPoly","modIndex","totalCodeCount","addData","make","generateImageBufferFromCode","correctLevel","codeColor","backgroundColor","parseOptions","arguments","callee","padding","cellSize","calcCellSizeAndPadding","CODE_COLOR","replace","BACKGROUND_COLOR","png","generateImageFromCode","getBufferFromImageData","imageData","pngEncoder","getDataURLFromImageData","VideoManager","maxRemain","remainStart","remainEnd","loadMode","buckets","parser","updateRemainPoints","updateBucketOperators","action","getBucket","operators","waitings","bucket","promise","origin","setLoadMode","prepare","urls","downloadAwait","parseVideoAwait","ex","error","go","getPoint","VideoEditor","createContext","setCanvas","setImage","startsWith","setQRCode","Poster","isConfigured","setContentMode","setFrame"],"mappings":"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AAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,KACV,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IA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","x_google_ignoreList":[0]}